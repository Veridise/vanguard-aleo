import puzzle_pieces_v016.aleo;
import multiparty_pvp_utils_v015_avh.aleo;
import football_leaderboard_v003.aleo;

program football_game_v008.aleo;

struct GameOutcome:
    goals_home as u64;
    goals_away as u64;

struct Player:
    player_id as u8;
    team_id as u8;
    position as field;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct GameResult:
    goals_home as u64;
    goals_away as u64;

record Game:
    owner as address.private;
    uuid as field.private;
    challenger_commit as field.private;
    opponent_answer as [u8; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record CalculatedOutcomeNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    result_mapping_uuid as field.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [u8; 11u32].private;
    game_uuid as field.private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [u8; 11u32].private;
    opponent_answer as [u8; 11u32].private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

mapping game_outcomes:
    key as field.public;
    value as GameOutcome.public;

mapping players:
    key as u8.public;
    value as Player.public;

function main:
    input r0 as boolean.private;

function add_player:
    input r0 as Player.private;
    assert.eq self.caller self.signer ;
    async add_player r0 into r1;
    output r1 as football_game_v008.aleo/add_player.future;

finalize add_player:
    input r0 as Player.public;
    is.eq r0.player_id 0u8 into r1;
    cast 0u8 0u8 0field 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r2 as Player;
    set r2 into players[r0.player_id];
    is.eq r0.position 1field into r3;
    is.eq r0.position 2field into r4;
    or r3 r4 into r5;
    is.eq r0.position 3field into r6;
    or r5 r6 into r7;
    is.eq r0.position 4field into r8;
    or r7 r8 into r9;
    not r1 into r10;
    not r10 into r11;
    or r11 r9 into r12;
    assert.eq r12 true ;
    set r0 into players[r0.player_id];

function propose_game:
    input r0 as puzzle_pieces_v016.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [u8; 11u32].private;
    input r14 as field.private;
    input r15 as field.private;
    cast r12 into r16 as scalar;
    commit.bhp256 r13 r16 into r17 as field;
    call puzzle_pieces_v016.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r18 r19 r20 r21 r22;
    call multiparty_pvp_utils_v015_avh.aleo/mint_multisig_key r14 r1 r3 r4 r5 into r23 r24;
    add r1 r1 into r25;
    cast r4 r5 1field true r25 r3 r4 2u32 into r26 as GameReqNotification.record;
    add r1 r1 into r27;
    cast r3 r5 1field false r27 r3 r4 3u32 into r28 as WaitingAcceptanceNotification.record;
    cast 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r29 as [u8; 11u32];
    add r1 r1 into r30;
    cast r5 r15 r17 r29 r30 r3 r4 r5 1field 1u32 into r31 as Game.record;
    call multiparty_pvp_utils_v015_avh.aleo/mint_answer r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 r11 into r32 r33;
    output r18 as puzzle_pieces_v016.aleo/PieceClaim.record;
    output r19 as puzzle_pieces_v016.aleo/PieceStake.record;
    output r20 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    output r21 as puzzle_pieces_v016.aleo/Piece.record;
    output r22 as puzzle_pieces_v016.aleo/AuditStakeIn.record;
    output r32 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r33 as multiparty_pvp_utils_v015_avh.aleo/AuditMintAnswer.record;
    output r23 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    output r24 as multiparty_pvp_utils_v015_avh.aleo/AuditKey.record;
    output r31 as Game.record;
    output r26 as GameReqNotification.record;
    output r28 as WaitingAcceptanceNotification.record;

function challenger_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v016.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v016.aleo/Piece.record;
    output r5 as puzzle_pieces_v016.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function submit_wager:
    input r0 as puzzle_pieces_v016.aleo/Piece.record;
    input r1 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer ;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true ;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true ;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v016.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v016.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v016.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v016.aleo/Piece.record;
    output r17 as puzzle_pieces_v016.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;

function opponent_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v016.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v016.aleo/Piece.record;
    output r5 as puzzle_pieces_v016.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function accept_game:
    input r0 as Game.record;
    input r1 as [u8; 11u32].private;
    input r2 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v016.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 r0.uuid 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.uuid r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 r1 into r14;
    output r7 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v016.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v016.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v008.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    input r1 as [u8; 11u32].public;
    sub block.height 1000u32 into r2;
    gte r0 r2 into r3;
    assert.eq r3 true ;
    add block.height 1000u32 into r4;
    lte r0 r4 into r5;
    assert.eq r5 true ;

function calculate_outcome:
    input r0 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    input r1 as RevealAnswerNotification.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceState.record;
    input r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    call multiparty_pvp_utils_v015_avh.aleo/reveal_answer r3 r0.sig into r4 r5;
    cast r1.challenger_address r1.game_multisig 4field true r1.total_pot r1.challenger_address r1.opponent_address r1.game_uuid 8u32 into r6 as CalculatedOutcomeNotification.record;
    async calculate_outcome r1.game_uuid r1.opponent_answer r3.answer into r7;
    output r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r2 as puzzle_pieces_v016.aleo/JointPieceState.record;
    output r7 as football_game_v008.aleo/calculate_outcome.future;

finalize calculate_outcome:
    input r0 as field.public;
    input r1 as [u8; 11u32].public;
    input r2 as [u8; 11u32].public;
    get players[r1[10u32]] into r3;
    get players[r2[10u32]] into r4;
    is.eq 0u8 1u8 into r5;
    ternary r5 r2[0u32] r1[0u32] into r6;
    ternary r5 r2[1u32] r1[1u32] into r7;
    ternary r5 r2[2u32] r1[2u32] into r8;
    ternary r5 r2[3u32] r1[3u32] into r9;
    ternary r5 r2[4u32] r1[4u32] into r10;
    ternary r5 r2[5u32] r1[5u32] into r11;
    ternary r5 r2[6u32] r1[6u32] into r12;
    ternary r5 r2[7u32] r1[7u32] into r13;
    ternary r5 r2[8u32] r1[8u32] into r14;
    ternary r5 r2[9u32] r1[9u32] into r15;
    ternary r5 r2[10u32] r1[10u32] into r16;
    cast r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 into r17 as [u8; 11u32];
    get players[r17[0u32]] into r18;
    get players[r17[1u32]] into r19;
    is.eq r19.position 1field into r20;
    add 0u8 1u8 into r21;
    ternary r20 r21 0u8 into r22;
    is.neq r19.team_id r18.team_id into r23;
    ternary r23 false true into r24;
    get players[r17[2u32]] into r25;
    is.eq r25.position 1field into r26;
    add r22 1u8 into r27;
    ternary r26 r27 r22 into r28;
    is.neq r25.team_id r18.team_id into r29;
    ternary r29 false r24 into r30;
    get players[r17[3u32]] into r31;
    is.eq r31.position 1field into r32;
    add r28 1u8 into r33;
    ternary r32 r33 r28 into r34;
    is.neq r31.team_id r18.team_id into r35;
    ternary r35 false r30 into r36;
    get players[r17[4u32]] into r37;
    is.eq r37.position 1field into r38;
    add r34 1u8 into r39;
    ternary r38 r39 r34 into r40;
    is.neq r37.team_id r18.team_id into r41;
    ternary r41 false r36 into r42;
    get players[r17[5u32]] into r43;
    is.eq r43.position 1field into r44;
    add r40 1u8 into r45;
    ternary r44 r45 r40 into r46;
    is.neq r43.team_id r18.team_id into r47;
    ternary r47 false r42 into r48;
    get players[r17[6u32]] into r49;
    is.eq r49.position 1field into r50;
    add r46 1u8 into r51;
    ternary r50 r51 r46 into r52;
    is.neq r49.team_id r18.team_id into r53;
    ternary r53 false r48 into r54;
    get players[r17[7u32]] into r55;
    is.eq r55.position 1field into r56;
    add r52 1u8 into r57;
    ternary r56 r57 r52 into r58;
    is.neq r55.team_id r18.team_id into r59;
    ternary r59 false r54 into r60;
    get players[r17[8u32]] into r61;
    is.eq r61.position 1field into r62;
    add r58 1u8 into r63;
    ternary r62 r63 r58 into r64;
    is.neq r61.team_id r18.team_id into r65;
    ternary r65 false r60 into r66;
    get players[r17[9u32]] into r67;
    is.eq r67.position 1field into r68;
    add r64 1u8 into r69;
    ternary r68 r69 r64 into r70;
    is.neq r67.team_id r18.team_id into r71;
    ternary r71 false r66 into r72;
    get players[r17[10u32]] into r73;
    is.eq r73.position 1field into r74;
    add r70 1u8 into r75;
    ternary r74 r75 r70 into r76;
    is.neq r73.team_id r18.team_id into r77;
    ternary r77 false r72 into r78;
    not r78 into r79;
    is.neq r76 1u8 into r80;
    or r79 r80 into r81;
    is.eq 0u8 0u8 into r82;
    ternary r82 3u64 0u64 into r83;
    ternary r82 0u64 3u64 into r84;
    ternary r81 false true into r85;
    ternary r81 r83 0u64 into r86;
    ternary r81 r84 0u64 into r87;
    is.eq 1u8 1u8 into r88;
    ternary r88 r2[0u32] r1[0u32] into r89;
    ternary r88 r2[1u32] r1[1u32] into r90;
    ternary r88 r2[2u32] r1[2u32] into r91;
    ternary r88 r2[3u32] r1[3u32] into r92;
    ternary r88 r2[4u32] r1[4u32] into r93;
    ternary r88 r2[5u32] r1[5u32] into r94;
    ternary r88 r2[6u32] r1[6u32] into r95;
    ternary r88 r2[7u32] r1[7u32] into r96;
    ternary r88 r2[8u32] r1[8u32] into r97;
    ternary r88 r2[9u32] r1[9u32] into r98;
    ternary r88 r2[10u32] r1[10u32] into r99;
    cast r89 r90 r91 r92 r93 r94 r95 r96 r97 r98 r99 into r100 as [u8; 11u32];
    get players[r100[0u32]] into r101;
    get players[r100[1u32]] into r102;
    is.eq r102.position 1field into r103;
    add 0u8 1u8 into r104;
    ternary r103 r104 0u8 into r105;
    is.neq r102.team_id r101.team_id into r106;
    ternary r106 false true into r107;
    get players[r100[2u32]] into r108;
    is.eq r108.position 1field into r109;
    add r105 1u8 into r110;
    ternary r109 r110 r105 into r111;
    is.neq r108.team_id r101.team_id into r112;
    ternary r112 false r107 into r113;
    get players[r100[3u32]] into r114;
    is.eq r114.position 1field into r115;
    add r111 1u8 into r116;
    ternary r115 r116 r111 into r117;
    is.neq r114.team_id r101.team_id into r118;
    ternary r118 false r113 into r119;
    get players[r100[4u32]] into r120;
    is.eq r120.position 1field into r121;
    add r117 1u8 into r122;
    ternary r121 r122 r117 into r123;
    is.neq r120.team_id r101.team_id into r124;
    ternary r124 false r119 into r125;
    get players[r100[5u32]] into r126;
    is.eq r126.position 1field into r127;
    add r123 1u8 into r128;
    ternary r127 r128 r123 into r129;
    is.neq r126.team_id r101.team_id into r130;
    ternary r130 false r125 into r131;
    get players[r100[6u32]] into r132;
    is.eq r132.position 1field into r133;
    add r129 1u8 into r134;
    ternary r133 r134 r129 into r135;
    is.neq r132.team_id r101.team_id into r136;
    ternary r136 false r131 into r137;
    get players[r100[7u32]] into r138;
    is.eq r138.position 1field into r139;
    add r135 1u8 into r140;
    ternary r139 r140 r135 into r141;
    is.neq r138.team_id r101.team_id into r142;
    ternary r142 false r137 into r143;
    get players[r100[8u32]] into r144;
    is.eq r144.position 1field into r145;
    add r141 1u8 into r146;
    ternary r145 r146 r141 into r147;
    is.neq r144.team_id r101.team_id into r148;
    ternary r148 false r143 into r149;
    get players[r100[9u32]] into r150;
    is.eq r150.position 1field into r151;
    add r147 1u8 into r152;
    ternary r151 r152 r147 into r153;
    is.neq r150.team_id r101.team_id into r154;
    ternary r154 false r149 into r155;
    get players[r100[10u32]] into r156;
    is.eq r156.position 1field into r157;
    add r153 1u8 into r158;
    ternary r157 r158 r153 into r159;
    is.neq r156.team_id r101.team_id into r160;
    ternary r160 false r155 into r161;
    not r161 into r162;
    is.neq r159 1u8 into r163;
    or r162 r163 into r164;
    is.eq 1u8 0u8 into r165;
    ternary r165 3u64 0u64 into r166;
    ternary r165 0u64 3u64 into r167;
    ternary r164 false r85 into r168;
    ternary r164 r166 r86 into r169;
    ternary r164 r167 r87 into r170;
    get players[r1[1u32]] into r171;
    get players[r2[1u32]] into r172;
    gt r171.speed r172.speed into r173;
    ternary r173 r171.player_id r172.player_id into r174;
    ternary r173 r171.team_id r172.team_id into r175;
    ternary r173 r171.position r172.position into r176;
    ternary r173 r171.attack r172.attack into r177;
    ternary r173 r171.defense r172.defense into r178;
    ternary r173 r171.speed r172.speed into r179;
    ternary r173 r171.power r172.power into r180;
    ternary r173 r171.stamina r172.stamina into r181;
    ternary r173 r171.technique r172.technique into r182;
    ternary r173 r171.goalkeeping r172.goalkeeping into r183;
    cast r174 r175 r176 r177 r178 r179 r180 r181 r182 r183 into r184 as Player;
    gt r171.speed r172.speed into r185;
    ternary r185 r172.player_id r171.player_id into r186;
    ternary r185 r172.team_id r171.team_id into r187;
    ternary r185 r172.position r171.position into r188;
    ternary r185 r172.attack r171.attack into r189;
    ternary r185 r172.defense r171.defense into r190;
    ternary r185 r172.speed r171.speed into r191;
    ternary r185 r172.power r171.power into r192;
    ternary r185 r172.stamina r171.stamina into r193;
    ternary r185 r172.technique r171.technique into r194;
    ternary r185 r172.goalkeeping r171.goalkeeping into r195;
    cast r186 r187 r188 r189 r190 r191 r192 r193 r194 r195 into r196 as Player;
    gt r171.speed r172.speed into r197;
    get players[r2[0u32]] into r198;
    get players[r1[0u32]] into r199;
    ternary r197 r198.player_id r199.player_id into r200;
    ternary r197 r198.team_id r199.team_id into r201;
    ternary r197 r198.position r199.position into r202;
    ternary r197 r198.attack r199.attack into r203;
    ternary r197 r198.defense r199.defense into r204;
    ternary r197 r198.speed r199.speed into r205;
    ternary r197 r198.power r199.power into r206;
    ternary r197 r198.stamina r199.stamina into r207;
    ternary r197 r198.technique r199.technique into r208;
    ternary r197 r198.goalkeeping r199.goalkeeping into r209;
    cast r200 r201 r202 r203 r204 r205 r206 r207 r208 r209 into r210 as Player;
    rand.chacha into r211 as u8;
    gt r184.attack r211 into r212;
    rand.chacha into r213 as u8;
    lt r196.defense r213 into r214;
    rand.chacha into r215 as u8;
    lt r210.goalkeeping r215 into r216;
    lt r171.speed r172.speed into r217;
    add r170 1u64 into r218;
    add r169 1u64 into r219;
    ternary r217 r218 r170 into r220;
    ternary r217 r169 r219 into r221;
    ternary r216 r220 r170 into r222;
    ternary r216 r221 r169 into r223;
    ternary r214 r222 r170 into r224;
    ternary r214 r223 r169 into r225;
    ternary r212 r224 r170 into r226;
    ternary r212 r225 r169 into r227;
    get players[r1[2u32]] into r228;
    get players[r2[2u32]] into r229;
    gt r228.speed r229.speed into r230;
    ternary r230 r228.player_id r229.player_id into r231;
    ternary r230 r228.team_id r229.team_id into r232;
    ternary r230 r228.position r229.position into r233;
    ternary r230 r228.attack r229.attack into r234;
    ternary r230 r228.defense r229.defense into r235;
    ternary r230 r228.speed r229.speed into r236;
    ternary r230 r228.power r229.power into r237;
    ternary r230 r228.stamina r229.stamina into r238;
    ternary r230 r228.technique r229.technique into r239;
    ternary r230 r228.goalkeeping r229.goalkeeping into r240;
    cast r231 r232 r233 r234 r235 r236 r237 r238 r239 r240 into r241 as Player;
    gt r228.speed r229.speed into r242;
    ternary r242 r229.player_id r228.player_id into r243;
    ternary r242 r229.team_id r228.team_id into r244;
    ternary r242 r229.position r228.position into r245;
    ternary r242 r229.attack r228.attack into r246;
    ternary r242 r229.defense r228.defense into r247;
    ternary r242 r229.speed r228.speed into r248;
    ternary r242 r229.power r228.power into r249;
    ternary r242 r229.stamina r228.stamina into r250;
    ternary r242 r229.technique r228.technique into r251;
    ternary r242 r229.goalkeeping r228.goalkeeping into r252;
    cast r243 r244 r245 r246 r247 r248 r249 r250 r251 r252 into r253 as Player;
    gt r228.speed r229.speed into r254;
    get players[r2[0u32]] into r255;
    get players[r1[0u32]] into r256;
    ternary r254 r255.player_id r256.player_id into r257;
    ternary r254 r255.team_id r256.team_id into r258;
    ternary r254 r255.position r256.position into r259;
    ternary r254 r255.attack r256.attack into r260;
    ternary r254 r255.defense r256.defense into r261;
    ternary r254 r255.speed r256.speed into r262;
    ternary r254 r255.power r256.power into r263;
    ternary r254 r255.stamina r256.stamina into r264;
    ternary r254 r255.technique r256.technique into r265;
    ternary r254 r255.goalkeeping r256.goalkeeping into r266;
    cast r257 r258 r259 r260 r261 r262 r263 r264 r265 r266 into r267 as Player;
    rand.chacha into r268 as u8;
    gt r241.attack r268 into r269;
    rand.chacha into r270 as u8;
    lt r253.defense r270 into r271;
    rand.chacha into r272 as u8;
    lt r267.goalkeeping r272 into r273;
    lt r228.speed r229.speed into r274;
    add r226 1u64 into r275;
    add r227 1u64 into r276;
    ternary r274 r275 r226 into r277;
    ternary r274 r227 r276 into r278;
    ternary r273 r277 r226 into r279;
    ternary r273 r278 r227 into r280;
    ternary r271 r279 r226 into r281;
    ternary r271 r280 r227 into r282;
    ternary r269 r281 r226 into r283;
    ternary r269 r282 r227 into r284;
    get players[r1[3u32]] into r285;
    get players[r2[3u32]] into r286;
    gt r285.speed r286.speed into r287;
    ternary r287 r285.player_id r286.player_id into r288;
    ternary r287 r285.team_id r286.team_id into r289;
    ternary r287 r285.position r286.position into r290;
    ternary r287 r285.attack r286.attack into r291;
    ternary r287 r285.defense r286.defense into r292;
    ternary r287 r285.speed r286.speed into r293;
    ternary r287 r285.power r286.power into r294;
    ternary r287 r285.stamina r286.stamina into r295;
    ternary r287 r285.technique r286.technique into r296;
    ternary r287 r285.goalkeeping r286.goalkeeping into r297;
    cast r288 r289 r290 r291 r292 r293 r294 r295 r296 r297 into r298 as Player;
    gt r285.speed r286.speed into r299;
    ternary r299 r286.player_id r285.player_id into r300;
    ternary r299 r286.team_id r285.team_id into r301;
    ternary r299 r286.position r285.position into r302;
    ternary r299 r286.attack r285.attack into r303;
    ternary r299 r286.defense r285.defense into r304;
    ternary r299 r286.speed r285.speed into r305;
    ternary r299 r286.power r285.power into r306;
    ternary r299 r286.stamina r285.stamina into r307;
    ternary r299 r286.technique r285.technique into r308;
    ternary r299 r286.goalkeeping r285.goalkeeping into r309;
    cast r300 r301 r302 r303 r304 r305 r306 r307 r308 r309 into r310 as Player;
    gt r285.speed r286.speed into r311;
    get players[r2[0u32]] into r312;
    get players[r1[0u32]] into r313;
    ternary r311 r312.player_id r313.player_id into r314;
    ternary r311 r312.team_id r313.team_id into r315;
    ternary r311 r312.position r313.position into r316;
    ternary r311 r312.attack r313.attack into r317;
    ternary r311 r312.defense r313.defense into r318;
    ternary r311 r312.speed r313.speed into r319;
    ternary r311 r312.power r313.power into r320;
    ternary r311 r312.stamina r313.stamina into r321;
    ternary r311 r312.technique r313.technique into r322;
    ternary r311 r312.goalkeeping r313.goalkeeping into r323;
    cast r314 r315 r316 r317 r318 r319 r320 r321 r322 r323 into r324 as Player;
    rand.chacha into r325 as u8;
    gt r298.attack r325 into r326;
    rand.chacha into r327 as u8;
    lt r310.defense r327 into r328;
    rand.chacha into r329 as u8;
    lt r324.goalkeeping r329 into r330;
    lt r285.speed r286.speed into r331;
    add r283 1u64 into r332;
    add r284 1u64 into r333;
    ternary r331 r332 r283 into r334;
    ternary r331 r284 r333 into r335;
    ternary r330 r334 r283 into r336;
    ternary r330 r335 r284 into r337;
    ternary r328 r336 r283 into r338;
    ternary r328 r337 r284 into r339;
    ternary r326 r338 r283 into r340;
    ternary r326 r339 r284 into r341;
    get players[r1[4u32]] into r342;
    get players[r2[4u32]] into r343;
    gt r342.speed r343.speed into r344;
    ternary r344 r342.player_id r343.player_id into r345;
    ternary r344 r342.team_id r343.team_id into r346;
    ternary r344 r342.position r343.position into r347;
    ternary r344 r342.attack r343.attack into r348;
    ternary r344 r342.defense r343.defense into r349;
    ternary r344 r342.speed r343.speed into r350;
    ternary r344 r342.power r343.power into r351;
    ternary r344 r342.stamina r343.stamina into r352;
    ternary r344 r342.technique r343.technique into r353;
    ternary r344 r342.goalkeeping r343.goalkeeping into r354;
    cast r345 r346 r347 r348 r349 r350 r351 r352 r353 r354 into r355 as Player;
    gt r342.speed r343.speed into r356;
    ternary r356 r343.player_id r342.player_id into r357;
    ternary r356 r343.team_id r342.team_id into r358;
    ternary r356 r343.position r342.position into r359;
    ternary r356 r343.attack r342.attack into r360;
    ternary r356 r343.defense r342.defense into r361;
    ternary r356 r343.speed r342.speed into r362;
    ternary r356 r343.power r342.power into r363;
    ternary r356 r343.stamina r342.stamina into r364;
    ternary r356 r343.technique r342.technique into r365;
    ternary r356 r343.goalkeeping r342.goalkeeping into r366;
    cast r357 r358 r359 r360 r361 r362 r363 r364 r365 r366 into r367 as Player;
    gt r342.speed r343.speed into r368;
    get players[r2[0u32]] into r369;
    get players[r1[0u32]] into r370;
    ternary r368 r369.player_id r370.player_id into r371;
    ternary r368 r369.team_id r370.team_id into r372;
    ternary r368 r369.position r370.position into r373;
    ternary r368 r369.attack r370.attack into r374;
    ternary r368 r369.defense r370.defense into r375;
    ternary r368 r369.speed r370.speed into r376;
    ternary r368 r369.power r370.power into r377;
    ternary r368 r369.stamina r370.stamina into r378;
    ternary r368 r369.technique r370.technique into r379;
    ternary r368 r369.goalkeeping r370.goalkeeping into r380;
    cast r371 r372 r373 r374 r375 r376 r377 r378 r379 r380 into r381 as Player;
    rand.chacha into r382 as u8;
    gt r355.attack r382 into r383;
    rand.chacha into r384 as u8;
    lt r367.defense r384 into r385;
    rand.chacha into r386 as u8;
    lt r381.goalkeeping r386 into r387;
    lt r342.speed r343.speed into r388;
    add r340 1u64 into r389;
    add r341 1u64 into r390;
    ternary r388 r389 r340 into r391;
    ternary r388 r341 r390 into r392;
    ternary r387 r391 r340 into r393;
    ternary r387 r392 r341 into r394;
    ternary r385 r393 r340 into r395;
    ternary r385 r394 r341 into r396;
    ternary r383 r395 r340 into r397;
    ternary r383 r396 r341 into r398;
    get players[r1[5u32]] into r399;
    get players[r2[5u32]] into r400;
    gt r399.speed r400.speed into r401;
    ternary r401 r399.player_id r400.player_id into r402;
    ternary r401 r399.team_id r400.team_id into r403;
    ternary r401 r399.position r400.position into r404;
    ternary r401 r399.attack r400.attack into r405;
    ternary r401 r399.defense r400.defense into r406;
    ternary r401 r399.speed r400.speed into r407;
    ternary r401 r399.power r400.power into r408;
    ternary r401 r399.stamina r400.stamina into r409;
    ternary r401 r399.technique r400.technique into r410;
    ternary r401 r399.goalkeeping r400.goalkeeping into r411;
    cast r402 r403 r404 r405 r406 r407 r408 r409 r410 r411 into r412 as Player;
    gt r399.speed r400.speed into r413;
    ternary r413 r400.player_id r399.player_id into r414;
    ternary r413 r400.team_id r399.team_id into r415;
    ternary r413 r400.position r399.position into r416;
    ternary r413 r400.attack r399.attack into r417;
    ternary r413 r400.defense r399.defense into r418;
    ternary r413 r400.speed r399.speed into r419;
    ternary r413 r400.power r399.power into r420;
    ternary r413 r400.stamina r399.stamina into r421;
    ternary r413 r400.technique r399.technique into r422;
    ternary r413 r400.goalkeeping r399.goalkeeping into r423;
    cast r414 r415 r416 r417 r418 r419 r420 r421 r422 r423 into r424 as Player;
    gt r399.speed r400.speed into r425;
    get players[r2[0u32]] into r426;
    get players[r1[0u32]] into r427;
    ternary r425 r426.player_id r427.player_id into r428;
    ternary r425 r426.team_id r427.team_id into r429;
    ternary r425 r426.position r427.position into r430;
    ternary r425 r426.attack r427.attack into r431;
    ternary r425 r426.defense r427.defense into r432;
    ternary r425 r426.speed r427.speed into r433;
    ternary r425 r426.power r427.power into r434;
    ternary r425 r426.stamina r427.stamina into r435;
    ternary r425 r426.technique r427.technique into r436;
    ternary r425 r426.goalkeeping r427.goalkeeping into r437;
    cast r428 r429 r430 r431 r432 r433 r434 r435 r436 r437 into r438 as Player;
    rand.chacha into r439 as u8;
    gt r412.attack r439 into r440;
    rand.chacha into r441 as u8;
    lt r424.defense r441 into r442;
    rand.chacha into r443 as u8;
    lt r438.goalkeeping r443 into r444;
    lt r399.speed r400.speed into r445;
    add r397 1u64 into r446;
    add r398 1u64 into r447;
    ternary r445 r446 r397 into r448;
    ternary r445 r398 r447 into r449;
    ternary r444 r448 r397 into r450;
    ternary r444 r449 r398 into r451;
    ternary r442 r450 r397 into r452;
    ternary r442 r451 r398 into r453;
    ternary r440 r452 r397 into r454;
    ternary r440 r453 r398 into r455;
    get players[r1[6u32]] into r456;
    get players[r2[6u32]] into r457;
    gt r456.speed r457.speed into r458;
    ternary r458 r456.player_id r457.player_id into r459;
    ternary r458 r456.team_id r457.team_id into r460;
    ternary r458 r456.position r457.position into r461;
    ternary r458 r456.attack r457.attack into r462;
    ternary r458 r456.defense r457.defense into r463;
    ternary r458 r456.speed r457.speed into r464;
    ternary r458 r456.power r457.power into r465;
    ternary r458 r456.stamina r457.stamina into r466;
    ternary r458 r456.technique r457.technique into r467;
    ternary r458 r456.goalkeeping r457.goalkeeping into r468;
    cast r459 r460 r461 r462 r463 r464 r465 r466 r467 r468 into r469 as Player;
    gt r456.speed r457.speed into r470;
    ternary r470 r457.player_id r456.player_id into r471;
    ternary r470 r457.team_id r456.team_id into r472;
    ternary r470 r457.position r456.position into r473;
    ternary r470 r457.attack r456.attack into r474;
    ternary r470 r457.defense r456.defense into r475;
    ternary r470 r457.speed r456.speed into r476;
    ternary r470 r457.power r456.power into r477;
    ternary r470 r457.stamina r456.stamina into r478;
    ternary r470 r457.technique r456.technique into r479;
    ternary r470 r457.goalkeeping r456.goalkeeping into r480;
    cast r471 r472 r473 r474 r475 r476 r477 r478 r479 r480 into r481 as Player;
    gt r456.speed r457.speed into r482;
    get players[r2[0u32]] into r483;
    get players[r1[0u32]] into r484;
    ternary r482 r483.player_id r484.player_id into r485;
    ternary r482 r483.team_id r484.team_id into r486;
    ternary r482 r483.position r484.position into r487;
    ternary r482 r483.attack r484.attack into r488;
    ternary r482 r483.defense r484.defense into r489;
    ternary r482 r483.speed r484.speed into r490;
    ternary r482 r483.power r484.power into r491;
    ternary r482 r483.stamina r484.stamina into r492;
    ternary r482 r483.technique r484.technique into r493;
    ternary r482 r483.goalkeeping r484.goalkeeping into r494;
    cast r485 r486 r487 r488 r489 r490 r491 r492 r493 r494 into r495 as Player;
    rand.chacha into r496 as u8;
    gt r469.attack r496 into r497;
    rand.chacha into r498 as u8;
    lt r481.defense r498 into r499;
    rand.chacha into r500 as u8;
    lt r495.goalkeeping r500 into r501;
    lt r456.speed r457.speed into r502;
    add r454 1u64 into r503;
    add r455 1u64 into r504;
    ternary r502 r503 r454 into r505;
    ternary r502 r455 r504 into r506;
    ternary r501 r505 r454 into r507;
    ternary r501 r506 r455 into r508;
    ternary r499 r507 r454 into r509;
    ternary r499 r508 r455 into r510;
    ternary r497 r509 r454 into r511;
    ternary r497 r510 r455 into r512;
    get players[r1[7u32]] into r513;
    get players[r2[7u32]] into r514;
    gt r513.speed r514.speed into r515;
    ternary r515 r513.player_id r514.player_id into r516;
    ternary r515 r513.team_id r514.team_id into r517;
    ternary r515 r513.position r514.position into r518;
    ternary r515 r513.attack r514.attack into r519;
    ternary r515 r513.defense r514.defense into r520;
    ternary r515 r513.speed r514.speed into r521;
    ternary r515 r513.power r514.power into r522;
    ternary r515 r513.stamina r514.stamina into r523;
    ternary r515 r513.technique r514.technique into r524;
    ternary r515 r513.goalkeeping r514.goalkeeping into r525;
    cast r516 r517 r518 r519 r520 r521 r522 r523 r524 r525 into r526 as Player;
    gt r513.speed r514.speed into r527;
    ternary r527 r514.player_id r513.player_id into r528;
    ternary r527 r514.team_id r513.team_id into r529;
    ternary r527 r514.position r513.position into r530;
    ternary r527 r514.attack r513.attack into r531;
    ternary r527 r514.defense r513.defense into r532;
    ternary r527 r514.speed r513.speed into r533;
    ternary r527 r514.power r513.power into r534;
    ternary r527 r514.stamina r513.stamina into r535;
    ternary r527 r514.technique r513.technique into r536;
    ternary r527 r514.goalkeeping r513.goalkeeping into r537;
    cast r528 r529 r530 r531 r532 r533 r534 r535 r536 r537 into r538 as Player;
    gt r513.speed r514.speed into r539;
    get players[r2[0u32]] into r540;
    get players[r1[0u32]] into r541;
    ternary r539 r540.player_id r541.player_id into r542;
    ternary r539 r540.team_id r541.team_id into r543;
    ternary r539 r540.position r541.position into r544;
    ternary r539 r540.attack r541.attack into r545;
    ternary r539 r540.defense r541.defense into r546;
    ternary r539 r540.speed r541.speed into r547;
    ternary r539 r540.power r541.power into r548;
    ternary r539 r540.stamina r541.stamina into r549;
    ternary r539 r540.technique r541.technique into r550;
    ternary r539 r540.goalkeeping r541.goalkeeping into r551;
    cast r542 r543 r544 r545 r546 r547 r548 r549 r550 r551 into r552 as Player;
    rand.chacha into r553 as u8;
    gt r526.attack r553 into r554;
    rand.chacha into r555 as u8;
    lt r538.defense r555 into r556;
    rand.chacha into r557 as u8;
    lt r552.goalkeeping r557 into r558;
    lt r513.speed r514.speed into r559;
    add r511 1u64 into r560;
    add r512 1u64 into r561;
    ternary r559 r560 r511 into r562;
    ternary r559 r512 r561 into r563;
    ternary r558 r562 r511 into r564;
    ternary r558 r563 r512 into r565;
    ternary r556 r564 r511 into r566;
    ternary r556 r565 r512 into r567;
    ternary r554 r566 r511 into r568;
    ternary r554 r567 r512 into r569;
    get players[r1[8u32]] into r570;
    get players[r2[8u32]] into r571;
    gt r570.speed r571.speed into r572;
    ternary r572 r570.player_id r571.player_id into r573;
    ternary r572 r570.team_id r571.team_id into r574;
    ternary r572 r570.position r571.position into r575;
    ternary r572 r570.attack r571.attack into r576;
    ternary r572 r570.defense r571.defense into r577;
    ternary r572 r570.speed r571.speed into r578;
    ternary r572 r570.power r571.power into r579;
    ternary r572 r570.stamina r571.stamina into r580;
    ternary r572 r570.technique r571.technique into r581;
    ternary r572 r570.goalkeeping r571.goalkeeping into r582;
    cast r573 r574 r575 r576 r577 r578 r579 r580 r581 r582 into r583 as Player;
    gt r570.speed r571.speed into r584;
    ternary r584 r571.player_id r570.player_id into r585;
    ternary r584 r571.team_id r570.team_id into r586;
    ternary r584 r571.position r570.position into r587;
    ternary r584 r571.attack r570.attack into r588;
    ternary r584 r571.defense r570.defense into r589;
    ternary r584 r571.speed r570.speed into r590;
    ternary r584 r571.power r570.power into r591;
    ternary r584 r571.stamina r570.stamina into r592;
    ternary r584 r571.technique r570.technique into r593;
    ternary r584 r571.goalkeeping r570.goalkeeping into r594;
    cast r585 r586 r587 r588 r589 r590 r591 r592 r593 r594 into r595 as Player;
    gt r570.speed r571.speed into r596;
    get players[r2[0u32]] into r597;
    get players[r1[0u32]] into r598;
    ternary r596 r597.player_id r598.player_id into r599;
    ternary r596 r597.team_id r598.team_id into r600;
    ternary r596 r597.position r598.position into r601;
    ternary r596 r597.attack r598.attack into r602;
    ternary r596 r597.defense r598.defense into r603;
    ternary r596 r597.speed r598.speed into r604;
    ternary r596 r597.power r598.power into r605;
    ternary r596 r597.stamina r598.stamina into r606;
    ternary r596 r597.technique r598.technique into r607;
    ternary r596 r597.goalkeeping r598.goalkeeping into r608;
    cast r599 r600 r601 r602 r603 r604 r605 r606 r607 r608 into r609 as Player;
    rand.chacha into r610 as u8;
    gt r583.attack r610 into r611;
    rand.chacha into r612 as u8;
    lt r595.defense r612 into r613;
    rand.chacha into r614 as u8;
    lt r609.goalkeeping r614 into r615;
    lt r570.speed r571.speed into r616;
    add r568 1u64 into r617;
    add r569 1u64 into r618;
    ternary r616 r617 r568 into r619;
    ternary r616 r569 r618 into r620;
    ternary r615 r619 r568 into r621;
    ternary r615 r620 r569 into r622;
    ternary r613 r621 r568 into r623;
    ternary r613 r622 r569 into r624;
    ternary r611 r623 r568 into r625;
    ternary r611 r624 r569 into r626;
    get players[r1[9u32]] into r627;
    get players[r2[9u32]] into r628;
    gt r627.speed r628.speed into r629;
    ternary r629 r627.player_id r628.player_id into r630;
    ternary r629 r627.team_id r628.team_id into r631;
    ternary r629 r627.position r628.position into r632;
    ternary r629 r627.attack r628.attack into r633;
    ternary r629 r627.defense r628.defense into r634;
    ternary r629 r627.speed r628.speed into r635;
    ternary r629 r627.power r628.power into r636;
    ternary r629 r627.stamina r628.stamina into r637;
    ternary r629 r627.technique r628.technique into r638;
    ternary r629 r627.goalkeeping r628.goalkeeping into r639;
    cast r630 r631 r632 r633 r634 r635 r636 r637 r638 r639 into r640 as Player;
    gt r627.speed r628.speed into r641;
    ternary r641 r628.player_id r627.player_id into r642;
    ternary r641 r628.team_id r627.team_id into r643;
    ternary r641 r628.position r627.position into r644;
    ternary r641 r628.attack r627.attack into r645;
    ternary r641 r628.defense r627.defense into r646;
    ternary r641 r628.speed r627.speed into r647;
    ternary r641 r628.power r627.power into r648;
    ternary r641 r628.stamina r627.stamina into r649;
    ternary r641 r628.technique r627.technique into r650;
    ternary r641 r628.goalkeeping r627.goalkeeping into r651;
    cast r642 r643 r644 r645 r646 r647 r648 r649 r650 r651 into r652 as Player;
    gt r627.speed r628.speed into r653;
    get players[r2[0u32]] into r654;
    get players[r1[0u32]] into r655;
    ternary r653 r654.player_id r655.player_id into r656;
    ternary r653 r654.team_id r655.team_id into r657;
    ternary r653 r654.position r655.position into r658;
    ternary r653 r654.attack r655.attack into r659;
    ternary r653 r654.defense r655.defense into r660;
    ternary r653 r654.speed r655.speed into r661;
    ternary r653 r654.power r655.power into r662;
    ternary r653 r654.stamina r655.stamina into r663;
    ternary r653 r654.technique r655.technique into r664;
    ternary r653 r654.goalkeeping r655.goalkeeping into r665;
    cast r656 r657 r658 r659 r660 r661 r662 r663 r664 r665 into r666 as Player;
    rand.chacha into r667 as u8;
    gt r640.attack r667 into r668;
    rand.chacha into r669 as u8;
    lt r652.defense r669 into r670;
    rand.chacha into r671 as u8;
    lt r666.goalkeeping r671 into r672;
    lt r627.speed r628.speed into r673;
    add r625 1u64 into r674;
    add r626 1u64 into r675;
    ternary r673 r674 r625 into r676;
    ternary r673 r626 r675 into r677;
    ternary r672 r676 r625 into r678;
    ternary r672 r677 r626 into r679;
    ternary r670 r678 r625 into r680;
    ternary r670 r679 r626 into r681;
    ternary r668 r680 r625 into r682;
    ternary r668 r681 r626 into r683;
    get players[r1[10u32]] into r684;
    get players[r2[10u32]] into r685;
    gt r684.speed r685.speed into r686;
    ternary r686 r684.player_id r685.player_id into r687;
    ternary r686 r684.team_id r685.team_id into r688;
    ternary r686 r684.position r685.position into r689;
    ternary r686 r684.attack r685.attack into r690;
    ternary r686 r684.defense r685.defense into r691;
    ternary r686 r684.speed r685.speed into r692;
    ternary r686 r684.power r685.power into r693;
    ternary r686 r684.stamina r685.stamina into r694;
    ternary r686 r684.technique r685.technique into r695;
    ternary r686 r684.goalkeeping r685.goalkeeping into r696;
    cast r687 r688 r689 r690 r691 r692 r693 r694 r695 r696 into r697 as Player;
    gt r684.speed r685.speed into r698;
    ternary r698 r685.player_id r684.player_id into r699;
    ternary r698 r685.team_id r684.team_id into r700;
    ternary r698 r685.position r684.position into r701;
    ternary r698 r685.attack r684.attack into r702;
    ternary r698 r685.defense r684.defense into r703;
    ternary r698 r685.speed r684.speed into r704;
    ternary r698 r685.power r684.power into r705;
    ternary r698 r685.stamina r684.stamina into r706;
    ternary r698 r685.technique r684.technique into r707;
    ternary r698 r685.goalkeeping r684.goalkeeping into r708;
    cast r699 r700 r701 r702 r703 r704 r705 r706 r707 r708 into r709 as Player;
    gt r684.speed r685.speed into r710;
    get players[r2[0u32]] into r711;
    get players[r1[0u32]] into r712;
    ternary r710 r711.player_id r712.player_id into r713;
    ternary r710 r711.team_id r712.team_id into r714;
    ternary r710 r711.position r712.position into r715;
    ternary r710 r711.attack r712.attack into r716;
    ternary r710 r711.defense r712.defense into r717;
    ternary r710 r711.speed r712.speed into r718;
    ternary r710 r711.power r712.power into r719;
    ternary r710 r711.stamina r712.stamina into r720;
    ternary r710 r711.technique r712.technique into r721;
    ternary r710 r711.goalkeeping r712.goalkeeping into r722;
    cast r713 r714 r715 r716 r717 r718 r719 r720 r721 r722 into r723 as Player;
    rand.chacha into r724 as u8;
    gt r697.attack r724 into r725;
    rand.chacha into r726 as u8;
    lt r709.defense r726 into r727;
    rand.chacha into r728 as u8;
    lt r723.goalkeeping r728 into r729;
    lt r684.speed r685.speed into r730;
    add r682 1u64 into r731;
    add r683 1u64 into r732;
    ternary r730 r731 r682 into r733;
    ternary r730 r683 r732 into r734;
    ternary r729 r733 r682 into r735;
    ternary r729 r734 r683 into r736;
    ternary r727 r735 r682 into r737;
    ternary r727 r736 r683 into r738;
    ternary r725 r737 r682 into r739;
    ternary r725 r738 r683 into r740;
    lt r684.speed r685.speed into r741;
    add r739 1u64 into r742;
    add r740 1u64 into r743;
    ternary r741 r742 r739 into r744;
    ternary r741 r740 r743 into r745;
    ternary r168 r684.player_id r3.player_id into r746;
    ternary r168 r684.team_id r3.team_id into r747;
    ternary r168 r684.position r3.position into r748;
    ternary r168 r684.attack r3.attack into r749;
    ternary r168 r684.defense r3.defense into r750;
    ternary r168 r684.speed r3.speed into r751;
    ternary r168 r684.power r3.power into r752;
    ternary r168 r684.stamina r3.stamina into r753;
    ternary r168 r684.technique r3.technique into r754;
    ternary r168 r684.goalkeeping r3.goalkeeping into r755;
    cast r746 r747 r748 r749 r750 r751 r752 r753 r754 r755 into r756 as Player;
    ternary r168 r685.player_id r4.player_id into r757;
    ternary r168 r685.team_id r4.team_id into r758;
    ternary r168 r685.position r4.position into r759;
    ternary r168 r685.attack r4.attack into r760;
    ternary r168 r685.defense r4.defense into r761;
    ternary r168 r685.speed r4.speed into r762;
    ternary r168 r685.power r4.power into r763;
    ternary r168 r685.stamina r4.stamina into r764;
    ternary r168 r685.technique r4.technique into r765;
    ternary r168 r685.goalkeeping r4.goalkeeping into r766;
    cast r757 r758 r759 r760 r761 r762 r763 r764 r765 r766 into r767 as Player;
    ternary r168 r744 r170 into r768;
    ternary r168 r745 r169 into r769;
    cast r769 r768 into r770 as GameOutcome;
    set r770 into game_outcomes[r0];

function reveal_answer_game:
    input r0 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    input r1 as RevealAnswerNotification.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceState.record;
    input r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    input r4 as GameOutcome.private;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    is.eq r1.opponent_answer r3.answer into r5;
    ternary r5 r3.opponent_address r3.challenger_address into r6;
    is.eq r6 r3.challenger_address into r7;
    ternary r7 r3.opponent_address r3.challenger_address into r8;
    call multiparty_pvp_utils_v015_avh.aleo/reveal_answer r3 r0.sig into r9 r10;
    call puzzle_pieces_v016.aleo/joint_stake_state_update r2 r0 r6 into r11 r12;
    cast r3.opponent_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer 9u32 into r13 as GameFinishReqNotification.record;
    cast r3.challenger_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer 9u32 into r14 as GameFinishReqNotification.record;
    async reveal_answer_game r1.game_uuid r4 into r15;
    output r9 as multiparty_pvp_utils_v015_avh.aleo/RevealAnswer.record;
    output r10 as multiparty_pvp_utils_v015_avh.aleo/AuditRevealAnswer.record;
    output r11 as puzzle_pieces_v016.aleo/JointPieceWinner.record;
    output r12 as puzzle_pieces_v016.aleo/AuditJointPieceWinner.record;
    output r13 as GameFinishReqNotification.record;
    output r14 as GameFinishReqNotification.record;
    output r15 as football_game_v008.aleo/reveal_answer_game.future;

finalize reveal_answer_game:
    input r0 as field.public;
    input r1 as GameOutcome.public;
    get game_outcomes[r0] into r2;
    assert.eq r1.goals_home r2.goals_home ;
    assert.eq r1.goals_away r2.goals_away ;

function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v016.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    input r4 as GameOutcome.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    gt r4.goals_home r4.goals_away into r5;
    ternary r5 r0.challenger_address r0.opponent_address into r6;
    gt r4.goals_home r4.goals_away into r7;
    ternary r7 r0.opponent_address r0.challenger_address into r8;
    call puzzle_pieces_v016.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r9 r10 r11;
    cast r0.owner r0.uuid r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r12 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r8 10u32 into r13 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r8 10u32 into r14 as GameFinishedNotification.record;
    call football_leaderboard_v003.aleo/update_leaderboard r0.challenger_address r0.opponent_address r4.goals_home r4.goals_home into r15;
    async finish_game r15 r0.uuid r0.challenger_address r0.opponent_address r4 into r16;
    output r9 as puzzle_pieces_v016.aleo/Piece.record;
    output r10 as puzzle_pieces_v016.aleo/AuditTransferToWinner.record;
    output r11 as puzzle_pieces_v016.aleo/AuditPieceOwner.record;
    output r12 as Game.record;
    output r13 as GameFinishedNotification.record;
    output r14 as GameFinishedNotification.record;
    output r16 as football_game_v008.aleo/finish_game.future;

finalize finish_game:
    input r0 as football_leaderboard_v003.aleo/update_leaderboard.future;
    input r1 as field.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as GameOutcome.public;
    await r0;
    get game_outcomes[r1] into r5;
    assert.eq r4.goals_home r5.goals_home ;
    assert.eq r4.goals_away r5.goals_away ;

function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    cast r0.owner r0.uuid r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r5 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r6 as GameFinishedNotification.record;
    call puzzle_pieces_v016.aleo/joint_timeout_to_opponent r1 r2 r3 into r7 r8;
    async finish_game_by_timeout r2.block_ht into r9;
    output r7 as puzzle_pieces_v016.aleo/Piece.record;
    output r8 as puzzle_pieces_v016.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r5 as GameFinishedNotification.record;
    output r6 as GameFinishedNotification.record;
    output r9 as football_game_v008.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true ;
