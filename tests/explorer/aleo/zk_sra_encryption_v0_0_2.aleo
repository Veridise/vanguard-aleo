program zk_sra_encryption_v0_0_2.aleo;

closure exp_by_squaring:
    input r0 as field;
    input r1 as field;
    input r2 as u128;
    cast r1 into r3 as u128;
    rem r3 2u128 into r4;
    is.eq r4 1u128 into r5;
    mul 1field r0 into r6;
    cast r6 into r7 as u128;
    rem r7 r2 into r8;
    cast r8 into r9 as field;
    ternary r5 r9 1field into r10;
    mul r0 r0 into r11;
    cast r11 into r12 as u128;
    rem r12 r2 into r13;
    cast r13 into r14 as field;
    cast r1 into r15 as u128;
    shr r15 1u8 into r16;
    cast r16 into r17 as field;
    cast r17 into r18 as u128;
    rem r18 2u128 into r19;
    is.eq r19 1u128 into r20;
    mul r10 r14 into r21;
    cast r21 into r22 as u128;
    rem r22 r2 into r23;
    cast r23 into r24 as field;
    ternary r20 r24 r10 into r25;
    mul r14 r14 into r26;
    cast r26 into r27 as u128;
    rem r27 r2 into r28;
    cast r28 into r29 as field;
    cast r17 into r30 as u128;
    shr r30 1u8 into r31;
    cast r31 into r32 as field;
    cast r32 into r33 as u128;
    rem r33 2u128 into r34;
    is.eq r34 1u128 into r35;
    mul r25 r29 into r36;
    cast r36 into r37 as u128;
    rem r37 r2 into r38;
    cast r38 into r39 as field;
    ternary r35 r39 r25 into r40;
    mul r29 r29 into r41;
    cast r41 into r42 as u128;
    rem r42 r2 into r43;
    cast r43 into r44 as field;
    cast r32 into r45 as u128;
    shr r45 1u8 into r46;
    cast r46 into r47 as field;
    cast r47 into r48 as u128;
    rem r48 2u128 into r49;
    is.eq r49 1u128 into r50;
    mul r40 r44 into r51;
    cast r51 into r52 as u128;
    rem r52 r2 into r53;
    cast r53 into r54 as field;
    ternary r50 r54 r40 into r55;
    mul r44 r44 into r56;
    cast r56 into r57 as u128;
    rem r57 r2 into r58;
    cast r58 into r59 as field;
    cast r47 into r60 as u128;
    shr r60 1u8 into r61;
    cast r61 into r62 as field;
    cast r62 into r63 as u128;
    rem r63 2u128 into r64;
    is.eq r64 1u128 into r65;
    mul r55 r59 into r66;
    cast r66 into r67 as u128;
    rem r67 r2 into r68;
    cast r68 into r69 as field;
    ternary r65 r69 r55 into r70;
    mul r59 r59 into r71;
    cast r71 into r72 as u128;
    rem r72 r2 into r73;
    cast r73 into r74 as field;
    cast r62 into r75 as u128;
    shr r75 1u8 into r76;
    cast r76 into r77 as field;
    cast r77 into r78 as u128;
    rem r78 2u128 into r79;
    is.eq r79 1u128 into r80;
    mul r70 r74 into r81;
    cast r81 into r82 as u128;
    rem r82 r2 into r83;
    cast r83 into r84 as field;
    ternary r80 r84 r70 into r85;
    mul r74 r74 into r86;
    cast r86 into r87 as u128;
    rem r87 r2 into r88;
    cast r88 into r89 as field;
    cast r77 into r90 as u128;
    shr r90 1u8 into r91;
    cast r91 into r92 as field;
    cast r92 into r93 as u128;
    rem r93 2u128 into r94;
    is.eq r94 1u128 into r95;
    mul r85 r89 into r96;
    cast r96 into r97 as u128;
    rem r97 r2 into r98;
    cast r98 into r99 as field;
    ternary r95 r99 r85 into r100;
    mul r89 r89 into r101;
    cast r101 into r102 as u128;
    rem r102 r2 into r103;
    cast r103 into r104 as field;
    cast r92 into r105 as u128;
    shr r105 1u8 into r106;
    cast r106 into r107 as field;
    cast r107 into r108 as u128;
    rem r108 2u128 into r109;
    is.eq r109 1u128 into r110;
    mul r100 r104 into r111;
    cast r111 into r112 as u128;
    rem r112 r2 into r113;
    cast r113 into r114 as field;
    ternary r110 r114 r100 into r115;
    mul r104 r104 into r116;
    cast r116 into r117 as u128;
    rem r117 r2 into r118;
    cast r118 into r119 as field;
    cast r107 into r120 as u128;
    shr r120 1u8 into r121;
    cast r121 into r122 as field;
    cast r122 into r123 as u128;
    rem r123 2u128 into r124;
    is.eq r124 1u128 into r125;
    mul r115 r119 into r126;
    cast r126 into r127 as u128;
    rem r127 r2 into r128;
    cast r128 into r129 as field;
    ternary r125 r129 r115 into r130;
    mul r119 r119 into r131;
    cast r131 into r132 as u128;
    rem r132 r2 into r133;
    cast r133 into r134 as field;
    cast r122 into r135 as u128;
    shr r135 1u8 into r136;
    cast r136 into r137 as field;
    cast r137 into r138 as u128;
    rem r138 2u128 into r139;
    is.eq r139 1u128 into r140;
    mul r130 r134 into r141;
    cast r141 into r142 as u128;
    rem r142 r2 into r143;
    cast r143 into r144 as field;
    ternary r140 r144 r130 into r145;
    mul r134 r134 into r146;
    cast r146 into r147 as u128;
    rem r147 r2 into r148;
    cast r148 into r149 as field;
    cast r137 into r150 as u128;
    shr r150 1u8 into r151;
    cast r151 into r152 as field;
    cast r152 into r153 as u128;
    rem r153 2u128 into r154;
    is.eq r154 1u128 into r155;
    mul r145 r149 into r156;
    cast r156 into r157 as u128;
    rem r157 r2 into r158;
    cast r158 into r159 as field;
    ternary r155 r159 r145 into r160;
    mul r149 r149 into r161;
    cast r161 into r162 as u128;
    rem r162 r2 into r163;
    cast r163 into r164 as field;
    cast r152 into r165 as u128;
    shr r165 1u8 into r166;
    cast r166 into r167 as field;
    cast r167 into r168 as u128;
    rem r168 2u128 into r169;
    is.eq r169 1u128 into r170;
    mul r160 r164 into r171;
    cast r171 into r172 as u128;
    rem r172 r2 into r173;
    cast r173 into r174 as field;
    ternary r170 r174 r160 into r175;
    mul r164 r164 into r176;
    cast r176 into r177 as u128;
    rem r177 r2 into r178;
    cast r178 into r179 as field;
    cast r167 into r180 as u128;
    shr r180 1u8 into r181;
    cast r181 into r182 as field;
    cast r182 into r183 as u128;
    rem r183 2u128 into r184;
    is.eq r184 1u128 into r185;
    mul r175 r179 into r186;
    cast r186 into r187 as u128;
    rem r187 r2 into r188;
    cast r188 into r189 as field;
    ternary r185 r189 r175 into r190;
    mul r179 r179 into r191;
    cast r191 into r192 as u128;
    rem r192 r2 into r193;
    cast r193 into r194 as field;
    cast r182 into r195 as u128;
    shr r195 1u8 into r196;
    cast r196 into r197 as field;
    cast r197 into r198 as u128;
    rem r198 2u128 into r199;
    is.eq r199 1u128 into r200;
    mul r190 r194 into r201;
    cast r201 into r202 as u128;
    rem r202 r2 into r203;
    cast r203 into r204 as field;
    ternary r200 r204 r190 into r205;
    mul r194 r194 into r206;
    cast r206 into r207 as u128;
    rem r207 r2 into r208;
    cast r208 into r209 as field;
    cast r197 into r210 as u128;
    shr r210 1u8 into r211;
    cast r211 into r212 as field;
    cast r212 into r213 as u128;
    rem r213 2u128 into r214;
    is.eq r214 1u128 into r215;
    mul r205 r209 into r216;
    cast r216 into r217 as u128;
    rem r217 r2 into r218;
    cast r218 into r219 as field;
    ternary r215 r219 r205 into r220;
    mul r209 r209 into r221;
    cast r221 into r222 as u128;
    rem r222 r2 into r223;
    cast r223 into r224 as field;
    cast r212 into r225 as u128;
    shr r225 1u8 into r226;
    cast r226 into r227 as field;
    cast r227 into r228 as u128;
    rem r228 2u128 into r229;
    is.eq r229 1u128 into r230;
    mul r220 r224 into r231;
    cast r231 into r232 as u128;
    rem r232 r2 into r233;
    cast r233 into r234 as field;
    ternary r230 r234 r220 into r235;
    mul r224 r224 into r236;
    cast r236 into r237 as u128;
    rem r237 r2 into r238;
    cast r238 into r239 as field;
    cast r227 into r240 as u128;
    shr r240 1u8 into r241;
    cast r241 into r242 as field;
    cast r242 into r243 as u128;
    rem r243 2u128 into r244;
    is.eq r244 1u128 into r245;
    mul r235 r239 into r246;
    cast r246 into r247 as u128;
    rem r247 r2 into r248;
    cast r248 into r249 as field;
    ternary r245 r249 r235 into r250;
    mul r239 r239 into r251;
    cast r251 into r252 as u128;
    rem r252 r2 into r253;
    cast r253 into r254 as field;
    cast r242 into r255 as u128;
    shr r255 1u8 into r256;
    cast r256 into r257 as field;
    cast r257 into r258 as u128;
    rem r258 2u128 into r259;
    is.eq r259 1u128 into r260;
    mul r250 r254 into r261;
    cast r261 into r262 as u128;
    rem r262 r2 into r263;
    cast r263 into r264 as field;
    ternary r260 r264 r250 into r265;
    mul r254 r254 into r266;
    cast r266 into r267 as u128;
    rem r267 r2 into r268;
    cast r268 into r269 as field;
    cast r257 into r270 as u128;
    shr r270 1u8 into r271;
    cast r271 into r272 as field;
    cast r272 into r273 as u128;
    rem r273 2u128 into r274;
    is.eq r274 1u128 into r275;
    mul r265 r269 into r276;
    cast r276 into r277 as u128;
    rem r277 r2 into r278;
    cast r278 into r279 as field;
    ternary r275 r279 r265 into r280;
    mul r269 r269 into r281;
    cast r281 into r282 as u128;
    rem r282 r2 into r283;
    cast r283 into r284 as field;
    cast r272 into r285 as u128;
    shr r285 1u8 into r286;
    cast r286 into r287 as field;
    cast r287 into r288 as u128;
    rem r288 2u128 into r289;
    is.eq r289 1u128 into r290;
    mul r280 r284 into r291;
    cast r291 into r292 as u128;
    rem r292 r2 into r293;
    cast r293 into r294 as field;
    ternary r290 r294 r280 into r295;
    mul r284 r284 into r296;
    cast r296 into r297 as u128;
    rem r297 r2 into r298;
    cast r298 into r299 as field;
    cast r287 into r300 as u128;
    shr r300 1u8 into r301;
    cast r301 into r302 as field;
    cast r302 into r303 as u128;
    rem r303 2u128 into r304;
    is.eq r304 1u128 into r305;
    mul r295 r299 into r306;
    cast r306 into r307 as u128;
    rem r307 r2 into r308;
    cast r308 into r309 as field;
    ternary r305 r309 r295 into r310;
    mul r299 r299 into r311;
    cast r311 into r312 as u128;
    rem r312 r2 into r313;
    cast r313 into r314 as field;
    cast r302 into r315 as u128;
    shr r315 1u8 into r316;
    cast r316 into r317 as field;
    cast r317 into r318 as u128;
    rem r318 2u128 into r319;
    is.eq r319 1u128 into r320;
    mul r310 r314 into r321;
    cast r321 into r322 as u128;
    rem r322 r2 into r323;
    cast r323 into r324 as field;
    ternary r320 r324 r310 into r325;
    mul r314 r314 into r326;
    cast r326 into r327 as u128;
    rem r327 r2 into r328;
    cast r328 into r329 as field;
    cast r317 into r330 as u128;
    shr r330 1u8 into r331;
    cast r331 into r332 as field;
    cast r332 into r333 as u128;
    rem r333 2u128 into r334;
    is.eq r334 1u128 into r335;
    mul r325 r329 into r336;
    cast r336 into r337 as u128;
    rem r337 r2 into r338;
    cast r338 into r339 as field;
    ternary r335 r339 r325 into r340;
    mul r329 r329 into r341;
    cast r341 into r342 as u128;
    rem r342 r2 into r343;
    cast r343 into r344 as field;
    cast r332 into r345 as u128;
    shr r345 1u8 into r346;
    cast r346 into r347 as field;
    cast r347 into r348 as u128;
    rem r348 2u128 into r349;
    is.eq r349 1u128 into r350;
    mul r340 r344 into r351;
    cast r351 into r352 as u128;
    rem r352 r2 into r353;
    cast r353 into r354 as field;
    ternary r350 r354 r340 into r355;
    mul r344 r344 into r356;
    cast r356 into r357 as u128;
    rem r357 r2 into r358;
    cast r358 into r359 as field;
    cast r347 into r360 as u128;
    shr r360 1u8 into r361;
    cast r361 into r362 as field;
    cast r362 into r363 as u128;
    rem r363 2u128 into r364;
    is.eq r364 1u128 into r365;
    mul r355 r359 into r366;
    cast r366 into r367 as u128;
    rem r367 r2 into r368;
    cast r368 into r369 as field;
    ternary r365 r369 r355 into r370;
    mul r359 r359 into r371;
    cast r371 into r372 as u128;
    rem r372 r2 into r373;
    cast r373 into r374 as field;
    cast r362 into r375 as u128;
    shr r375 1u8 into r376;
    cast r376 into r377 as field;
    cast r377 into r378 as u128;
    rem r378 2u128 into r379;
    is.eq r379 1u128 into r380;
    mul r370 r374 into r381;
    cast r381 into r382 as u128;
    rem r382 r2 into r383;
    cast r383 into r384 as field;
    ternary r380 r384 r370 into r385;
    mul r374 r374 into r386;
    cast r386 into r387 as u128;
    rem r387 r2 into r388;
    cast r388 into r389 as field;
    cast r377 into r390 as u128;
    shr r390 1u8 into r391;
    cast r391 into r392 as field;
    cast r392 into r393 as u128;
    rem r393 2u128 into r394;
    is.eq r394 1u128 into r395;
    mul r385 r389 into r396;
    cast r396 into r397 as u128;
    rem r397 r2 into r398;
    cast r398 into r399 as field;
    ternary r395 r399 r385 into r400;
    mul r389 r389 into r401;
    cast r401 into r402 as u128;
    rem r402 r2 into r403;
    cast r403 into r404 as field;
    cast r392 into r405 as u128;
    shr r405 1u8 into r406;
    cast r406 into r407 as field;
    cast r407 into r408 as u128;
    rem r408 2u128 into r409;
    is.eq r409 1u128 into r410;
    mul r400 r404 into r411;
    cast r411 into r412 as u128;
    rem r412 r2 into r413;
    cast r413 into r414 as field;
    ternary r410 r414 r400 into r415;
    mul r404 r404 into r416;
    cast r416 into r417 as u128;
    rem r417 r2 into r418;
    cast r418 into r419 as field;
    cast r407 into r420 as u128;
    shr r420 1u8 into r421;
    cast r421 into r422 as field;
    cast r422 into r423 as u128;
    rem r423 2u128 into r424;
    is.eq r424 1u128 into r425;
    mul r415 r419 into r426;
    cast r426 into r427 as u128;
    rem r427 r2 into r428;
    cast r428 into r429 as field;
    ternary r425 r429 r415 into r430;
    mul r419 r419 into r431;
    cast r431 into r432 as u128;
    rem r432 r2 into r433;
    cast r433 into r434 as field;
    cast r422 into r435 as u128;
    shr r435 1u8 into r436;
    cast r436 into r437 as field;
    cast r437 into r438 as u128;
    rem r438 2u128 into r439;
    is.eq r439 1u128 into r440;
    mul r430 r434 into r441;
    cast r441 into r442 as u128;
    rem r442 r2 into r443;
    cast r443 into r444 as field;
    ternary r440 r444 r430 into r445;
    mul r434 r434 into r446;
    cast r446 into r447 as u128;
    rem r447 r2 into r448;
    cast r448 into r449 as field;
    cast r437 into r450 as u128;
    shr r450 1u8 into r451;
    cast r451 into r452 as field;
    cast r452 into r453 as u128;
    rem r453 2u128 into r454;
    is.eq r454 1u128 into r455;
    mul r445 r449 into r456;
    cast r456 into r457 as u128;
    rem r457 r2 into r458;
    cast r458 into r459 as field;
    ternary r455 r459 r445 into r460;
    mul r449 r449 into r461;
    cast r461 into r462 as u128;
    rem r462 r2 into r463;
    cast r463 into r464 as field;
    cast r452 into r465 as u128;
    shr r465 1u8 into r466;
    cast r466 into r467 as field;
    cast r467 into r468 as u128;
    rem r468 2u128 into r469;
    is.eq r469 1u128 into r470;
    mul r460 r464 into r471;
    cast r471 into r472 as u128;
    rem r472 r2 into r473;
    cast r473 into r474 as field;
    ternary r470 r474 r460 into r475;
    mul r464 r464 into r476;
    cast r476 into r477 as u128;
    rem r477 r2 into r478;
    cast r478 into r479 as field;
    cast r467 into r480 as u128;
    shr r480 1u8 into r481;
    cast r481 into r482 as field;
    cast r475 into r483 as field;
    output r483 as field;

function sra_encrypt:
    input r0 as field.private;
    input r1 as field.private;
    input r2 as u128.private;
    call exp_by_squaring r0 r1 r2 into r3;
    output r3 as field.private;

function sra_decrypt:
    input r0 as field.private;
    input r1 as field.private;
    input r2 as u128.private;
    call exp_by_squaring r0 r1 r2 into r3;
    output r3 as field.private;

function encrypt_deck:
    input r0 as field.private;
    input r1 as u128.private;
    input r2 as [[field; 26u32]; 2u32].private;
    call exp_by_squaring r2[0u32][0u32] r0 r1 into r3;
    call exp_by_squaring r2[0u32][1u32] r0 r1 into r4;
    call exp_by_squaring r2[0u32][2u32] r0 r1 into r5;
    call exp_by_squaring r2[0u32][3u32] r0 r1 into r6;
    call exp_by_squaring r2[0u32][4u32] r0 r1 into r7;
    call exp_by_squaring r2[0u32][5u32] r0 r1 into r8;
    call exp_by_squaring r2[0u32][6u32] r0 r1 into r9;
    call exp_by_squaring r2[0u32][7u32] r0 r1 into r10;
    call exp_by_squaring r2[0u32][8u32] r0 r1 into r11;
    call exp_by_squaring r2[0u32][9u32] r0 r1 into r12;
    call exp_by_squaring r2[0u32][10u32] r0 r1 into r13;
    call exp_by_squaring r2[0u32][11u32] r0 r1 into r14;
    call exp_by_squaring r2[0u32][12u32] r0 r1 into r15;
    call exp_by_squaring r2[0u32][13u32] r0 r1 into r16;
    call exp_by_squaring r2[0u32][14u32] r0 r1 into r17;
    call exp_by_squaring r2[0u32][15u32] r0 r1 into r18;
    call exp_by_squaring r2[0u32][16u32] r0 r1 into r19;
    call exp_by_squaring r2[0u32][17u32] r0 r1 into r20;
    call exp_by_squaring r2[0u32][18u32] r0 r1 into r21;
    call exp_by_squaring r2[0u32][19u32] r0 r1 into r22;
    call exp_by_squaring r2[0u32][20u32] r0 r1 into r23;
    call exp_by_squaring r2[0u32][21u32] r0 r1 into r24;
    call exp_by_squaring r2[0u32][22u32] r0 r1 into r25;
    call exp_by_squaring r2[0u32][23u32] r0 r1 into r26;
    call exp_by_squaring r2[0u32][24u32] r0 r1 into r27;
    call exp_by_squaring r2[0u32][25u32] r0 r1 into r28;
    call exp_by_squaring r2[1u32][0u32] r0 r1 into r29;
    call exp_by_squaring r2[1u32][1u32] r0 r1 into r30;
    call exp_by_squaring r2[1u32][2u32] r0 r1 into r31;
    call exp_by_squaring r2[1u32][3u32] r0 r1 into r32;
    call exp_by_squaring r2[1u32][4u32] r0 r1 into r33;
    call exp_by_squaring r2[1u32][5u32] r0 r1 into r34;
    call exp_by_squaring r2[1u32][6u32] r0 r1 into r35;
    call exp_by_squaring r2[1u32][7u32] r0 r1 into r36;
    call exp_by_squaring r2[1u32][8u32] r0 r1 into r37;
    call exp_by_squaring r2[1u32][9u32] r0 r1 into r38;
    call exp_by_squaring r2[1u32][10u32] r0 r1 into r39;
    call exp_by_squaring r2[1u32][11u32] r0 r1 into r40;
    call exp_by_squaring r2[1u32][12u32] r0 r1 into r41;
    call exp_by_squaring r2[1u32][13u32] r0 r1 into r42;
    call exp_by_squaring r2[1u32][14u32] r0 r1 into r43;
    call exp_by_squaring r2[1u32][15u32] r0 r1 into r44;
    call exp_by_squaring r2[1u32][16u32] r0 r1 into r45;
    call exp_by_squaring r2[1u32][17u32] r0 r1 into r46;
    call exp_by_squaring r2[1u32][18u32] r0 r1 into r47;
    call exp_by_squaring r2[1u32][19u32] r0 r1 into r48;
    call exp_by_squaring r2[1u32][20u32] r0 r1 into r49;
    call exp_by_squaring r2[1u32][21u32] r0 r1 into r50;
    call exp_by_squaring r2[1u32][22u32] r0 r1 into r51;
    call exp_by_squaring r2[1u32][23u32] r0 r1 into r52;
    call exp_by_squaring r2[1u32][24u32] r0 r1 into r53;
    call exp_by_squaring r2[1u32][25u32] r0 r1 into r54;
    cast r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 into r55 as [field; 26u32];
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 into r56 as [field; 26u32];
    cast r55 r56 into r57 as [[field; 26u32]; 2u32];
    output r57 as [[field; 26u32]; 2u32].private;

function decrypt_deck:
    input r0 as field.private;
    input r1 as u128.private;
    input r2 as [[field; 26u32]; 2u32].private;
    call exp_by_squaring r2[0u32][0u32] r0 r1 into r3;
    call exp_by_squaring r2[0u32][1u32] r0 r1 into r4;
    call exp_by_squaring r2[0u32][2u32] r0 r1 into r5;
    call exp_by_squaring r2[0u32][3u32] r0 r1 into r6;
    call exp_by_squaring r2[0u32][4u32] r0 r1 into r7;
    call exp_by_squaring r2[0u32][5u32] r0 r1 into r8;
    call exp_by_squaring r2[0u32][6u32] r0 r1 into r9;
    call exp_by_squaring r2[0u32][7u32] r0 r1 into r10;
    call exp_by_squaring r2[0u32][8u32] r0 r1 into r11;
    call exp_by_squaring r2[0u32][9u32] r0 r1 into r12;
    call exp_by_squaring r2[0u32][10u32] r0 r1 into r13;
    call exp_by_squaring r2[0u32][11u32] r0 r1 into r14;
    call exp_by_squaring r2[0u32][12u32] r0 r1 into r15;
    call exp_by_squaring r2[0u32][13u32] r0 r1 into r16;
    call exp_by_squaring r2[0u32][14u32] r0 r1 into r17;
    call exp_by_squaring r2[0u32][15u32] r0 r1 into r18;
    call exp_by_squaring r2[0u32][16u32] r0 r1 into r19;
    call exp_by_squaring r2[0u32][17u32] r0 r1 into r20;
    call exp_by_squaring r2[0u32][18u32] r0 r1 into r21;
    call exp_by_squaring r2[0u32][19u32] r0 r1 into r22;
    call exp_by_squaring r2[0u32][20u32] r0 r1 into r23;
    call exp_by_squaring r2[0u32][21u32] r0 r1 into r24;
    call exp_by_squaring r2[0u32][22u32] r0 r1 into r25;
    call exp_by_squaring r2[0u32][23u32] r0 r1 into r26;
    call exp_by_squaring r2[0u32][24u32] r0 r1 into r27;
    call exp_by_squaring r2[0u32][25u32] r0 r1 into r28;
    call exp_by_squaring r2[1u32][0u32] r0 r1 into r29;
    call exp_by_squaring r2[1u32][1u32] r0 r1 into r30;
    call exp_by_squaring r2[1u32][2u32] r0 r1 into r31;
    call exp_by_squaring r2[1u32][3u32] r0 r1 into r32;
    call exp_by_squaring r2[1u32][4u32] r0 r1 into r33;
    call exp_by_squaring r2[1u32][5u32] r0 r1 into r34;
    call exp_by_squaring r2[1u32][6u32] r0 r1 into r35;
    call exp_by_squaring r2[1u32][7u32] r0 r1 into r36;
    call exp_by_squaring r2[1u32][8u32] r0 r1 into r37;
    call exp_by_squaring r2[1u32][9u32] r0 r1 into r38;
    call exp_by_squaring r2[1u32][10u32] r0 r1 into r39;
    call exp_by_squaring r2[1u32][11u32] r0 r1 into r40;
    call exp_by_squaring r2[1u32][12u32] r0 r1 into r41;
    call exp_by_squaring r2[1u32][13u32] r0 r1 into r42;
    call exp_by_squaring r2[1u32][14u32] r0 r1 into r43;
    call exp_by_squaring r2[1u32][15u32] r0 r1 into r44;
    call exp_by_squaring r2[1u32][16u32] r0 r1 into r45;
    call exp_by_squaring r2[1u32][17u32] r0 r1 into r46;
    call exp_by_squaring r2[1u32][18u32] r0 r1 into r47;
    call exp_by_squaring r2[1u32][19u32] r0 r1 into r48;
    call exp_by_squaring r2[1u32][20u32] r0 r1 into r49;
    call exp_by_squaring r2[1u32][21u32] r0 r1 into r50;
    call exp_by_squaring r2[1u32][22u32] r0 r1 into r51;
    call exp_by_squaring r2[1u32][23u32] r0 r1 into r52;
    call exp_by_squaring r2[1u32][24u32] r0 r1 into r53;
    call exp_by_squaring r2[1u32][25u32] r0 r1 into r54;
    cast r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 into r55 as [field; 26u32];
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 into r56 as [field; 26u32];
    cast r55 r56 into r57 as [[field; 26u32]; 2u32];
    output r57 as [[field; 26u32]; 2u32].private;

function encrypt_deck_per_card:
    input r0 as [[field; 26u32]; 2u32].private;
    input r1 as u128.private;
    input r2 as [[field; 26u32]; 2u32].private;
    call exp_by_squaring r2[0u32][0u32] r0[0u32][0u32] r1 into r3;
    call exp_by_squaring r2[0u32][1u32] r0[0u32][1u32] r1 into r4;
    call exp_by_squaring r2[0u32][2u32] r0[0u32][2u32] r1 into r5;
    call exp_by_squaring r2[0u32][3u32] r0[0u32][3u32] r1 into r6;
    call exp_by_squaring r2[0u32][4u32] r0[0u32][4u32] r1 into r7;
    call exp_by_squaring r2[0u32][5u32] r0[0u32][5u32] r1 into r8;
    call exp_by_squaring r2[0u32][6u32] r0[0u32][6u32] r1 into r9;
    call exp_by_squaring r2[0u32][7u32] r0[0u32][7u32] r1 into r10;
    call exp_by_squaring r2[0u32][8u32] r0[0u32][8u32] r1 into r11;
    call exp_by_squaring r2[0u32][9u32] r0[0u32][9u32] r1 into r12;
    call exp_by_squaring r2[0u32][10u32] r0[0u32][10u32] r1 into r13;
    call exp_by_squaring r2[0u32][11u32] r0[0u32][11u32] r1 into r14;
    call exp_by_squaring r2[0u32][12u32] r0[0u32][12u32] r1 into r15;
    call exp_by_squaring r2[0u32][13u32] r0[0u32][13u32] r1 into r16;
    call exp_by_squaring r2[0u32][14u32] r0[0u32][14u32] r1 into r17;
    call exp_by_squaring r2[0u32][15u32] r0[0u32][15u32] r1 into r18;
    call exp_by_squaring r2[0u32][16u32] r0[0u32][16u32] r1 into r19;
    call exp_by_squaring r2[0u32][17u32] r0[0u32][17u32] r1 into r20;
    call exp_by_squaring r2[0u32][18u32] r0[0u32][18u32] r1 into r21;
    call exp_by_squaring r2[0u32][19u32] r0[0u32][19u32] r1 into r22;
    call exp_by_squaring r2[0u32][20u32] r0[0u32][20u32] r1 into r23;
    call exp_by_squaring r2[0u32][21u32] r0[0u32][21u32] r1 into r24;
    call exp_by_squaring r2[0u32][22u32] r0[0u32][22u32] r1 into r25;
    call exp_by_squaring r2[0u32][23u32] r0[0u32][23u32] r1 into r26;
    call exp_by_squaring r2[0u32][24u32] r0[0u32][24u32] r1 into r27;
    call exp_by_squaring r2[0u32][25u32] r0[0u32][25u32] r1 into r28;
    call exp_by_squaring r2[1u32][0u32] r0[1u32][0u32] r1 into r29;
    call exp_by_squaring r2[1u32][1u32] r0[1u32][1u32] r1 into r30;
    call exp_by_squaring r2[1u32][2u32] r0[1u32][2u32] r1 into r31;
    call exp_by_squaring r2[1u32][3u32] r0[1u32][3u32] r1 into r32;
    call exp_by_squaring r2[1u32][4u32] r0[1u32][4u32] r1 into r33;
    call exp_by_squaring r2[1u32][5u32] r0[1u32][5u32] r1 into r34;
    call exp_by_squaring r2[1u32][6u32] r0[1u32][6u32] r1 into r35;
    call exp_by_squaring r2[1u32][7u32] r0[1u32][7u32] r1 into r36;
    call exp_by_squaring r2[1u32][8u32] r0[1u32][8u32] r1 into r37;
    call exp_by_squaring r2[1u32][9u32] r0[1u32][9u32] r1 into r38;
    call exp_by_squaring r2[1u32][10u32] r0[1u32][10u32] r1 into r39;
    call exp_by_squaring r2[1u32][11u32] r0[1u32][11u32] r1 into r40;
    call exp_by_squaring r2[1u32][12u32] r0[1u32][12u32] r1 into r41;
    call exp_by_squaring r2[1u32][13u32] r0[1u32][13u32] r1 into r42;
    call exp_by_squaring r2[1u32][14u32] r0[1u32][14u32] r1 into r43;
    call exp_by_squaring r2[1u32][15u32] r0[1u32][15u32] r1 into r44;
    call exp_by_squaring r2[1u32][16u32] r0[1u32][16u32] r1 into r45;
    call exp_by_squaring r2[1u32][17u32] r0[1u32][17u32] r1 into r46;
    call exp_by_squaring r2[1u32][18u32] r0[1u32][18u32] r1 into r47;
    call exp_by_squaring r2[1u32][19u32] r0[1u32][19u32] r1 into r48;
    call exp_by_squaring r2[1u32][20u32] r0[1u32][20u32] r1 into r49;
    call exp_by_squaring r2[1u32][21u32] r0[1u32][21u32] r1 into r50;
    call exp_by_squaring r2[1u32][22u32] r0[1u32][22u32] r1 into r51;
    call exp_by_squaring r2[1u32][23u32] r0[1u32][23u32] r1 into r52;
    call exp_by_squaring r2[1u32][24u32] r0[1u32][24u32] r1 into r53;
    call exp_by_squaring r2[1u32][25u32] r0[1u32][25u32] r1 into r54;
    cast r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 into r55 as [field; 26u32];
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 into r56 as [field; 26u32];
    cast r55 r56 into r57 as [[field; 26u32]; 2u32];
    output r57 as [[field; 26u32]; 2u32].private;

function test_encrypt_exp_by_squaring:
    input r0 as field.public;
    input r1 as field.private;
    input r2 as field.private;
    input r3 as u128.private;
    call exp_by_squaring r0 r1 r3 into r4;
    call exp_by_squaring r4 r2 r3 into r5;
    assert.eq r0 r5 ;
    output r4 as field.private;
    output r5 as field.private;

function test_exp_by_squaring:
    input r0 as field.public;
    input r1 as field.private;
    input r2 as field.private;
    input r3 as u128.private;
    call exp_by_squaring r0 r1 r3 into r4;
    call exp_by_squaring r4 r2 r3 into r5;
    output r4 as field.private;
    output r5 as field.private;
