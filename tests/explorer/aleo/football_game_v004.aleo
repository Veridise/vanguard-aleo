import puzzle_pieces_v015.aleo;
import multiparty_pvp_utils_v015_avh.aleo;

program football_game_v004.aleo;

struct GameOutcome:
    goals_home as u64;
    goals_away as u64;

struct Player:
    player_id as u8;
    team_id as u8;
    goalkeeper as boolean;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct GameResult:
    goals_home as u64;
    goals_away as u64;

record Game:
    owner as address.private;
    challenger_commit as field.private;
    opponent_answer as [u8; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record CalculatedOutcomeNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    result_mapping_uuid as u128.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [u8; 11u32].private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [u8; 11u32].private;
    opponent_answer as [u8; 11u32].private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

mapping game_outcomes:
    key as u128.public;
    value as GameOutcome.public;

mapping players:
    key as u8.public;
    value as Player.public;

function main:
    input r0 as boolean.private;

function add_player:
    input r0 as Player.private;
    async add_player r0 into r1;
    output r1 as football_game_v004.aleo/add_player.future;

finalize add_player:
    input r0 as Player.public;
    set r0 into players[r0.player_id];

function propose_game:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [u8; 11u32].private;
    input r14 as field.private;
    assert.eq self.caller self.signer ;
    assert.neq r5 r4 ;
    cast r12 into r15 as scalar;
    commit.bhp256 r13 r15 into r16 as field;
    gt r1 0u64 into r17;
    assert.eq r17 true ;
    gte r0.amount r1 into r18;
    assert.eq r18 true ;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r19 r20 r21 r22 r23;
    call multiparty_pvp_utils_v015_avh.aleo/mint_multisig_key r14 r1 r3 r4 r5 into r24 r25;
    add r1 r1 into r26;
    cast r4 r5 1field true r26 r3 r4 2u32 into r27 as GameReqNotification.record;
    add r1 r1 into r28;
    cast r3 r5 1field false r28 r3 r4 3u32 into r29 as WaitingAcceptanceNotification.record;
    cast 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r30 as [u8; 11u32];
    add r1 r1 into r31;
    cast r5 r16 r30 r31 r3 r4 r5 1field 1u32 into r32 as Game.record;
    call multiparty_pvp_utils_v015_avh.aleo/mint_answer r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 r11 into r33 r34;
    async propose_game r13 into r35;
    output r19 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r20 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r21 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r22 as puzzle_pieces_v015.aleo/Piece.record;
    output r23 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r33 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r34 as multiparty_pvp_utils_v015_avh.aleo/AuditMintAnswer.record;
    output r24 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    output r25 as multiparty_pvp_utils_v015_avh.aleo/AuditKey.record;
    output r32 as Game.record;
    output r27 as GameReqNotification.record;
    output r29 as WaitingAcceptanceNotification.record;
    output r35 as football_game_v004.aleo/propose_game.future;

finalize propose_game:
    input r0 as [u8; 11u32].public;
    assert.eq true false ;

function challenger_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function submit_wager:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer ;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true ;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true ;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v015.aleo/Piece.record;
    output r17 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;

function opponent_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function accept_game:
    input r0 as Game.record;
    input r1 as [u8; 11u32].private;
    input r2 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v015.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 r1 into r14;
    output r7 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v015.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v015.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v004.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    input r1 as [u8; 11u32].public;
    get players[r1[10u32]] into r2;
    is.eq r2.player_id r1[10u32] into r3;
    assert.eq r3 true ;
    sub block.height 1000u32 into r4;
    gte r0 r4 into r5;
    assert.eq r5 true ;
    add block.height 1000u32 into r6;
    lte r0 r6 into r7;
    assert.eq r7 true ;

function calculate_outcome:
    input r0 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    input r1 as RevealAnswerNotification.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    input r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    call multiparty_pvp_utils_v015_avh.aleo/reveal_answer r3 r0.sig into r4 r5;
    cast r1.challenger_address r1.game_multisig 4field true r1.total_pot r1.challenger_address r1.opponent_address 0u128 8u32 into r6 as CalculatedOutcomeNotification.record;
    async calculate_outcome r1.opponent_answer r3.answer into r7;
    output r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    output r7 as football_game_v004.aleo/calculate_outcome.future;

finalize calculate_outcome:
    input r0 as [u8; 11u32].public;
    input r1 as [u8; 11u32].public;
    get players[r0[10u32]] into r2;
    get players[r1[10u32]] into r3;
    get players[r0[1u32]] into r4;
    get players[r1[1u32]] into r5;
    gt r4.speed r5.speed into r6;
    ternary r6 r4.player_id r5.player_id into r7;
    ternary r6 r4.team_id r5.team_id into r8;
    ternary r6 r4.goalkeeper r5.goalkeeper into r9;
    ternary r6 r4.attack r5.attack into r10;
    ternary r6 r4.defense r5.defense into r11;
    ternary r6 r4.speed r5.speed into r12;
    ternary r6 r4.power r5.power into r13;
    ternary r6 r4.stamina r5.stamina into r14;
    ternary r6 r4.technique r5.technique into r15;
    ternary r6 r4.goalkeeping r5.goalkeeping into r16;
    cast r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 into r17 as Player;
    gt r4.speed r5.speed into r18;
    ternary r18 r5.player_id r4.player_id into r19;
    ternary r18 r5.team_id r4.team_id into r20;
    ternary r18 r5.goalkeeper r4.goalkeeper into r21;
    ternary r18 r5.attack r4.attack into r22;
    ternary r18 r5.defense r4.defense into r23;
    ternary r18 r5.speed r4.speed into r24;
    ternary r18 r5.power r4.power into r25;
    ternary r18 r5.stamina r4.stamina into r26;
    ternary r18 r5.technique r4.technique into r27;
    ternary r18 r5.goalkeeping r4.goalkeeping into r28;
    cast r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 into r29 as Player;
    gt r4.speed r5.speed into r30;
    get players[r1[0u32]] into r31;
    get players[r0[0u32]] into r32;
    ternary r30 r31.player_id r32.player_id into r33;
    ternary r30 r31.team_id r32.team_id into r34;
    ternary r30 r31.goalkeeper r32.goalkeeper into r35;
    ternary r30 r31.attack r32.attack into r36;
    ternary r30 r31.defense r32.defense into r37;
    ternary r30 r31.speed r32.speed into r38;
    ternary r30 r31.power r32.power into r39;
    ternary r30 r31.stamina r32.stamina into r40;
    ternary r30 r31.technique r32.technique into r41;
    ternary r30 r31.goalkeeping r32.goalkeeping into r42;
    cast r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 into r43 as Player;
    rand.chacha into r44 as u8;
    gt r17.attack r44 into r45;
    rand.chacha into r46 as u8;
    lt r29.defense r46 into r47;
    rand.chacha into r48 as u8;
    lt r43.goalkeeping r48 into r49;
    lt r4.speed r5.speed into r50;
    add 0u64 1u64 into r51;
    add 0u64 1u64 into r52;
    ternary r50 r51 0u64 into r53;
    ternary r50 0u64 r52 into r54;
    ternary r49 r53 0u64 into r55;
    ternary r49 r54 0u64 into r56;
    ternary r47 r55 0u64 into r57;
    ternary r47 r56 0u64 into r58;
    ternary r45 r57 0u64 into r59;
    ternary r45 r58 0u64 into r60;
    get players[r0[2u32]] into r61;
    get players[r1[2u32]] into r62;
    gt r61.speed r62.speed into r63;
    ternary r63 r61.player_id r62.player_id into r64;
    ternary r63 r61.team_id r62.team_id into r65;
    ternary r63 r61.goalkeeper r62.goalkeeper into r66;
    ternary r63 r61.attack r62.attack into r67;
    ternary r63 r61.defense r62.defense into r68;
    ternary r63 r61.speed r62.speed into r69;
    ternary r63 r61.power r62.power into r70;
    ternary r63 r61.stamina r62.stamina into r71;
    ternary r63 r61.technique r62.technique into r72;
    ternary r63 r61.goalkeeping r62.goalkeeping into r73;
    cast r64 r65 r66 r67 r68 r69 r70 r71 r72 r73 into r74 as Player;
    gt r61.speed r62.speed into r75;
    ternary r75 r62.player_id r61.player_id into r76;
    ternary r75 r62.team_id r61.team_id into r77;
    ternary r75 r62.goalkeeper r61.goalkeeper into r78;
    ternary r75 r62.attack r61.attack into r79;
    ternary r75 r62.defense r61.defense into r80;
    ternary r75 r62.speed r61.speed into r81;
    ternary r75 r62.power r61.power into r82;
    ternary r75 r62.stamina r61.stamina into r83;
    ternary r75 r62.technique r61.technique into r84;
    ternary r75 r62.goalkeeping r61.goalkeeping into r85;
    cast r76 r77 r78 r79 r80 r81 r82 r83 r84 r85 into r86 as Player;
    gt r61.speed r62.speed into r87;
    get players[r1[0u32]] into r88;
    get players[r0[0u32]] into r89;
    ternary r87 r88.player_id r89.player_id into r90;
    ternary r87 r88.team_id r89.team_id into r91;
    ternary r87 r88.goalkeeper r89.goalkeeper into r92;
    ternary r87 r88.attack r89.attack into r93;
    ternary r87 r88.defense r89.defense into r94;
    ternary r87 r88.speed r89.speed into r95;
    ternary r87 r88.power r89.power into r96;
    ternary r87 r88.stamina r89.stamina into r97;
    ternary r87 r88.technique r89.technique into r98;
    ternary r87 r88.goalkeeping r89.goalkeeping into r99;
    cast r90 r91 r92 r93 r94 r95 r96 r97 r98 r99 into r100 as Player;
    rand.chacha into r101 as u8;
    gt r74.attack r101 into r102;
    rand.chacha into r103 as u8;
    lt r86.defense r103 into r104;
    rand.chacha into r105 as u8;
    lt r100.goalkeeping r105 into r106;
    lt r61.speed r62.speed into r107;
    add r59 1u64 into r108;
    add r60 1u64 into r109;
    ternary r107 r108 r59 into r110;
    ternary r107 r60 r109 into r111;
    ternary r106 r110 r59 into r112;
    ternary r106 r111 r60 into r113;
    ternary r104 r112 r59 into r114;
    ternary r104 r113 r60 into r115;
    ternary r102 r114 r59 into r116;
    ternary r102 r115 r60 into r117;
    get players[r0[3u32]] into r118;
    get players[r1[3u32]] into r119;
    gt r118.speed r119.speed into r120;
    ternary r120 r118.player_id r119.player_id into r121;
    ternary r120 r118.team_id r119.team_id into r122;
    ternary r120 r118.goalkeeper r119.goalkeeper into r123;
    ternary r120 r118.attack r119.attack into r124;
    ternary r120 r118.defense r119.defense into r125;
    ternary r120 r118.speed r119.speed into r126;
    ternary r120 r118.power r119.power into r127;
    ternary r120 r118.stamina r119.stamina into r128;
    ternary r120 r118.technique r119.technique into r129;
    ternary r120 r118.goalkeeping r119.goalkeeping into r130;
    cast r121 r122 r123 r124 r125 r126 r127 r128 r129 r130 into r131 as Player;
    gt r118.speed r119.speed into r132;
    ternary r132 r119.player_id r118.player_id into r133;
    ternary r132 r119.team_id r118.team_id into r134;
    ternary r132 r119.goalkeeper r118.goalkeeper into r135;
    ternary r132 r119.attack r118.attack into r136;
    ternary r132 r119.defense r118.defense into r137;
    ternary r132 r119.speed r118.speed into r138;
    ternary r132 r119.power r118.power into r139;
    ternary r132 r119.stamina r118.stamina into r140;
    ternary r132 r119.technique r118.technique into r141;
    ternary r132 r119.goalkeeping r118.goalkeeping into r142;
    cast r133 r134 r135 r136 r137 r138 r139 r140 r141 r142 into r143 as Player;
    gt r118.speed r119.speed into r144;
    get players[r1[0u32]] into r145;
    get players[r0[0u32]] into r146;
    ternary r144 r145.player_id r146.player_id into r147;
    ternary r144 r145.team_id r146.team_id into r148;
    ternary r144 r145.goalkeeper r146.goalkeeper into r149;
    ternary r144 r145.attack r146.attack into r150;
    ternary r144 r145.defense r146.defense into r151;
    ternary r144 r145.speed r146.speed into r152;
    ternary r144 r145.power r146.power into r153;
    ternary r144 r145.stamina r146.stamina into r154;
    ternary r144 r145.technique r146.technique into r155;
    ternary r144 r145.goalkeeping r146.goalkeeping into r156;
    cast r147 r148 r149 r150 r151 r152 r153 r154 r155 r156 into r157 as Player;
    rand.chacha into r158 as u8;
    gt r131.attack r158 into r159;
    rand.chacha into r160 as u8;
    lt r143.defense r160 into r161;
    rand.chacha into r162 as u8;
    lt r157.goalkeeping r162 into r163;
    lt r118.speed r119.speed into r164;
    add r116 1u64 into r165;
    add r117 1u64 into r166;
    ternary r164 r165 r116 into r167;
    ternary r164 r117 r166 into r168;
    ternary r163 r167 r116 into r169;
    ternary r163 r168 r117 into r170;
    ternary r161 r169 r116 into r171;
    ternary r161 r170 r117 into r172;
    ternary r159 r171 r116 into r173;
    ternary r159 r172 r117 into r174;
    get players[r0[4u32]] into r175;
    get players[r1[4u32]] into r176;
    gt r175.speed r176.speed into r177;
    ternary r177 r175.player_id r176.player_id into r178;
    ternary r177 r175.team_id r176.team_id into r179;
    ternary r177 r175.goalkeeper r176.goalkeeper into r180;
    ternary r177 r175.attack r176.attack into r181;
    ternary r177 r175.defense r176.defense into r182;
    ternary r177 r175.speed r176.speed into r183;
    ternary r177 r175.power r176.power into r184;
    ternary r177 r175.stamina r176.stamina into r185;
    ternary r177 r175.technique r176.technique into r186;
    ternary r177 r175.goalkeeping r176.goalkeeping into r187;
    cast r178 r179 r180 r181 r182 r183 r184 r185 r186 r187 into r188 as Player;
    gt r175.speed r176.speed into r189;
    ternary r189 r176.player_id r175.player_id into r190;
    ternary r189 r176.team_id r175.team_id into r191;
    ternary r189 r176.goalkeeper r175.goalkeeper into r192;
    ternary r189 r176.attack r175.attack into r193;
    ternary r189 r176.defense r175.defense into r194;
    ternary r189 r176.speed r175.speed into r195;
    ternary r189 r176.power r175.power into r196;
    ternary r189 r176.stamina r175.stamina into r197;
    ternary r189 r176.technique r175.technique into r198;
    ternary r189 r176.goalkeeping r175.goalkeeping into r199;
    cast r190 r191 r192 r193 r194 r195 r196 r197 r198 r199 into r200 as Player;
    gt r175.speed r176.speed into r201;
    get players[r1[0u32]] into r202;
    get players[r0[0u32]] into r203;
    ternary r201 r202.player_id r203.player_id into r204;
    ternary r201 r202.team_id r203.team_id into r205;
    ternary r201 r202.goalkeeper r203.goalkeeper into r206;
    ternary r201 r202.attack r203.attack into r207;
    ternary r201 r202.defense r203.defense into r208;
    ternary r201 r202.speed r203.speed into r209;
    ternary r201 r202.power r203.power into r210;
    ternary r201 r202.stamina r203.stamina into r211;
    ternary r201 r202.technique r203.technique into r212;
    ternary r201 r202.goalkeeping r203.goalkeeping into r213;
    cast r204 r205 r206 r207 r208 r209 r210 r211 r212 r213 into r214 as Player;
    rand.chacha into r215 as u8;
    gt r188.attack r215 into r216;
    rand.chacha into r217 as u8;
    lt r200.defense r217 into r218;
    rand.chacha into r219 as u8;
    lt r214.goalkeeping r219 into r220;
    lt r175.speed r176.speed into r221;
    add r173 1u64 into r222;
    add r174 1u64 into r223;
    ternary r221 r222 r173 into r224;
    ternary r221 r174 r223 into r225;
    ternary r220 r224 r173 into r226;
    ternary r220 r225 r174 into r227;
    ternary r218 r226 r173 into r228;
    ternary r218 r227 r174 into r229;
    ternary r216 r228 r173 into r230;
    ternary r216 r229 r174 into r231;
    get players[r0[5u32]] into r232;
    get players[r1[5u32]] into r233;
    gt r232.speed r233.speed into r234;
    ternary r234 r232.player_id r233.player_id into r235;
    ternary r234 r232.team_id r233.team_id into r236;
    ternary r234 r232.goalkeeper r233.goalkeeper into r237;
    ternary r234 r232.attack r233.attack into r238;
    ternary r234 r232.defense r233.defense into r239;
    ternary r234 r232.speed r233.speed into r240;
    ternary r234 r232.power r233.power into r241;
    ternary r234 r232.stamina r233.stamina into r242;
    ternary r234 r232.technique r233.technique into r243;
    ternary r234 r232.goalkeeping r233.goalkeeping into r244;
    cast r235 r236 r237 r238 r239 r240 r241 r242 r243 r244 into r245 as Player;
    gt r232.speed r233.speed into r246;
    ternary r246 r233.player_id r232.player_id into r247;
    ternary r246 r233.team_id r232.team_id into r248;
    ternary r246 r233.goalkeeper r232.goalkeeper into r249;
    ternary r246 r233.attack r232.attack into r250;
    ternary r246 r233.defense r232.defense into r251;
    ternary r246 r233.speed r232.speed into r252;
    ternary r246 r233.power r232.power into r253;
    ternary r246 r233.stamina r232.stamina into r254;
    ternary r246 r233.technique r232.technique into r255;
    ternary r246 r233.goalkeeping r232.goalkeeping into r256;
    cast r247 r248 r249 r250 r251 r252 r253 r254 r255 r256 into r257 as Player;
    gt r232.speed r233.speed into r258;
    get players[r1[0u32]] into r259;
    get players[r0[0u32]] into r260;
    ternary r258 r259.player_id r260.player_id into r261;
    ternary r258 r259.team_id r260.team_id into r262;
    ternary r258 r259.goalkeeper r260.goalkeeper into r263;
    ternary r258 r259.attack r260.attack into r264;
    ternary r258 r259.defense r260.defense into r265;
    ternary r258 r259.speed r260.speed into r266;
    ternary r258 r259.power r260.power into r267;
    ternary r258 r259.stamina r260.stamina into r268;
    ternary r258 r259.technique r260.technique into r269;
    ternary r258 r259.goalkeeping r260.goalkeeping into r270;
    cast r261 r262 r263 r264 r265 r266 r267 r268 r269 r270 into r271 as Player;
    rand.chacha into r272 as u8;
    gt r245.attack r272 into r273;
    rand.chacha into r274 as u8;
    lt r257.defense r274 into r275;
    rand.chacha into r276 as u8;
    lt r271.goalkeeping r276 into r277;
    lt r232.speed r233.speed into r278;
    add r230 1u64 into r279;
    add r231 1u64 into r280;
    ternary r278 r279 r230 into r281;
    ternary r278 r231 r280 into r282;
    ternary r277 r281 r230 into r283;
    ternary r277 r282 r231 into r284;
    ternary r275 r283 r230 into r285;
    ternary r275 r284 r231 into r286;
    ternary r273 r285 r230 into r287;
    ternary r273 r286 r231 into r288;
    get players[r0[6u32]] into r289;
    get players[r1[6u32]] into r290;
    gt r289.speed r290.speed into r291;
    ternary r291 r289.player_id r290.player_id into r292;
    ternary r291 r289.team_id r290.team_id into r293;
    ternary r291 r289.goalkeeper r290.goalkeeper into r294;
    ternary r291 r289.attack r290.attack into r295;
    ternary r291 r289.defense r290.defense into r296;
    ternary r291 r289.speed r290.speed into r297;
    ternary r291 r289.power r290.power into r298;
    ternary r291 r289.stamina r290.stamina into r299;
    ternary r291 r289.technique r290.technique into r300;
    ternary r291 r289.goalkeeping r290.goalkeeping into r301;
    cast r292 r293 r294 r295 r296 r297 r298 r299 r300 r301 into r302 as Player;
    gt r289.speed r290.speed into r303;
    ternary r303 r290.player_id r289.player_id into r304;
    ternary r303 r290.team_id r289.team_id into r305;
    ternary r303 r290.goalkeeper r289.goalkeeper into r306;
    ternary r303 r290.attack r289.attack into r307;
    ternary r303 r290.defense r289.defense into r308;
    ternary r303 r290.speed r289.speed into r309;
    ternary r303 r290.power r289.power into r310;
    ternary r303 r290.stamina r289.stamina into r311;
    ternary r303 r290.technique r289.technique into r312;
    ternary r303 r290.goalkeeping r289.goalkeeping into r313;
    cast r304 r305 r306 r307 r308 r309 r310 r311 r312 r313 into r314 as Player;
    gt r289.speed r290.speed into r315;
    get players[r1[0u32]] into r316;
    get players[r0[0u32]] into r317;
    ternary r315 r316.player_id r317.player_id into r318;
    ternary r315 r316.team_id r317.team_id into r319;
    ternary r315 r316.goalkeeper r317.goalkeeper into r320;
    ternary r315 r316.attack r317.attack into r321;
    ternary r315 r316.defense r317.defense into r322;
    ternary r315 r316.speed r317.speed into r323;
    ternary r315 r316.power r317.power into r324;
    ternary r315 r316.stamina r317.stamina into r325;
    ternary r315 r316.technique r317.technique into r326;
    ternary r315 r316.goalkeeping r317.goalkeeping into r327;
    cast r318 r319 r320 r321 r322 r323 r324 r325 r326 r327 into r328 as Player;
    rand.chacha into r329 as u8;
    gt r302.attack r329 into r330;
    rand.chacha into r331 as u8;
    lt r314.defense r331 into r332;
    rand.chacha into r333 as u8;
    lt r328.goalkeeping r333 into r334;
    lt r289.speed r290.speed into r335;
    add r287 1u64 into r336;
    add r288 1u64 into r337;
    ternary r335 r336 r287 into r338;
    ternary r335 r288 r337 into r339;
    ternary r334 r338 r287 into r340;
    ternary r334 r339 r288 into r341;
    ternary r332 r340 r287 into r342;
    ternary r332 r341 r288 into r343;
    ternary r330 r342 r287 into r344;
    ternary r330 r343 r288 into r345;
    get players[r0[7u32]] into r346;
    get players[r1[7u32]] into r347;
    gt r346.speed r347.speed into r348;
    ternary r348 r346.player_id r347.player_id into r349;
    ternary r348 r346.team_id r347.team_id into r350;
    ternary r348 r346.goalkeeper r347.goalkeeper into r351;
    ternary r348 r346.attack r347.attack into r352;
    ternary r348 r346.defense r347.defense into r353;
    ternary r348 r346.speed r347.speed into r354;
    ternary r348 r346.power r347.power into r355;
    ternary r348 r346.stamina r347.stamina into r356;
    ternary r348 r346.technique r347.technique into r357;
    ternary r348 r346.goalkeeping r347.goalkeeping into r358;
    cast r349 r350 r351 r352 r353 r354 r355 r356 r357 r358 into r359 as Player;
    gt r346.speed r347.speed into r360;
    ternary r360 r347.player_id r346.player_id into r361;
    ternary r360 r347.team_id r346.team_id into r362;
    ternary r360 r347.goalkeeper r346.goalkeeper into r363;
    ternary r360 r347.attack r346.attack into r364;
    ternary r360 r347.defense r346.defense into r365;
    ternary r360 r347.speed r346.speed into r366;
    ternary r360 r347.power r346.power into r367;
    ternary r360 r347.stamina r346.stamina into r368;
    ternary r360 r347.technique r346.technique into r369;
    ternary r360 r347.goalkeeping r346.goalkeeping into r370;
    cast r361 r362 r363 r364 r365 r366 r367 r368 r369 r370 into r371 as Player;
    gt r346.speed r347.speed into r372;
    get players[r1[0u32]] into r373;
    get players[r0[0u32]] into r374;
    ternary r372 r373.player_id r374.player_id into r375;
    ternary r372 r373.team_id r374.team_id into r376;
    ternary r372 r373.goalkeeper r374.goalkeeper into r377;
    ternary r372 r373.attack r374.attack into r378;
    ternary r372 r373.defense r374.defense into r379;
    ternary r372 r373.speed r374.speed into r380;
    ternary r372 r373.power r374.power into r381;
    ternary r372 r373.stamina r374.stamina into r382;
    ternary r372 r373.technique r374.technique into r383;
    ternary r372 r373.goalkeeping r374.goalkeeping into r384;
    cast r375 r376 r377 r378 r379 r380 r381 r382 r383 r384 into r385 as Player;
    rand.chacha into r386 as u8;
    gt r359.attack r386 into r387;
    rand.chacha into r388 as u8;
    lt r371.defense r388 into r389;
    rand.chacha into r390 as u8;
    lt r385.goalkeeping r390 into r391;
    lt r346.speed r347.speed into r392;
    add r344 1u64 into r393;
    add r345 1u64 into r394;
    ternary r392 r393 r344 into r395;
    ternary r392 r345 r394 into r396;
    ternary r391 r395 r344 into r397;
    ternary r391 r396 r345 into r398;
    ternary r389 r397 r344 into r399;
    ternary r389 r398 r345 into r400;
    ternary r387 r399 r344 into r401;
    ternary r387 r400 r345 into r402;
    get players[r0[8u32]] into r403;
    get players[r1[8u32]] into r404;
    gt r403.speed r404.speed into r405;
    ternary r405 r403.player_id r404.player_id into r406;
    ternary r405 r403.team_id r404.team_id into r407;
    ternary r405 r403.goalkeeper r404.goalkeeper into r408;
    ternary r405 r403.attack r404.attack into r409;
    ternary r405 r403.defense r404.defense into r410;
    ternary r405 r403.speed r404.speed into r411;
    ternary r405 r403.power r404.power into r412;
    ternary r405 r403.stamina r404.stamina into r413;
    ternary r405 r403.technique r404.technique into r414;
    ternary r405 r403.goalkeeping r404.goalkeeping into r415;
    cast r406 r407 r408 r409 r410 r411 r412 r413 r414 r415 into r416 as Player;
    gt r403.speed r404.speed into r417;
    ternary r417 r404.player_id r403.player_id into r418;
    ternary r417 r404.team_id r403.team_id into r419;
    ternary r417 r404.goalkeeper r403.goalkeeper into r420;
    ternary r417 r404.attack r403.attack into r421;
    ternary r417 r404.defense r403.defense into r422;
    ternary r417 r404.speed r403.speed into r423;
    ternary r417 r404.power r403.power into r424;
    ternary r417 r404.stamina r403.stamina into r425;
    ternary r417 r404.technique r403.technique into r426;
    ternary r417 r404.goalkeeping r403.goalkeeping into r427;
    cast r418 r419 r420 r421 r422 r423 r424 r425 r426 r427 into r428 as Player;
    gt r403.speed r404.speed into r429;
    get players[r1[0u32]] into r430;
    get players[r0[0u32]] into r431;
    ternary r429 r430.player_id r431.player_id into r432;
    ternary r429 r430.team_id r431.team_id into r433;
    ternary r429 r430.goalkeeper r431.goalkeeper into r434;
    ternary r429 r430.attack r431.attack into r435;
    ternary r429 r430.defense r431.defense into r436;
    ternary r429 r430.speed r431.speed into r437;
    ternary r429 r430.power r431.power into r438;
    ternary r429 r430.stamina r431.stamina into r439;
    ternary r429 r430.technique r431.technique into r440;
    ternary r429 r430.goalkeeping r431.goalkeeping into r441;
    cast r432 r433 r434 r435 r436 r437 r438 r439 r440 r441 into r442 as Player;
    rand.chacha into r443 as u8;
    gt r416.attack r443 into r444;
    rand.chacha into r445 as u8;
    lt r428.defense r445 into r446;
    rand.chacha into r447 as u8;
    lt r442.goalkeeping r447 into r448;
    lt r403.speed r404.speed into r449;
    add r401 1u64 into r450;
    add r402 1u64 into r451;
    ternary r449 r450 r401 into r452;
    ternary r449 r402 r451 into r453;
    ternary r448 r452 r401 into r454;
    ternary r448 r453 r402 into r455;
    ternary r446 r454 r401 into r456;
    ternary r446 r455 r402 into r457;
    ternary r444 r456 r401 into r458;
    ternary r444 r457 r402 into r459;
    get players[r0[9u32]] into r460;
    get players[r1[9u32]] into r461;
    gt r460.speed r461.speed into r462;
    ternary r462 r460.player_id r461.player_id into r463;
    ternary r462 r460.team_id r461.team_id into r464;
    ternary r462 r460.goalkeeper r461.goalkeeper into r465;
    ternary r462 r460.attack r461.attack into r466;
    ternary r462 r460.defense r461.defense into r467;
    ternary r462 r460.speed r461.speed into r468;
    ternary r462 r460.power r461.power into r469;
    ternary r462 r460.stamina r461.stamina into r470;
    ternary r462 r460.technique r461.technique into r471;
    ternary r462 r460.goalkeeping r461.goalkeeping into r472;
    cast r463 r464 r465 r466 r467 r468 r469 r470 r471 r472 into r473 as Player;
    gt r460.speed r461.speed into r474;
    ternary r474 r461.player_id r460.player_id into r475;
    ternary r474 r461.team_id r460.team_id into r476;
    ternary r474 r461.goalkeeper r460.goalkeeper into r477;
    ternary r474 r461.attack r460.attack into r478;
    ternary r474 r461.defense r460.defense into r479;
    ternary r474 r461.speed r460.speed into r480;
    ternary r474 r461.power r460.power into r481;
    ternary r474 r461.stamina r460.stamina into r482;
    ternary r474 r461.technique r460.technique into r483;
    ternary r474 r461.goalkeeping r460.goalkeeping into r484;
    cast r475 r476 r477 r478 r479 r480 r481 r482 r483 r484 into r485 as Player;
    gt r460.speed r461.speed into r486;
    get players[r1[0u32]] into r487;
    get players[r0[0u32]] into r488;
    ternary r486 r487.player_id r488.player_id into r489;
    ternary r486 r487.team_id r488.team_id into r490;
    ternary r486 r487.goalkeeper r488.goalkeeper into r491;
    ternary r486 r487.attack r488.attack into r492;
    ternary r486 r487.defense r488.defense into r493;
    ternary r486 r487.speed r488.speed into r494;
    ternary r486 r487.power r488.power into r495;
    ternary r486 r487.stamina r488.stamina into r496;
    ternary r486 r487.technique r488.technique into r497;
    ternary r486 r487.goalkeeping r488.goalkeeping into r498;
    cast r489 r490 r491 r492 r493 r494 r495 r496 r497 r498 into r499 as Player;
    rand.chacha into r500 as u8;
    gt r473.attack r500 into r501;
    rand.chacha into r502 as u8;
    lt r485.defense r502 into r503;
    rand.chacha into r504 as u8;
    lt r499.goalkeeping r504 into r505;
    lt r460.speed r461.speed into r506;
    add r458 1u64 into r507;
    add r459 1u64 into r508;
    ternary r506 r507 r458 into r509;
    ternary r506 r459 r508 into r510;
    ternary r505 r509 r458 into r511;
    ternary r505 r510 r459 into r512;
    ternary r503 r511 r458 into r513;
    ternary r503 r512 r459 into r514;
    ternary r501 r513 r458 into r515;
    ternary r501 r514 r459 into r516;
    get players[r0[10u32]] into r517;
    get players[r1[10u32]] into r518;
    gt r517.speed r518.speed into r519;
    ternary r519 r517.player_id r518.player_id into r520;
    ternary r519 r517.team_id r518.team_id into r521;
    ternary r519 r517.goalkeeper r518.goalkeeper into r522;
    ternary r519 r517.attack r518.attack into r523;
    ternary r519 r517.defense r518.defense into r524;
    ternary r519 r517.speed r518.speed into r525;
    ternary r519 r517.power r518.power into r526;
    ternary r519 r517.stamina r518.stamina into r527;
    ternary r519 r517.technique r518.technique into r528;
    ternary r519 r517.goalkeeping r518.goalkeeping into r529;
    cast r520 r521 r522 r523 r524 r525 r526 r527 r528 r529 into r530 as Player;
    gt r517.speed r518.speed into r531;
    ternary r531 r518.player_id r517.player_id into r532;
    ternary r531 r518.team_id r517.team_id into r533;
    ternary r531 r518.goalkeeper r517.goalkeeper into r534;
    ternary r531 r518.attack r517.attack into r535;
    ternary r531 r518.defense r517.defense into r536;
    ternary r531 r518.speed r517.speed into r537;
    ternary r531 r518.power r517.power into r538;
    ternary r531 r518.stamina r517.stamina into r539;
    ternary r531 r518.technique r517.technique into r540;
    ternary r531 r518.goalkeeping r517.goalkeeping into r541;
    cast r532 r533 r534 r535 r536 r537 r538 r539 r540 r541 into r542 as Player;
    gt r517.speed r518.speed into r543;
    get players[r1[0u32]] into r544;
    get players[r0[0u32]] into r545;
    ternary r543 r544.player_id r545.player_id into r546;
    ternary r543 r544.team_id r545.team_id into r547;
    ternary r543 r544.goalkeeper r545.goalkeeper into r548;
    ternary r543 r544.attack r545.attack into r549;
    ternary r543 r544.defense r545.defense into r550;
    ternary r543 r544.speed r545.speed into r551;
    ternary r543 r544.power r545.power into r552;
    ternary r543 r544.stamina r545.stamina into r553;
    ternary r543 r544.technique r545.technique into r554;
    ternary r543 r544.goalkeeping r545.goalkeeping into r555;
    cast r546 r547 r548 r549 r550 r551 r552 r553 r554 r555 into r556 as Player;
    rand.chacha into r557 as u8;
    gt r530.attack r557 into r558;
    rand.chacha into r559 as u8;
    lt r542.defense r559 into r560;
    rand.chacha into r561 as u8;
    lt r556.goalkeeping r561 into r562;
    lt r517.speed r518.speed into r563;
    add r515 1u64 into r564;
    add r516 1u64 into r565;
    ternary r563 r564 r515 into r566;
    ternary r563 r516 r565 into r567;
    ternary r562 r566 r515 into r568;
    ternary r562 r567 r516 into r569;
    ternary r560 r568 r515 into r570;
    ternary r560 r569 r516 into r571;
    ternary r558 r570 r515 into r572;
    ternary r558 r571 r516 into r573;
    lt r517.speed r518.speed into r574;
    add r572 1u64 into r575;
    add r573 1u64 into r576;
    ternary r574 r575 r572 into r577;
    ternary r574 r573 r576 into r578;
    cast r578 r577 into r579 as GameOutcome;
    set r579 into game_outcomes[0u128];

function reveal_answer_game:
    input r0 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    input r1 as RevealAnswerNotification.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    input r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    input r4 as u128.private;
    input r5 as GameOutcome.private;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    is.eq r1.opponent_answer r3.answer into r6;
    ternary r6 r3.opponent_address r3.challenger_address into r7;
    is.eq r7 r3.challenger_address into r8;
    ternary r8 r3.opponent_address r3.challenger_address into r9;
    call multiparty_pvp_utils_v015_avh.aleo/reveal_answer r3 r0.sig into r10 r11;
    call puzzle_pieces_v015.aleo/joint_stake_state_update r2 r0 r7 into r12 r13;
    cast r3.opponent_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer 9u32 into r14 as GameFinishReqNotification.record;
    cast r3.challenger_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer 9u32 into r15 as GameFinishReqNotification.record;
    async reveal_answer_game r4 r5 into r16;
    output r10 as multiparty_pvp_utils_v015_avh.aleo/RevealAnswer.record;
    output r11 as multiparty_pvp_utils_v015_avh.aleo/AuditRevealAnswer.record;
    output r12 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    output r13 as puzzle_pieces_v015.aleo/AuditJointPieceWinner.record;
    output r14 as GameFinishReqNotification.record;
    output r15 as GameFinishReqNotification.record;
    output r16 as football_game_v004.aleo/reveal_answer_game.future;

finalize reveal_answer_game:
    input r0 as u128.public;
    input r1 as GameOutcome.public;
    get game_outcomes[r0] into r2;
    assert.eq r1 r2 ;
    assert.eq r1.goals_home r2.goals_home ;
    assert.eq r1.goals_away r2.goals_away ;

function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    input r4 as u128.private;
    input r5 as GameOutcome.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    gt r5.goals_home r5.goals_away into r6;
    ternary r6 r0.challenger_address r0.opponent_address into r7;
    gt r5.goals_home r5.goals_away into r8;
    ternary r8 r0.opponent_address r0.challenger_address into r9;
    call puzzle_pieces_v015.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r10 r11 r12;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r13 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r9 10u32 into r14 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r9 10u32 into r15 as GameFinishedNotification.record;
    output r10 as puzzle_pieces_v015.aleo/Piece.record;
    output r11 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r12 as puzzle_pieces_v015.aleo/AuditPieceOwner.record;
    output r13 as Game.record;
    output r14 as GameFinishedNotification.record;
    output r15 as GameFinishedNotification.record;

function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r5 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r6 as GameFinishedNotification.record;
    call puzzle_pieces_v015.aleo/joint_timeout_to_opponent r1 r2 r3 into r7 r8;
    async finish_game_by_timeout r2.block_ht into r9;
    output r7 as puzzle_pieces_v015.aleo/Piece.record;
    output r8 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r5 as GameFinishedNotification.record;
    output r6 as GameFinishedNotification.record;
    output r9 as football_game_v004.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true ;
