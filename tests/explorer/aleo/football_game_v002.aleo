import puzzle_pieces_v015.aleo;

program football_game_v002.aleo;

struct Player:
    player_id as u8;
    team_id as u8;
    goalkeeper as boolean;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct GameResult:
    goals_home as u64;
    goals_away as u64;

record Game:
    owner as address.private;
    challenger_commit as field.private;
    opponent_answer as [Player; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [Player; 11u32].private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [Player; 11u32].private;
    opponent_answer as [Player; 11u32].private;
    winner as address.private;
    loser as address.private;
    goals_home as u64.private;
    goals_away as u64.private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

struct Mssage:
    field_1 as field;
    field_2 as field;
    field_3 as field;
    field_4 as field;
    field_5 as field;

record Answer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    message_1 as field.private;
    message_2 as field.private;
    message_3 as field.private;
    message_4 as field.private;
    message_5 as field.private;
    ix as u32.private;

record AuditMintAnswer:
    owner as address.private;
    answer_owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    message_1 as field.private;
    message_2 as field.private;
    message_3 as field.private;
    message_4 as field.private;
    message_5 as field.private;
    ix as u32.private;

record RevealAnswer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    sig as signature.private;
    ix as u32.private;

record AuditRevealAnswer:
    owner as address.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    amount as u64.private;
    nonce as field.private;
    answer as [Player; 11u32].private;
    sig as signature.private;
    ix as u32.private;

record Key:
    owner as address.private;
    seed as field.private;
    amount as u64.private;
    challenger as address.private;
    opponent as address.private;
    game_multisig as address.private;
    ix as u32.private;

record AuditKey:
    owner as address.private;
    seed as field.private;
    amount as u64.private;
    challenger as address.private;
    opponent as address.private;
    game_multisig as address.private;
    ix as u32.private;

function main:
    input r0 as boolean.private;

function propose_game:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [Player; 11u32].private;
    input r14 as field.private;
    assert.eq self.caller self.signer ;
    assert.neq r5 r4 ;
    cast r12 into r15 as scalar;
    commit.bhp256 r13 r15 into r16 as field;
    gt r1 0u64 into r17;
    assert.eq r17 true ;
    gte r0.amount r1 into r18;
    assert.eq r18 true ;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r19 r20 r21 r22 r23;
    cast r4 r14 r1 r3 r4 r5 5u32 into r24 as Key.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r14 r1 r3 r4 r5 6u32 into r25 as AuditKey.record;
    add r1 r1 into r26;
    cast r4 r5 1field true r26 r3 r4 2u32 into r27 as GameReqNotification.record;
    add r1 r1 into r28;
    cast r3 r5 1field false r28 r3 r4 3u32 into r29 as WaitingAcceptanceNotification.record;
    cast 0u8 0u8 false 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r30 as Player;
    cast r30 r30 r30 r30 r30 r30 r30 r30 r30 r30 r30 into r31 as [Player; 11u32];
    add r1 r1 into r32;
    cast r5 r16 r31 r32 r3 r4 r5 1field 1u32 into r33 as Game.record;
    cast r6 r7 r8 r9 r10 into r34 as Mssage;
    sign.verify r11 r3 r34 into r35;
    assert.eq true r35 ;
    cast r3 r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 1u32 into r36 as Answer.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r3 r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 2u32 into r37 as AuditMintAnswer.record;
    output r19 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r20 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r21 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r22 as puzzle_pieces_v015.aleo/Piece.record;
    output r23 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r36 as Answer.record;
    output r37 as AuditMintAnswer.record;
    output r24 as Key.record;
    output r25 as AuditKey.record;
    output r33 as Game.record;
    output r27 as GameReqNotification.record;
    output r29 as WaitingAcceptanceNotification.record;

function challenger_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function submit_wager:
    input r0 as puzzle_pieces_v015.aleo/Piece.record;
    input r1 as Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer ;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true ;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true ;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v015.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v015.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v015.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v015.aleo/Piece.record;
    output r17 as puzzle_pieces_v015.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;

function opponent_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v015.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v015.aleo/Piece.record;
    output r5 as puzzle_pieces_v015.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function accept_game:
    input r0 as Game.record;
    input r1 as [Player; 11u32].private;
    input r2 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v015.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v015.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v015.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 into r14;
    output r7 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v015.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v015.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v002.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    sub block.height 1000u32 into r1;
    gte r0 r1 into r2;
    assert.eq r2 true ;
    add block.height 1000u32 into r3;
    lte r0 r3 into r4;
    assert.eq r4 true ;

function reveal_answer_game:
    input r0 as RevealAnswerNotification.record;
    input r1 as Answer.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceState.record;
    input r3 as puzzle_pieces_v015.aleo/ClaimSignature.record;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    gt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r4;
    ternary r4 r1.answer[1u32].player_id r0.opponent_answer[1u32].player_id into r5;
    ternary r4 r1.answer[1u32].team_id r0.opponent_answer[1u32].team_id into r6;
    ternary r4 r1.answer[1u32].goalkeeper r0.opponent_answer[1u32].goalkeeper into r7;
    ternary r4 r1.answer[1u32].attack r0.opponent_answer[1u32].attack into r8;
    ternary r4 r1.answer[1u32].defense r0.opponent_answer[1u32].defense into r9;
    ternary r4 r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r10;
    ternary r4 r1.answer[1u32].power r0.opponent_answer[1u32].power into r11;
    ternary r4 r1.answer[1u32].stamina r0.opponent_answer[1u32].stamina into r12;
    ternary r4 r1.answer[1u32].technique r0.opponent_answer[1u32].technique into r13;
    ternary r4 r1.answer[1u32].goalkeeping r0.opponent_answer[1u32].goalkeeping into r14;
    cast r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 into r15 as Player;
    gt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r16;
    ternary r16 r0.opponent_answer[1u32].player_id r1.answer[1u32].player_id into r17;
    ternary r16 r0.opponent_answer[1u32].team_id r1.answer[1u32].team_id into r18;
    ternary r16 r0.opponent_answer[1u32].goalkeeper r1.answer[1u32].goalkeeper into r19;
    ternary r16 r0.opponent_answer[1u32].attack r1.answer[1u32].attack into r20;
    ternary r16 r0.opponent_answer[1u32].defense r1.answer[1u32].defense into r21;
    ternary r16 r0.opponent_answer[1u32].speed r1.answer[1u32].speed into r22;
    ternary r16 r0.opponent_answer[1u32].power r1.answer[1u32].power into r23;
    ternary r16 r0.opponent_answer[1u32].stamina r1.answer[1u32].stamina into r24;
    ternary r16 r0.opponent_answer[1u32].technique r1.answer[1u32].technique into r25;
    ternary r16 r0.opponent_answer[1u32].goalkeeping r1.answer[1u32].goalkeeping into r26;
    cast r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 into r27 as Player;
    gt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r28;
    ternary r28 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r29;
    ternary r28 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r30;
    ternary r28 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r31;
    ternary r28 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r32;
    ternary r28 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r33;
    ternary r28 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r34;
    ternary r28 r0.opponent_answer[0u32].power r1.answer[0u32].power into r35;
    ternary r28 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r36;
    ternary r28 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r37;
    ternary r28 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r38;
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 into r39 as Player;
    gt r15.attack 127u8 into r40;
    lt r27.defense 127u8 into r41;
    lt r39.goalkeeping 127u8 into r42;
    lt r1.answer[1u32].speed r0.opponent_answer[1u32].speed into r43;
    add 0u64 1u64 into r44;
    add 0u64 1u64 into r45;
    ternary r43 r44 0u64 into r46;
    ternary r43 0u64 r45 into r47;
    ternary r42 r46 0u64 into r48;
    ternary r42 r47 0u64 into r49;
    ternary r41 r48 0u64 into r50;
    ternary r41 r49 0u64 into r51;
    ternary r40 r50 0u64 into r52;
    ternary r40 r51 0u64 into r53;
    gt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r54;
    ternary r54 r1.answer[2u32].player_id r0.opponent_answer[2u32].player_id into r55;
    ternary r54 r1.answer[2u32].team_id r0.opponent_answer[2u32].team_id into r56;
    ternary r54 r1.answer[2u32].goalkeeper r0.opponent_answer[2u32].goalkeeper into r57;
    ternary r54 r1.answer[2u32].attack r0.opponent_answer[2u32].attack into r58;
    ternary r54 r1.answer[2u32].defense r0.opponent_answer[2u32].defense into r59;
    ternary r54 r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r60;
    ternary r54 r1.answer[2u32].power r0.opponent_answer[2u32].power into r61;
    ternary r54 r1.answer[2u32].stamina r0.opponent_answer[2u32].stamina into r62;
    ternary r54 r1.answer[2u32].technique r0.opponent_answer[2u32].technique into r63;
    ternary r54 r1.answer[2u32].goalkeeping r0.opponent_answer[2u32].goalkeeping into r64;
    cast r55 r56 r57 r58 r59 r60 r61 r62 r63 r64 into r65 as Player;
    gt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r66;
    ternary r66 r0.opponent_answer[2u32].player_id r1.answer[2u32].player_id into r67;
    ternary r66 r0.opponent_answer[2u32].team_id r1.answer[2u32].team_id into r68;
    ternary r66 r0.opponent_answer[2u32].goalkeeper r1.answer[2u32].goalkeeper into r69;
    ternary r66 r0.opponent_answer[2u32].attack r1.answer[2u32].attack into r70;
    ternary r66 r0.opponent_answer[2u32].defense r1.answer[2u32].defense into r71;
    ternary r66 r0.opponent_answer[2u32].speed r1.answer[2u32].speed into r72;
    ternary r66 r0.opponent_answer[2u32].power r1.answer[2u32].power into r73;
    ternary r66 r0.opponent_answer[2u32].stamina r1.answer[2u32].stamina into r74;
    ternary r66 r0.opponent_answer[2u32].technique r1.answer[2u32].technique into r75;
    ternary r66 r0.opponent_answer[2u32].goalkeeping r1.answer[2u32].goalkeeping into r76;
    cast r67 r68 r69 r70 r71 r72 r73 r74 r75 r76 into r77 as Player;
    gt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r78;
    ternary r78 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r79;
    ternary r78 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r80;
    ternary r78 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r81;
    ternary r78 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r82;
    ternary r78 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r83;
    ternary r78 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r84;
    ternary r78 r0.opponent_answer[0u32].power r1.answer[0u32].power into r85;
    ternary r78 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r86;
    ternary r78 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r87;
    ternary r78 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r88;
    cast r79 r80 r81 r82 r83 r84 r85 r86 r87 r88 into r89 as Player;
    gt r65.attack 127u8 into r90;
    lt r77.defense 127u8 into r91;
    lt r89.goalkeeping 127u8 into r92;
    lt r1.answer[2u32].speed r0.opponent_answer[2u32].speed into r93;
    add r52 1u64 into r94;
    add r53 1u64 into r95;
    ternary r93 r94 r52 into r96;
    ternary r93 r53 r95 into r97;
    ternary r92 r96 r52 into r98;
    ternary r92 r97 r53 into r99;
    ternary r91 r98 r52 into r100;
    ternary r91 r99 r53 into r101;
    ternary r90 r100 r52 into r102;
    ternary r90 r101 r53 into r103;
    gt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r104;
    ternary r104 r1.answer[3u32].player_id r0.opponent_answer[3u32].player_id into r105;
    ternary r104 r1.answer[3u32].team_id r0.opponent_answer[3u32].team_id into r106;
    ternary r104 r1.answer[3u32].goalkeeper r0.opponent_answer[3u32].goalkeeper into r107;
    ternary r104 r1.answer[3u32].attack r0.opponent_answer[3u32].attack into r108;
    ternary r104 r1.answer[3u32].defense r0.opponent_answer[3u32].defense into r109;
    ternary r104 r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r110;
    ternary r104 r1.answer[3u32].power r0.opponent_answer[3u32].power into r111;
    ternary r104 r1.answer[3u32].stamina r0.opponent_answer[3u32].stamina into r112;
    ternary r104 r1.answer[3u32].technique r0.opponent_answer[3u32].technique into r113;
    ternary r104 r1.answer[3u32].goalkeeping r0.opponent_answer[3u32].goalkeeping into r114;
    cast r105 r106 r107 r108 r109 r110 r111 r112 r113 r114 into r115 as Player;
    gt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r116;
    ternary r116 r0.opponent_answer[3u32].player_id r1.answer[3u32].player_id into r117;
    ternary r116 r0.opponent_answer[3u32].team_id r1.answer[3u32].team_id into r118;
    ternary r116 r0.opponent_answer[3u32].goalkeeper r1.answer[3u32].goalkeeper into r119;
    ternary r116 r0.opponent_answer[3u32].attack r1.answer[3u32].attack into r120;
    ternary r116 r0.opponent_answer[3u32].defense r1.answer[3u32].defense into r121;
    ternary r116 r0.opponent_answer[3u32].speed r1.answer[3u32].speed into r122;
    ternary r116 r0.opponent_answer[3u32].power r1.answer[3u32].power into r123;
    ternary r116 r0.opponent_answer[3u32].stamina r1.answer[3u32].stamina into r124;
    ternary r116 r0.opponent_answer[3u32].technique r1.answer[3u32].technique into r125;
    ternary r116 r0.opponent_answer[3u32].goalkeeping r1.answer[3u32].goalkeeping into r126;
    cast r117 r118 r119 r120 r121 r122 r123 r124 r125 r126 into r127 as Player;
    gt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r128;
    ternary r128 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r129;
    ternary r128 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r130;
    ternary r128 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r131;
    ternary r128 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r132;
    ternary r128 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r133;
    ternary r128 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r134;
    ternary r128 r0.opponent_answer[0u32].power r1.answer[0u32].power into r135;
    ternary r128 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r136;
    ternary r128 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r137;
    ternary r128 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r138;
    cast r129 r130 r131 r132 r133 r134 r135 r136 r137 r138 into r139 as Player;
    gt r115.attack 127u8 into r140;
    lt r127.defense 127u8 into r141;
    lt r139.goalkeeping 127u8 into r142;
    lt r1.answer[3u32].speed r0.opponent_answer[3u32].speed into r143;
    add r102 1u64 into r144;
    add r103 1u64 into r145;
    ternary r143 r144 r102 into r146;
    ternary r143 r103 r145 into r147;
    ternary r142 r146 r102 into r148;
    ternary r142 r147 r103 into r149;
    ternary r141 r148 r102 into r150;
    ternary r141 r149 r103 into r151;
    ternary r140 r150 r102 into r152;
    ternary r140 r151 r103 into r153;
    gt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r154;
    ternary r154 r1.answer[4u32].player_id r0.opponent_answer[4u32].player_id into r155;
    ternary r154 r1.answer[4u32].team_id r0.opponent_answer[4u32].team_id into r156;
    ternary r154 r1.answer[4u32].goalkeeper r0.opponent_answer[4u32].goalkeeper into r157;
    ternary r154 r1.answer[4u32].attack r0.opponent_answer[4u32].attack into r158;
    ternary r154 r1.answer[4u32].defense r0.opponent_answer[4u32].defense into r159;
    ternary r154 r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r160;
    ternary r154 r1.answer[4u32].power r0.opponent_answer[4u32].power into r161;
    ternary r154 r1.answer[4u32].stamina r0.opponent_answer[4u32].stamina into r162;
    ternary r154 r1.answer[4u32].technique r0.opponent_answer[4u32].technique into r163;
    ternary r154 r1.answer[4u32].goalkeeping r0.opponent_answer[4u32].goalkeeping into r164;
    cast r155 r156 r157 r158 r159 r160 r161 r162 r163 r164 into r165 as Player;
    gt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r166;
    ternary r166 r0.opponent_answer[4u32].player_id r1.answer[4u32].player_id into r167;
    ternary r166 r0.opponent_answer[4u32].team_id r1.answer[4u32].team_id into r168;
    ternary r166 r0.opponent_answer[4u32].goalkeeper r1.answer[4u32].goalkeeper into r169;
    ternary r166 r0.opponent_answer[4u32].attack r1.answer[4u32].attack into r170;
    ternary r166 r0.opponent_answer[4u32].defense r1.answer[4u32].defense into r171;
    ternary r166 r0.opponent_answer[4u32].speed r1.answer[4u32].speed into r172;
    ternary r166 r0.opponent_answer[4u32].power r1.answer[4u32].power into r173;
    ternary r166 r0.opponent_answer[4u32].stamina r1.answer[4u32].stamina into r174;
    ternary r166 r0.opponent_answer[4u32].technique r1.answer[4u32].technique into r175;
    ternary r166 r0.opponent_answer[4u32].goalkeeping r1.answer[4u32].goalkeeping into r176;
    cast r167 r168 r169 r170 r171 r172 r173 r174 r175 r176 into r177 as Player;
    gt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r178;
    ternary r178 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r179;
    ternary r178 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r180;
    ternary r178 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r181;
    ternary r178 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r182;
    ternary r178 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r183;
    ternary r178 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r184;
    ternary r178 r0.opponent_answer[0u32].power r1.answer[0u32].power into r185;
    ternary r178 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r186;
    ternary r178 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r187;
    ternary r178 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r188;
    cast r179 r180 r181 r182 r183 r184 r185 r186 r187 r188 into r189 as Player;
    gt r165.attack 127u8 into r190;
    lt r177.defense 127u8 into r191;
    lt r189.goalkeeping 127u8 into r192;
    lt r1.answer[4u32].speed r0.opponent_answer[4u32].speed into r193;
    add r152 1u64 into r194;
    add r153 1u64 into r195;
    ternary r193 r194 r152 into r196;
    ternary r193 r153 r195 into r197;
    ternary r192 r196 r152 into r198;
    ternary r192 r197 r153 into r199;
    ternary r191 r198 r152 into r200;
    ternary r191 r199 r153 into r201;
    ternary r190 r200 r152 into r202;
    ternary r190 r201 r153 into r203;
    gt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r204;
    ternary r204 r1.answer[5u32].player_id r0.opponent_answer[5u32].player_id into r205;
    ternary r204 r1.answer[5u32].team_id r0.opponent_answer[5u32].team_id into r206;
    ternary r204 r1.answer[5u32].goalkeeper r0.opponent_answer[5u32].goalkeeper into r207;
    ternary r204 r1.answer[5u32].attack r0.opponent_answer[5u32].attack into r208;
    ternary r204 r1.answer[5u32].defense r0.opponent_answer[5u32].defense into r209;
    ternary r204 r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r210;
    ternary r204 r1.answer[5u32].power r0.opponent_answer[5u32].power into r211;
    ternary r204 r1.answer[5u32].stamina r0.opponent_answer[5u32].stamina into r212;
    ternary r204 r1.answer[5u32].technique r0.opponent_answer[5u32].technique into r213;
    ternary r204 r1.answer[5u32].goalkeeping r0.opponent_answer[5u32].goalkeeping into r214;
    cast r205 r206 r207 r208 r209 r210 r211 r212 r213 r214 into r215 as Player;
    gt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r216;
    ternary r216 r0.opponent_answer[5u32].player_id r1.answer[5u32].player_id into r217;
    ternary r216 r0.opponent_answer[5u32].team_id r1.answer[5u32].team_id into r218;
    ternary r216 r0.opponent_answer[5u32].goalkeeper r1.answer[5u32].goalkeeper into r219;
    ternary r216 r0.opponent_answer[5u32].attack r1.answer[5u32].attack into r220;
    ternary r216 r0.opponent_answer[5u32].defense r1.answer[5u32].defense into r221;
    ternary r216 r0.opponent_answer[5u32].speed r1.answer[5u32].speed into r222;
    ternary r216 r0.opponent_answer[5u32].power r1.answer[5u32].power into r223;
    ternary r216 r0.opponent_answer[5u32].stamina r1.answer[5u32].stamina into r224;
    ternary r216 r0.opponent_answer[5u32].technique r1.answer[5u32].technique into r225;
    ternary r216 r0.opponent_answer[5u32].goalkeeping r1.answer[5u32].goalkeeping into r226;
    cast r217 r218 r219 r220 r221 r222 r223 r224 r225 r226 into r227 as Player;
    gt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r228;
    ternary r228 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r229;
    ternary r228 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r230;
    ternary r228 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r231;
    ternary r228 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r232;
    ternary r228 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r233;
    ternary r228 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r234;
    ternary r228 r0.opponent_answer[0u32].power r1.answer[0u32].power into r235;
    ternary r228 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r236;
    ternary r228 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r237;
    ternary r228 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r238;
    cast r229 r230 r231 r232 r233 r234 r235 r236 r237 r238 into r239 as Player;
    gt r215.attack 127u8 into r240;
    lt r227.defense 127u8 into r241;
    lt r239.goalkeeping 127u8 into r242;
    lt r1.answer[5u32].speed r0.opponent_answer[5u32].speed into r243;
    add r202 1u64 into r244;
    add r203 1u64 into r245;
    ternary r243 r244 r202 into r246;
    ternary r243 r203 r245 into r247;
    ternary r242 r246 r202 into r248;
    ternary r242 r247 r203 into r249;
    ternary r241 r248 r202 into r250;
    ternary r241 r249 r203 into r251;
    ternary r240 r250 r202 into r252;
    ternary r240 r251 r203 into r253;
    gt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r254;
    ternary r254 r1.answer[6u32].player_id r0.opponent_answer[6u32].player_id into r255;
    ternary r254 r1.answer[6u32].team_id r0.opponent_answer[6u32].team_id into r256;
    ternary r254 r1.answer[6u32].goalkeeper r0.opponent_answer[6u32].goalkeeper into r257;
    ternary r254 r1.answer[6u32].attack r0.opponent_answer[6u32].attack into r258;
    ternary r254 r1.answer[6u32].defense r0.opponent_answer[6u32].defense into r259;
    ternary r254 r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r260;
    ternary r254 r1.answer[6u32].power r0.opponent_answer[6u32].power into r261;
    ternary r254 r1.answer[6u32].stamina r0.opponent_answer[6u32].stamina into r262;
    ternary r254 r1.answer[6u32].technique r0.opponent_answer[6u32].technique into r263;
    ternary r254 r1.answer[6u32].goalkeeping r0.opponent_answer[6u32].goalkeeping into r264;
    cast r255 r256 r257 r258 r259 r260 r261 r262 r263 r264 into r265 as Player;
    gt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r266;
    ternary r266 r0.opponent_answer[6u32].player_id r1.answer[6u32].player_id into r267;
    ternary r266 r0.opponent_answer[6u32].team_id r1.answer[6u32].team_id into r268;
    ternary r266 r0.opponent_answer[6u32].goalkeeper r1.answer[6u32].goalkeeper into r269;
    ternary r266 r0.opponent_answer[6u32].attack r1.answer[6u32].attack into r270;
    ternary r266 r0.opponent_answer[6u32].defense r1.answer[6u32].defense into r271;
    ternary r266 r0.opponent_answer[6u32].speed r1.answer[6u32].speed into r272;
    ternary r266 r0.opponent_answer[6u32].power r1.answer[6u32].power into r273;
    ternary r266 r0.opponent_answer[6u32].stamina r1.answer[6u32].stamina into r274;
    ternary r266 r0.opponent_answer[6u32].technique r1.answer[6u32].technique into r275;
    ternary r266 r0.opponent_answer[6u32].goalkeeping r1.answer[6u32].goalkeeping into r276;
    cast r267 r268 r269 r270 r271 r272 r273 r274 r275 r276 into r277 as Player;
    gt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r278;
    ternary r278 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r279;
    ternary r278 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r280;
    ternary r278 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r281;
    ternary r278 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r282;
    ternary r278 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r283;
    ternary r278 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r284;
    ternary r278 r0.opponent_answer[0u32].power r1.answer[0u32].power into r285;
    ternary r278 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r286;
    ternary r278 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r287;
    ternary r278 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r288;
    cast r279 r280 r281 r282 r283 r284 r285 r286 r287 r288 into r289 as Player;
    gt r265.attack 127u8 into r290;
    lt r277.defense 127u8 into r291;
    lt r289.goalkeeping 127u8 into r292;
    lt r1.answer[6u32].speed r0.opponent_answer[6u32].speed into r293;
    add r252 1u64 into r294;
    add r253 1u64 into r295;
    ternary r293 r294 r252 into r296;
    ternary r293 r253 r295 into r297;
    ternary r292 r296 r252 into r298;
    ternary r292 r297 r253 into r299;
    ternary r291 r298 r252 into r300;
    ternary r291 r299 r253 into r301;
    ternary r290 r300 r252 into r302;
    ternary r290 r301 r253 into r303;
    gt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r304;
    ternary r304 r1.answer[7u32].player_id r0.opponent_answer[7u32].player_id into r305;
    ternary r304 r1.answer[7u32].team_id r0.opponent_answer[7u32].team_id into r306;
    ternary r304 r1.answer[7u32].goalkeeper r0.opponent_answer[7u32].goalkeeper into r307;
    ternary r304 r1.answer[7u32].attack r0.opponent_answer[7u32].attack into r308;
    ternary r304 r1.answer[7u32].defense r0.opponent_answer[7u32].defense into r309;
    ternary r304 r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r310;
    ternary r304 r1.answer[7u32].power r0.opponent_answer[7u32].power into r311;
    ternary r304 r1.answer[7u32].stamina r0.opponent_answer[7u32].stamina into r312;
    ternary r304 r1.answer[7u32].technique r0.opponent_answer[7u32].technique into r313;
    ternary r304 r1.answer[7u32].goalkeeping r0.opponent_answer[7u32].goalkeeping into r314;
    cast r305 r306 r307 r308 r309 r310 r311 r312 r313 r314 into r315 as Player;
    gt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r316;
    ternary r316 r0.opponent_answer[7u32].player_id r1.answer[7u32].player_id into r317;
    ternary r316 r0.opponent_answer[7u32].team_id r1.answer[7u32].team_id into r318;
    ternary r316 r0.opponent_answer[7u32].goalkeeper r1.answer[7u32].goalkeeper into r319;
    ternary r316 r0.opponent_answer[7u32].attack r1.answer[7u32].attack into r320;
    ternary r316 r0.opponent_answer[7u32].defense r1.answer[7u32].defense into r321;
    ternary r316 r0.opponent_answer[7u32].speed r1.answer[7u32].speed into r322;
    ternary r316 r0.opponent_answer[7u32].power r1.answer[7u32].power into r323;
    ternary r316 r0.opponent_answer[7u32].stamina r1.answer[7u32].stamina into r324;
    ternary r316 r0.opponent_answer[7u32].technique r1.answer[7u32].technique into r325;
    ternary r316 r0.opponent_answer[7u32].goalkeeping r1.answer[7u32].goalkeeping into r326;
    cast r317 r318 r319 r320 r321 r322 r323 r324 r325 r326 into r327 as Player;
    gt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r328;
    ternary r328 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r329;
    ternary r328 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r330;
    ternary r328 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r331;
    ternary r328 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r332;
    ternary r328 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r333;
    ternary r328 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r334;
    ternary r328 r0.opponent_answer[0u32].power r1.answer[0u32].power into r335;
    ternary r328 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r336;
    ternary r328 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r337;
    ternary r328 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r338;
    cast r329 r330 r331 r332 r333 r334 r335 r336 r337 r338 into r339 as Player;
    gt r315.attack 127u8 into r340;
    lt r327.defense 127u8 into r341;
    lt r339.goalkeeping 127u8 into r342;
    lt r1.answer[7u32].speed r0.opponent_answer[7u32].speed into r343;
    add r302 1u64 into r344;
    add r303 1u64 into r345;
    ternary r343 r344 r302 into r346;
    ternary r343 r303 r345 into r347;
    ternary r342 r346 r302 into r348;
    ternary r342 r347 r303 into r349;
    ternary r341 r348 r302 into r350;
    ternary r341 r349 r303 into r351;
    ternary r340 r350 r302 into r352;
    ternary r340 r351 r303 into r353;
    gt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r354;
    ternary r354 r1.answer[8u32].player_id r0.opponent_answer[8u32].player_id into r355;
    ternary r354 r1.answer[8u32].team_id r0.opponent_answer[8u32].team_id into r356;
    ternary r354 r1.answer[8u32].goalkeeper r0.opponent_answer[8u32].goalkeeper into r357;
    ternary r354 r1.answer[8u32].attack r0.opponent_answer[8u32].attack into r358;
    ternary r354 r1.answer[8u32].defense r0.opponent_answer[8u32].defense into r359;
    ternary r354 r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r360;
    ternary r354 r1.answer[8u32].power r0.opponent_answer[8u32].power into r361;
    ternary r354 r1.answer[8u32].stamina r0.opponent_answer[8u32].stamina into r362;
    ternary r354 r1.answer[8u32].technique r0.opponent_answer[8u32].technique into r363;
    ternary r354 r1.answer[8u32].goalkeeping r0.opponent_answer[8u32].goalkeeping into r364;
    cast r355 r356 r357 r358 r359 r360 r361 r362 r363 r364 into r365 as Player;
    gt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r366;
    ternary r366 r0.opponent_answer[8u32].player_id r1.answer[8u32].player_id into r367;
    ternary r366 r0.opponent_answer[8u32].team_id r1.answer[8u32].team_id into r368;
    ternary r366 r0.opponent_answer[8u32].goalkeeper r1.answer[8u32].goalkeeper into r369;
    ternary r366 r0.opponent_answer[8u32].attack r1.answer[8u32].attack into r370;
    ternary r366 r0.opponent_answer[8u32].defense r1.answer[8u32].defense into r371;
    ternary r366 r0.opponent_answer[8u32].speed r1.answer[8u32].speed into r372;
    ternary r366 r0.opponent_answer[8u32].power r1.answer[8u32].power into r373;
    ternary r366 r0.opponent_answer[8u32].stamina r1.answer[8u32].stamina into r374;
    ternary r366 r0.opponent_answer[8u32].technique r1.answer[8u32].technique into r375;
    ternary r366 r0.opponent_answer[8u32].goalkeeping r1.answer[8u32].goalkeeping into r376;
    cast r367 r368 r369 r370 r371 r372 r373 r374 r375 r376 into r377 as Player;
    gt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r378;
    ternary r378 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r379;
    ternary r378 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r380;
    ternary r378 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r381;
    ternary r378 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r382;
    ternary r378 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r383;
    ternary r378 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r384;
    ternary r378 r0.opponent_answer[0u32].power r1.answer[0u32].power into r385;
    ternary r378 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r386;
    ternary r378 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r387;
    ternary r378 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r388;
    cast r379 r380 r381 r382 r383 r384 r385 r386 r387 r388 into r389 as Player;
    gt r365.attack 127u8 into r390;
    lt r377.defense 127u8 into r391;
    lt r389.goalkeeping 127u8 into r392;
    lt r1.answer[8u32].speed r0.opponent_answer[8u32].speed into r393;
    add r352 1u64 into r394;
    add r353 1u64 into r395;
    ternary r393 r394 r352 into r396;
    ternary r393 r353 r395 into r397;
    ternary r392 r396 r352 into r398;
    ternary r392 r397 r353 into r399;
    ternary r391 r398 r352 into r400;
    ternary r391 r399 r353 into r401;
    ternary r390 r400 r352 into r402;
    ternary r390 r401 r353 into r403;
    gt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r404;
    ternary r404 r1.answer[9u32].player_id r0.opponent_answer[9u32].player_id into r405;
    ternary r404 r1.answer[9u32].team_id r0.opponent_answer[9u32].team_id into r406;
    ternary r404 r1.answer[9u32].goalkeeper r0.opponent_answer[9u32].goalkeeper into r407;
    ternary r404 r1.answer[9u32].attack r0.opponent_answer[9u32].attack into r408;
    ternary r404 r1.answer[9u32].defense r0.opponent_answer[9u32].defense into r409;
    ternary r404 r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r410;
    ternary r404 r1.answer[9u32].power r0.opponent_answer[9u32].power into r411;
    ternary r404 r1.answer[9u32].stamina r0.opponent_answer[9u32].stamina into r412;
    ternary r404 r1.answer[9u32].technique r0.opponent_answer[9u32].technique into r413;
    ternary r404 r1.answer[9u32].goalkeeping r0.opponent_answer[9u32].goalkeeping into r414;
    cast r405 r406 r407 r408 r409 r410 r411 r412 r413 r414 into r415 as Player;
    gt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r416;
    ternary r416 r0.opponent_answer[9u32].player_id r1.answer[9u32].player_id into r417;
    ternary r416 r0.opponent_answer[9u32].team_id r1.answer[9u32].team_id into r418;
    ternary r416 r0.opponent_answer[9u32].goalkeeper r1.answer[9u32].goalkeeper into r419;
    ternary r416 r0.opponent_answer[9u32].attack r1.answer[9u32].attack into r420;
    ternary r416 r0.opponent_answer[9u32].defense r1.answer[9u32].defense into r421;
    ternary r416 r0.opponent_answer[9u32].speed r1.answer[9u32].speed into r422;
    ternary r416 r0.opponent_answer[9u32].power r1.answer[9u32].power into r423;
    ternary r416 r0.opponent_answer[9u32].stamina r1.answer[9u32].stamina into r424;
    ternary r416 r0.opponent_answer[9u32].technique r1.answer[9u32].technique into r425;
    ternary r416 r0.opponent_answer[9u32].goalkeeping r1.answer[9u32].goalkeeping into r426;
    cast r417 r418 r419 r420 r421 r422 r423 r424 r425 r426 into r427 as Player;
    gt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r428;
    ternary r428 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r429;
    ternary r428 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r430;
    ternary r428 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r431;
    ternary r428 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r432;
    ternary r428 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r433;
    ternary r428 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r434;
    ternary r428 r0.opponent_answer[0u32].power r1.answer[0u32].power into r435;
    ternary r428 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r436;
    ternary r428 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r437;
    ternary r428 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r438;
    cast r429 r430 r431 r432 r433 r434 r435 r436 r437 r438 into r439 as Player;
    gt r415.attack 127u8 into r440;
    lt r427.defense 127u8 into r441;
    lt r439.goalkeeping 127u8 into r442;
    lt r1.answer[9u32].speed r0.opponent_answer[9u32].speed into r443;
    add r402 1u64 into r444;
    add r403 1u64 into r445;
    ternary r443 r444 r402 into r446;
    ternary r443 r403 r445 into r447;
    ternary r442 r446 r402 into r448;
    ternary r442 r447 r403 into r449;
    ternary r441 r448 r402 into r450;
    ternary r441 r449 r403 into r451;
    ternary r440 r450 r402 into r452;
    ternary r440 r451 r403 into r453;
    gt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r454;
    ternary r454 r1.answer[10u32].player_id r0.opponent_answer[10u32].player_id into r455;
    ternary r454 r1.answer[10u32].team_id r0.opponent_answer[10u32].team_id into r456;
    ternary r454 r1.answer[10u32].goalkeeper r0.opponent_answer[10u32].goalkeeper into r457;
    ternary r454 r1.answer[10u32].attack r0.opponent_answer[10u32].attack into r458;
    ternary r454 r1.answer[10u32].defense r0.opponent_answer[10u32].defense into r459;
    ternary r454 r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r460;
    ternary r454 r1.answer[10u32].power r0.opponent_answer[10u32].power into r461;
    ternary r454 r1.answer[10u32].stamina r0.opponent_answer[10u32].stamina into r462;
    ternary r454 r1.answer[10u32].technique r0.opponent_answer[10u32].technique into r463;
    ternary r454 r1.answer[10u32].goalkeeping r0.opponent_answer[10u32].goalkeeping into r464;
    cast r455 r456 r457 r458 r459 r460 r461 r462 r463 r464 into r465 as Player;
    gt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r466;
    ternary r466 r0.opponent_answer[10u32].player_id r1.answer[10u32].player_id into r467;
    ternary r466 r0.opponent_answer[10u32].team_id r1.answer[10u32].team_id into r468;
    ternary r466 r0.opponent_answer[10u32].goalkeeper r1.answer[10u32].goalkeeper into r469;
    ternary r466 r0.opponent_answer[10u32].attack r1.answer[10u32].attack into r470;
    ternary r466 r0.opponent_answer[10u32].defense r1.answer[10u32].defense into r471;
    ternary r466 r0.opponent_answer[10u32].speed r1.answer[10u32].speed into r472;
    ternary r466 r0.opponent_answer[10u32].power r1.answer[10u32].power into r473;
    ternary r466 r0.opponent_answer[10u32].stamina r1.answer[10u32].stamina into r474;
    ternary r466 r0.opponent_answer[10u32].technique r1.answer[10u32].technique into r475;
    ternary r466 r0.opponent_answer[10u32].goalkeeping r1.answer[10u32].goalkeeping into r476;
    cast r467 r468 r469 r470 r471 r472 r473 r474 r475 r476 into r477 as Player;
    gt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r478;
    ternary r478 r0.opponent_answer[0u32].player_id r1.answer[0u32].player_id into r479;
    ternary r478 r0.opponent_answer[0u32].team_id r1.answer[0u32].team_id into r480;
    ternary r478 r0.opponent_answer[0u32].goalkeeper r1.answer[0u32].goalkeeper into r481;
    ternary r478 r0.opponent_answer[0u32].attack r1.answer[0u32].attack into r482;
    ternary r478 r0.opponent_answer[0u32].defense r1.answer[0u32].defense into r483;
    ternary r478 r0.opponent_answer[0u32].speed r1.answer[0u32].speed into r484;
    ternary r478 r0.opponent_answer[0u32].power r1.answer[0u32].power into r485;
    ternary r478 r0.opponent_answer[0u32].stamina r1.answer[0u32].stamina into r486;
    ternary r478 r0.opponent_answer[0u32].technique r1.answer[0u32].technique into r487;
    ternary r478 r0.opponent_answer[0u32].goalkeeping r1.answer[0u32].goalkeeping into r488;
    cast r479 r480 r481 r482 r483 r484 r485 r486 r487 r488 into r489 as Player;
    gt r465.attack 127u8 into r490;
    lt r477.defense 127u8 into r491;
    lt r489.goalkeeping 127u8 into r492;
    lt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r493;
    add r452 1u64 into r494;
    add r453 1u64 into r495;
    ternary r493 r494 r452 into r496;
    ternary r493 r453 r495 into r497;
    ternary r492 r496 r452 into r498;
    ternary r492 r497 r453 into r499;
    ternary r491 r498 r452 into r500;
    ternary r491 r499 r453 into r501;
    ternary r490 r500 r452 into r502;
    ternary r490 r501 r453 into r503;
    lt r1.answer[10u32].speed r0.opponent_answer[10u32].speed into r504;
    add r502 1u64 into r505;
    add r503 1u64 into r506;
    ternary r504 r505 r502 into r507;
    ternary r504 r503 r506 into r508;
    gt r508 r507 into r509;
    ternary r509 r1.challenger_address r1.opponent_address into r510;
    gt r508 r507 into r511;
    ternary r511 r1.opponent_address r1.challenger_address into r512;
    assert.eq r1.owner r1.challenger_address ;
    cast r1.message_1 r1.message_2 r1.message_3 r1.message_4 r1.message_5 into r513 as Mssage;
    sign.verify r3.sig r1.challenger_address r513 into r514;
    assert.eq true r514 ;
    cast r1.game_multisig r1.challenger_address r1.opponent_address r1.game_multisig r1.amount r1.nonce r1.answer r3.sig 3u32 into r515 as RevealAnswer.record;
    cast aleo16hf8hfpwasnn9cf7k2c0dllc56nn7qt547qxgvgwu6pznw4trvqsx68kls r1.challenger_address r1.opponent_address r1.game_multisig r1.amount r1.nonce r1.answer r3.sig 4u32 into r516 as AuditRevealAnswer.record;
    call puzzle_pieces_v015.aleo/joint_stake_state_update r2 r3 r510 into r517 r518;
    cast r1.opponent_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r510 r512 r508 r507 9u32 into r519 as GameFinishReqNotification.record;
    cast r1.challenger_address r1.game_multisig 4field true r2.amount r1.challenger_address r1.opponent_address r1.answer r0.opponent_answer r510 r512 r508 r507 9u32 into r520 as GameFinishReqNotification.record;
    output r515 as RevealAnswer.record;
    output r516 as AuditRevealAnswer.record;
    output r517 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    output r518 as puzzle_pieces_v015.aleo/AuditJointPieceWinner.record;
    output r519 as GameFinishReqNotification.record;
    output r520 as GameFinishReqNotification.record;

function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    is.eq r1.winner r0.challenger_address into r4;
    ternary r4 r0.opponent_address r0.challenger_address into r5;
    call puzzle_pieces_v015.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r6 r7 r8;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r9 as Game.record;
    cast r0.challenger_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r10 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 5field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r5 10u32 into r11 as GameFinishedNotification.record;
    output r6 as puzzle_pieces_v015.aleo/Piece.record;
    output r7 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r8 as puzzle_pieces_v015.aleo/AuditPieceOwner.record;
    output r9 as Game.record;
    output r10 as GameFinishedNotification.record;
    output r11 as GameFinishedNotification.record;

function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v015.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v015.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    cast r0.owner r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r5 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r6 as GameFinishedNotification.record;
    call puzzle_pieces_v015.aleo/joint_timeout_to_opponent r1 r2 r3 into r7 r8;
    async finish_game_by_timeout r2.block_ht into r9;
    output r7 as puzzle_pieces_v015.aleo/Piece.record;
    output r8 as puzzle_pieces_v015.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r5 as GameFinishedNotification.record;
    output r6 as GameFinishedNotification.record;
    output r9 as football_game_v002.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true ;
