import puzzle_pieces_v016.aleo;
import multiparty_pvp_utils_v015_avh.aleo;
import football_leaderboard_v003.aleo;

program football_game_v006.aleo;

struct GameOutcome:
    goals_home as u64;
    goals_away as u64;

struct Player:
    player_id as u8;
    team_id as u8;
    position as field;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct GameResult:
    goals_home as u64;
    goals_away as u64;

record Game:
    owner as address.private;
    uuid as field.private;
    challenger_commit as field.private;
    opponent_answer as [u8; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record CalculatedOutcomeNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    result_mapping_uuid as field.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [u8; 11u32].private;
    game_uuid as field.private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [u8; 11u32].private;
    opponent_answer as [u8; 11u32].private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

mapping game_outcomes:
    key as field.public;
    value as GameOutcome.public;

mapping players:
    key as u8.public;
    value as Player.public;

function main:
    input r0 as boolean.private;

function add_player:
    input r0 as Player.private;
    assert.eq self.caller self.signer ;
    async add_player r0 into r1;
    output r1 as football_game_v006.aleo/add_player.future;

finalize add_player:
    input r0 as Player.public;
    is.eq r0.player_id 0u8 into r1;
    cast 0u8 0u8 0field 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r2 as Player;
    set r2 into players[r0.player_id];
    is.eq r0.position 1field into r3;
    is.eq r0.position 2field into r4;
    or r3 r4 into r5;
    is.eq r0.position 3field into r6;
    or r5 r6 into r7;
    is.eq r0.position 4field into r8;
    or r7 r8 into r9;
    not r1 into r10;
    not r10 into r11;
    or r11 r9 into r12;
    assert.eq r12 true ;
    set r0 into players[r0.player_id];

closure test:
    input r0 as address;
    cast r0 into r1 as field;

function propose_game:
    input r0 as puzzle_pieces_v016.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [u8; 11u32].private;
    input r14 as field.private;
    input r15 as field.private;
    assert.eq self.caller self.signer ;
    assert.neq r5 r4 ;
    cast r12 into r16 as scalar;
    commit.bhp256 r13 r16 into r17 as field;
    gt r1 0u64 into r18;
    assert.eq r18 true ;
    gte r0.amount r1 into r19;
    assert.eq r19 true ;
    call puzzle_pieces_v016.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r20 r21 r22 r23 r24;
    call multiparty_pvp_utils_v015_avh.aleo/mint_multisig_key r14 r1 r3 r4 r5 into r25 r26;
    add r1 r1 into r27;
    cast r4 r5 1field true r27 r3 r4 2u32 into r28 as GameReqNotification.record;
    add r1 r1 into r29;
    cast r3 r5 1field false r29 r3 r4 3u32 into r30 as WaitingAcceptanceNotification.record;
    cast 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r31 as [u8; 11u32];
    add r1 r1 into r32;
    cast r5 r15 r17 r31 r32 r3 r4 r5 1field 1u32 into r33 as Game.record;
    call multiparty_pvp_utils_v015_avh.aleo/mint_answer r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 r11 into r34 r35;
    async propose_game r13 into r36;
    output r20 as puzzle_pieces_v016.aleo/PieceClaim.record;
    output r21 as puzzle_pieces_v016.aleo/PieceStake.record;
    output r22 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    output r23 as puzzle_pieces_v016.aleo/Piece.record;
    output r24 as puzzle_pieces_v016.aleo/AuditStakeIn.record;
    output r34 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r35 as multiparty_pvp_utils_v015_avh.aleo/AuditMintAnswer.record;
    output r25 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    output r26 as multiparty_pvp_utils_v015_avh.aleo/AuditKey.record;
    output r33 as Game.record;
    output r28 as GameReqNotification.record;
    output r30 as WaitingAcceptanceNotification.record;
    output r36 as football_game_v006.aleo/propose_game.future;

finalize propose_game:
    input r0 as [u8; 11u32].public;
    get players[r0[0u32]] into r1;

function challenger_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v016.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.challenger_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v016.aleo/Piece.record;
    output r5 as puzzle_pieces_v016.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function submit_wager:
    input r0 as puzzle_pieces_v016.aleo/Piece.record;
    input r1 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer ;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true ;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true ;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v016.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v016.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v016.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v016.aleo/Piece.record;
    output r17 as puzzle_pieces_v016.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;

function opponent_renege_stake:
    input r0 as WaitingAcceptanceNotification.record;
    input r1 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r2 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r3 as signature.private;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v016.aleo/stake_transfer_out r1 r2 r3 into r4 r5;
    cast r0.challenger_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r6 as StakeRenegedNotification.record;
    cast r0.opponent_address r0.game_multisig 0field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address 4u32 into r7 as StakeRenegedNotification.record;
    output r4 as puzzle_pieces_v016.aleo/Piece.record;
    output r5 as puzzle_pieces_v016.aleo/AuditStakeOut.record;
    output r6 as StakeRenegedNotification.record;
    output r7 as StakeRenegedNotification.record;

function accept_game:
    input r0 as Game.record;
    input r1 as [u8; 11u32].private;
    input r2 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v016.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 r0.uuid 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.uuid r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 r1 into r14;
    output r7 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v016.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v016.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v006.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    input r1 as [u8; 11u32].public;
    get players[r1[0u32]] into r2;
    get players[r1[0u32]] into r3;
    is.eq r3.position 1field into r4;
    add 0u8 1u8 into r5;
    ternary r4 r5 0u8 into r6;
    assert.eq r3.team_id r2.team_id ;
    get players[r1[0u32]] into r7;
    is.eq r7.position 1field into r8;
    add r6 1u8 into r9;
    ternary r8 r9 r6 into r10;
    assert.eq r7.team_id r2.team_id ;
    get players[r1[0u32]] into r11;
    is.eq r11.position 1field into r12;
    add r10 1u8 into r13;
    ternary r12 r13 r10 into r14;
    assert.eq r11.team_id r2.team_id ;
    get players[r1[0u32]] into r15;
    is.eq r15.position 1field into r16;
    add r14 1u8 into r17;
    ternary r16 r17 r14 into r18;
    assert.eq r15.team_id r2.team_id ;
    get players[r1[0u32]] into r19;
    is.eq r19.position 1field into r20;
    add r18 1u8 into r21;
    ternary r20 r21 r18 into r22;
    assert.eq r19.team_id r2.team_id ;
    get players[r1[0u32]] into r23;
    is.eq r23.position 1field into r24;
    add r22 1u8 into r25;
    ternary r24 r25 r22 into r26;
    assert.eq r23.team_id r2.team_id ;
    get players[r1[0u32]] into r27;
    is.eq r27.position 1field into r28;
    add r26 1u8 into r29;
    ternary r28 r29 r26 into r30;
    assert.eq r27.team_id r2.team_id ;
    get players[r1[0u32]] into r31;
    is.eq r31.position 1field into r32;
    add r30 1u8 into r33;
    ternary r32 r33 r30 into r34;
    assert.eq r31.team_id r2.team_id ;
    get players[r1[0u32]] into r35;
    is.eq r35.position 1field into r36;
    add r34 1u8 into r37;
    ternary r36 r37 r34 into r38;
    assert.eq r35.team_id r2.team_id ;
    get players[r1[0u32]] into r39;
    is.eq r39.position 1field into r40;
    add r38 1u8 into r41;
    ternary r40 r41 r38 into r42;
    assert.eq r39.team_id r2.team_id ;
    assert.eq r42 1u8 ;
    sub block.height 1000u32 into r43;
    gte r0 r43 into r44;
    assert.eq r44 true ;
    add block.height 1000u32 into r45;
    lte r0 r45 into r46;
    assert.eq r46 true ;

function calculate_outcome:
    input r0 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    input r1 as RevealAnswerNotification.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceState.record;
    input r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    call multiparty_pvp_utils_v015_avh.aleo/reveal_answer r3 r0.sig into r4 r5;
    cast r1.challenger_address r1.game_multisig 4field true r1.total_pot r1.challenger_address r1.opponent_address r1.game_uuid 8u32 into r6 as CalculatedOutcomeNotification.record;
    async calculate_outcome r1.game_uuid r1.opponent_answer r3.answer into r7;
    output r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r2 as puzzle_pieces_v016.aleo/JointPieceState.record;
    output r7 as football_game_v006.aleo/calculate_outcome.future;

finalize calculate_outcome:
    input r0 as field.public;
    input r1 as [u8; 11u32].public;
    input r2 as [u8; 11u32].public;
    get players[r1[10u32]] into r3;
    get players[r2[10u32]] into r4;
    get players[r1[1u32]] into r5;
    get players[r2[1u32]] into r6;
    gt r5.speed r6.speed into r7;
    ternary r7 r5.player_id r6.player_id into r8;
    ternary r7 r5.team_id r6.team_id into r9;
    ternary r7 r5.position r6.position into r10;
    ternary r7 r5.attack r6.attack into r11;
    ternary r7 r5.defense r6.defense into r12;
    ternary r7 r5.speed r6.speed into r13;
    ternary r7 r5.power r6.power into r14;
    ternary r7 r5.stamina r6.stamina into r15;
    ternary r7 r5.technique r6.technique into r16;
    ternary r7 r5.goalkeeping r6.goalkeeping into r17;
    cast r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 into r18 as Player;
    gt r5.speed r6.speed into r19;
    ternary r19 r6.player_id r5.player_id into r20;
    ternary r19 r6.team_id r5.team_id into r21;
    ternary r19 r6.position r5.position into r22;
    ternary r19 r6.attack r5.attack into r23;
    ternary r19 r6.defense r5.defense into r24;
    ternary r19 r6.speed r5.speed into r25;
    ternary r19 r6.power r5.power into r26;
    ternary r19 r6.stamina r5.stamina into r27;
    ternary r19 r6.technique r5.technique into r28;
    ternary r19 r6.goalkeeping r5.goalkeeping into r29;
    cast r20 r21 r22 r23 r24 r25 r26 r27 r28 r29 into r30 as Player;
    gt r5.speed r6.speed into r31;
    get players[r2[0u32]] into r32;
    get players[r1[0u32]] into r33;
    ternary r31 r32.player_id r33.player_id into r34;
    ternary r31 r32.team_id r33.team_id into r35;
    ternary r31 r32.position r33.position into r36;
    ternary r31 r32.attack r33.attack into r37;
    ternary r31 r32.defense r33.defense into r38;
    ternary r31 r32.speed r33.speed into r39;
    ternary r31 r32.power r33.power into r40;
    ternary r31 r32.stamina r33.stamina into r41;
    ternary r31 r32.technique r33.technique into r42;
    ternary r31 r32.goalkeeping r33.goalkeeping into r43;
    cast r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 into r44 as Player;
    rand.chacha into r45 as u8;
    gt r18.attack r45 into r46;
    rand.chacha into r47 as u8;
    lt r30.defense r47 into r48;
    rand.chacha into r49 as u8;
    lt r44.goalkeeping r49 into r50;
    lt r5.speed r6.speed into r51;
    add 0u64 1u64 into r52;
    add 0u64 1u64 into r53;
    ternary r51 r52 0u64 into r54;
    ternary r51 0u64 r53 into r55;
    ternary r50 r54 0u64 into r56;
    ternary r50 r55 0u64 into r57;
    ternary r48 r56 0u64 into r58;
    ternary r48 r57 0u64 into r59;
    ternary r46 r58 0u64 into r60;
    ternary r46 r59 0u64 into r61;
    get players[r1[2u32]] into r62;
    get players[r2[2u32]] into r63;
    gt r62.speed r63.speed into r64;
    ternary r64 r62.player_id r63.player_id into r65;
    ternary r64 r62.team_id r63.team_id into r66;
    ternary r64 r62.position r63.position into r67;
    ternary r64 r62.attack r63.attack into r68;
    ternary r64 r62.defense r63.defense into r69;
    ternary r64 r62.speed r63.speed into r70;
    ternary r64 r62.power r63.power into r71;
    ternary r64 r62.stamina r63.stamina into r72;
    ternary r64 r62.technique r63.technique into r73;
    ternary r64 r62.goalkeeping r63.goalkeeping into r74;
    cast r65 r66 r67 r68 r69 r70 r71 r72 r73 r74 into r75 as Player;
    gt r62.speed r63.speed into r76;
    ternary r76 r63.player_id r62.player_id into r77;
    ternary r76 r63.team_id r62.team_id into r78;
    ternary r76 r63.position r62.position into r79;
    ternary r76 r63.attack r62.attack into r80;
    ternary r76 r63.defense r62.defense into r81;
    ternary r76 r63.speed r62.speed into r82;
    ternary r76 r63.power r62.power into r83;
    ternary r76 r63.stamina r62.stamina into r84;
    ternary r76 r63.technique r62.technique into r85;
    ternary r76 r63.goalkeeping r62.goalkeeping into r86;
    cast r77 r78 r79 r80 r81 r82 r83 r84 r85 r86 into r87 as Player;
    gt r62.speed r63.speed into r88;
    get players[r2[0u32]] into r89;
    get players[r1[0u32]] into r90;
    ternary r88 r89.player_id r90.player_id into r91;
    ternary r88 r89.team_id r90.team_id into r92;
    ternary r88 r89.position r90.position into r93;
    ternary r88 r89.attack r90.attack into r94;
    ternary r88 r89.defense r90.defense into r95;
    ternary r88 r89.speed r90.speed into r96;
    ternary r88 r89.power r90.power into r97;
    ternary r88 r89.stamina r90.stamina into r98;
    ternary r88 r89.technique r90.technique into r99;
    ternary r88 r89.goalkeeping r90.goalkeeping into r100;
    cast r91 r92 r93 r94 r95 r96 r97 r98 r99 r100 into r101 as Player;
    rand.chacha into r102 as u8;
    gt r75.attack r102 into r103;
    rand.chacha into r104 as u8;
    lt r87.defense r104 into r105;
    rand.chacha into r106 as u8;
    lt r101.goalkeeping r106 into r107;
    lt r62.speed r63.speed into r108;
    add r60 1u64 into r109;
    add r61 1u64 into r110;
    ternary r108 r109 r60 into r111;
    ternary r108 r61 r110 into r112;
    ternary r107 r111 r60 into r113;
    ternary r107 r112 r61 into r114;
    ternary r105 r113 r60 into r115;
    ternary r105 r114 r61 into r116;
    ternary r103 r115 r60 into r117;
    ternary r103 r116 r61 into r118;
    get players[r1[3u32]] into r119;
    get players[r2[3u32]] into r120;
    gt r119.speed r120.speed into r121;
    ternary r121 r119.player_id r120.player_id into r122;
    ternary r121 r119.team_id r120.team_id into r123;
    ternary r121 r119.position r120.position into r124;
    ternary r121 r119.attack r120.attack into r125;
    ternary r121 r119.defense r120.defense into r126;
    ternary r121 r119.speed r120.speed into r127;
    ternary r121 r119.power r120.power into r128;
    ternary r121 r119.stamina r120.stamina into r129;
    ternary r121 r119.technique r120.technique into r130;
    ternary r121 r119.goalkeeping r120.goalkeeping into r131;
    cast r122 r123 r124 r125 r126 r127 r128 r129 r130 r131 into r132 as Player;
    gt r119.speed r120.speed into r133;
    ternary r133 r120.player_id r119.player_id into r134;
    ternary r133 r120.team_id r119.team_id into r135;
    ternary r133 r120.position r119.position into r136;
    ternary r133 r120.attack r119.attack into r137;
    ternary r133 r120.defense r119.defense into r138;
    ternary r133 r120.speed r119.speed into r139;
    ternary r133 r120.power r119.power into r140;
    ternary r133 r120.stamina r119.stamina into r141;
    ternary r133 r120.technique r119.technique into r142;
    ternary r133 r120.goalkeeping r119.goalkeeping into r143;
    cast r134 r135 r136 r137 r138 r139 r140 r141 r142 r143 into r144 as Player;
    gt r119.speed r120.speed into r145;
    get players[r2[0u32]] into r146;
    get players[r1[0u32]] into r147;
    ternary r145 r146.player_id r147.player_id into r148;
    ternary r145 r146.team_id r147.team_id into r149;
    ternary r145 r146.position r147.position into r150;
    ternary r145 r146.attack r147.attack into r151;
    ternary r145 r146.defense r147.defense into r152;
    ternary r145 r146.speed r147.speed into r153;
    ternary r145 r146.power r147.power into r154;
    ternary r145 r146.stamina r147.stamina into r155;
    ternary r145 r146.technique r147.technique into r156;
    ternary r145 r146.goalkeeping r147.goalkeeping into r157;
    cast r148 r149 r150 r151 r152 r153 r154 r155 r156 r157 into r158 as Player;
    rand.chacha into r159 as u8;
    gt r132.attack r159 into r160;
    rand.chacha into r161 as u8;
    lt r144.defense r161 into r162;
    rand.chacha into r163 as u8;
    lt r158.goalkeeping r163 into r164;
    lt r119.speed r120.speed into r165;
    add r117 1u64 into r166;
    add r118 1u64 into r167;
    ternary r165 r166 r117 into r168;
    ternary r165 r118 r167 into r169;
    ternary r164 r168 r117 into r170;
    ternary r164 r169 r118 into r171;
    ternary r162 r170 r117 into r172;
    ternary r162 r171 r118 into r173;
    ternary r160 r172 r117 into r174;
    ternary r160 r173 r118 into r175;
    get players[r1[4u32]] into r176;
    get players[r2[4u32]] into r177;
    gt r176.speed r177.speed into r178;
    ternary r178 r176.player_id r177.player_id into r179;
    ternary r178 r176.team_id r177.team_id into r180;
    ternary r178 r176.position r177.position into r181;
    ternary r178 r176.attack r177.attack into r182;
    ternary r178 r176.defense r177.defense into r183;
    ternary r178 r176.speed r177.speed into r184;
    ternary r178 r176.power r177.power into r185;
    ternary r178 r176.stamina r177.stamina into r186;
    ternary r178 r176.technique r177.technique into r187;
    ternary r178 r176.goalkeeping r177.goalkeeping into r188;
    cast r179 r180 r181 r182 r183 r184 r185 r186 r187 r188 into r189 as Player;
    gt r176.speed r177.speed into r190;
    ternary r190 r177.player_id r176.player_id into r191;
    ternary r190 r177.team_id r176.team_id into r192;
    ternary r190 r177.position r176.position into r193;
    ternary r190 r177.attack r176.attack into r194;
    ternary r190 r177.defense r176.defense into r195;
    ternary r190 r177.speed r176.speed into r196;
    ternary r190 r177.power r176.power into r197;
    ternary r190 r177.stamina r176.stamina into r198;
    ternary r190 r177.technique r176.technique into r199;
    ternary r190 r177.goalkeeping r176.goalkeeping into r200;
    cast r191 r192 r193 r194 r195 r196 r197 r198 r199 r200 into r201 as Player;
    gt r176.speed r177.speed into r202;
    get players[r2[0u32]] into r203;
    get players[r1[0u32]] into r204;
    ternary r202 r203.player_id r204.player_id into r205;
    ternary r202 r203.team_id r204.team_id into r206;
    ternary r202 r203.position r204.position into r207;
    ternary r202 r203.attack r204.attack into r208;
    ternary r202 r203.defense r204.defense into r209;
    ternary r202 r203.speed r204.speed into r210;
    ternary r202 r203.power r204.power into r211;
    ternary r202 r203.stamina r204.stamina into r212;
    ternary r202 r203.technique r204.technique into r213;
    ternary r202 r203.goalkeeping r204.goalkeeping into r214;
    cast r205 r206 r207 r208 r209 r210 r211 r212 r213 r214 into r215 as Player;
    rand.chacha into r216 as u8;
    gt r189.attack r216 into r217;
    rand.chacha into r218 as u8;
    lt r201.defense r218 into r219;
    rand.chacha into r220 as u8;
    lt r215.goalkeeping r220 into r221;
    lt r176.speed r177.speed into r222;
    add r174 1u64 into r223;
    add r175 1u64 into r224;
    ternary r222 r223 r174 into r225;
    ternary r222 r175 r224 into r226;
    ternary r221 r225 r174 into r227;
    ternary r221 r226 r175 into r228;
    ternary r219 r227 r174 into r229;
    ternary r219 r228 r175 into r230;
    ternary r217 r229 r174 into r231;
    ternary r217 r230 r175 into r232;
    get players[r1[5u32]] into r233;
    get players[r2[5u32]] into r234;
    gt r233.speed r234.speed into r235;
    ternary r235 r233.player_id r234.player_id into r236;
    ternary r235 r233.team_id r234.team_id into r237;
    ternary r235 r233.position r234.position into r238;
    ternary r235 r233.attack r234.attack into r239;
    ternary r235 r233.defense r234.defense into r240;
    ternary r235 r233.speed r234.speed into r241;
    ternary r235 r233.power r234.power into r242;
    ternary r235 r233.stamina r234.stamina into r243;
    ternary r235 r233.technique r234.technique into r244;
    ternary r235 r233.goalkeeping r234.goalkeeping into r245;
    cast r236 r237 r238 r239 r240 r241 r242 r243 r244 r245 into r246 as Player;
    gt r233.speed r234.speed into r247;
    ternary r247 r234.player_id r233.player_id into r248;
    ternary r247 r234.team_id r233.team_id into r249;
    ternary r247 r234.position r233.position into r250;
    ternary r247 r234.attack r233.attack into r251;
    ternary r247 r234.defense r233.defense into r252;
    ternary r247 r234.speed r233.speed into r253;
    ternary r247 r234.power r233.power into r254;
    ternary r247 r234.stamina r233.stamina into r255;
    ternary r247 r234.technique r233.technique into r256;
    ternary r247 r234.goalkeeping r233.goalkeeping into r257;
    cast r248 r249 r250 r251 r252 r253 r254 r255 r256 r257 into r258 as Player;
    gt r233.speed r234.speed into r259;
    get players[r2[0u32]] into r260;
    get players[r1[0u32]] into r261;
    ternary r259 r260.player_id r261.player_id into r262;
    ternary r259 r260.team_id r261.team_id into r263;
    ternary r259 r260.position r261.position into r264;
    ternary r259 r260.attack r261.attack into r265;
    ternary r259 r260.defense r261.defense into r266;
    ternary r259 r260.speed r261.speed into r267;
    ternary r259 r260.power r261.power into r268;
    ternary r259 r260.stamina r261.stamina into r269;
    ternary r259 r260.technique r261.technique into r270;
    ternary r259 r260.goalkeeping r261.goalkeeping into r271;
    cast r262 r263 r264 r265 r266 r267 r268 r269 r270 r271 into r272 as Player;
    rand.chacha into r273 as u8;
    gt r246.attack r273 into r274;
    rand.chacha into r275 as u8;
    lt r258.defense r275 into r276;
    rand.chacha into r277 as u8;
    lt r272.goalkeeping r277 into r278;
    lt r233.speed r234.speed into r279;
    add r231 1u64 into r280;
    add r232 1u64 into r281;
    ternary r279 r280 r231 into r282;
    ternary r279 r232 r281 into r283;
    ternary r278 r282 r231 into r284;
    ternary r278 r283 r232 into r285;
    ternary r276 r284 r231 into r286;
    ternary r276 r285 r232 into r287;
    ternary r274 r286 r231 into r288;
    ternary r274 r287 r232 into r289;
    get players[r1[6u32]] into r290;
    get players[r2[6u32]] into r291;
    gt r290.speed r291.speed into r292;
    ternary r292 r290.player_id r291.player_id into r293;
    ternary r292 r290.team_id r291.team_id into r294;
    ternary r292 r290.position r291.position into r295;
    ternary r292 r290.attack r291.attack into r296;
    ternary r292 r290.defense r291.defense into r297;
    ternary r292 r290.speed r291.speed into r298;
    ternary r292 r290.power r291.power into r299;
    ternary r292 r290.stamina r291.stamina into r300;
    ternary r292 r290.technique r291.technique into r301;
    ternary r292 r290.goalkeeping r291.goalkeeping into r302;
    cast r293 r294 r295 r296 r297 r298 r299 r300 r301 r302 into r303 as Player;
    gt r290.speed r291.speed into r304;
    ternary r304 r291.player_id r290.player_id into r305;
    ternary r304 r291.team_id r290.team_id into r306;
    ternary r304 r291.position r290.position into r307;
    ternary r304 r291.attack r290.attack into r308;
    ternary r304 r291.defense r290.defense into r309;
    ternary r304 r291.speed r290.speed into r310;
    ternary r304 r291.power r290.power into r311;
    ternary r304 r291.stamina r290.stamina into r312;
    ternary r304 r291.technique r290.technique into r313;
    ternary r304 r291.goalkeeping r290.goalkeeping into r314;
    cast r305 r306 r307 r308 r309 r310 r311 r312 r313 r314 into r315 as Player;
    gt r290.speed r291.speed into r316;
    get players[r2[0u32]] into r317;
    get players[r1[0u32]] into r318;
    ternary r316 r317.player_id r318.player_id into r319;
    ternary r316 r317.team_id r318.team_id into r320;
    ternary r316 r317.position r318.position into r321;
    ternary r316 r317.attack r318.attack into r322;
    ternary r316 r317.defense r318.defense into r323;
    ternary r316 r317.speed r318.speed into r324;
    ternary r316 r317.power r318.power into r325;
    ternary r316 r317.stamina r318.stamina into r326;
    ternary r316 r317.technique r318.technique into r327;
    ternary r316 r317.goalkeeping r318.goalkeeping into r328;
    cast r319 r320 r321 r322 r323 r324 r325 r326 r327 r328 into r329 as Player;
    rand.chacha into r330 as u8;
    gt r303.attack r330 into r331;
    rand.chacha into r332 as u8;
    lt r315.defense r332 into r333;
    rand.chacha into r334 as u8;
    lt r329.goalkeeping r334 into r335;
    lt r290.speed r291.speed into r336;
    add r288 1u64 into r337;
    add r289 1u64 into r338;
    ternary r336 r337 r288 into r339;
    ternary r336 r289 r338 into r340;
    ternary r335 r339 r288 into r341;
    ternary r335 r340 r289 into r342;
    ternary r333 r341 r288 into r343;
    ternary r333 r342 r289 into r344;
    ternary r331 r343 r288 into r345;
    ternary r331 r344 r289 into r346;
    get players[r1[7u32]] into r347;
    get players[r2[7u32]] into r348;
    gt r347.speed r348.speed into r349;
    ternary r349 r347.player_id r348.player_id into r350;
    ternary r349 r347.team_id r348.team_id into r351;
    ternary r349 r347.position r348.position into r352;
    ternary r349 r347.attack r348.attack into r353;
    ternary r349 r347.defense r348.defense into r354;
    ternary r349 r347.speed r348.speed into r355;
    ternary r349 r347.power r348.power into r356;
    ternary r349 r347.stamina r348.stamina into r357;
    ternary r349 r347.technique r348.technique into r358;
    ternary r349 r347.goalkeeping r348.goalkeeping into r359;
    cast r350 r351 r352 r353 r354 r355 r356 r357 r358 r359 into r360 as Player;
    gt r347.speed r348.speed into r361;
    ternary r361 r348.player_id r347.player_id into r362;
    ternary r361 r348.team_id r347.team_id into r363;
    ternary r361 r348.position r347.position into r364;
    ternary r361 r348.attack r347.attack into r365;
    ternary r361 r348.defense r347.defense into r366;
    ternary r361 r348.speed r347.speed into r367;
    ternary r361 r348.power r347.power into r368;
    ternary r361 r348.stamina r347.stamina into r369;
    ternary r361 r348.technique r347.technique into r370;
    ternary r361 r348.goalkeeping r347.goalkeeping into r371;
    cast r362 r363 r364 r365 r366 r367 r368 r369 r370 r371 into r372 as Player;
    gt r347.speed r348.speed into r373;
    get players[r2[0u32]] into r374;
    get players[r1[0u32]] into r375;
    ternary r373 r374.player_id r375.player_id into r376;
    ternary r373 r374.team_id r375.team_id into r377;
    ternary r373 r374.position r375.position into r378;
    ternary r373 r374.attack r375.attack into r379;
    ternary r373 r374.defense r375.defense into r380;
    ternary r373 r374.speed r375.speed into r381;
    ternary r373 r374.power r375.power into r382;
    ternary r373 r374.stamina r375.stamina into r383;
    ternary r373 r374.technique r375.technique into r384;
    ternary r373 r374.goalkeeping r375.goalkeeping into r385;
    cast r376 r377 r378 r379 r380 r381 r382 r383 r384 r385 into r386 as Player;
    rand.chacha into r387 as u8;
    gt r360.attack r387 into r388;
    rand.chacha into r389 as u8;
    lt r372.defense r389 into r390;
    rand.chacha into r391 as u8;
    lt r386.goalkeeping r391 into r392;
    lt r347.speed r348.speed into r393;
    add r345 1u64 into r394;
    add r346 1u64 into r395;
    ternary r393 r394 r345 into r396;
    ternary r393 r346 r395 into r397;
    ternary r392 r396 r345 into r398;
    ternary r392 r397 r346 into r399;
    ternary r390 r398 r345 into r400;
    ternary r390 r399 r346 into r401;
    ternary r388 r400 r345 into r402;
    ternary r388 r401 r346 into r403;
    get players[r1[8u32]] into r404;
    get players[r2[8u32]] into r405;
    gt r404.speed r405.speed into r406;
    ternary r406 r404.player_id r405.player_id into r407;
    ternary r406 r404.team_id r405.team_id into r408;
    ternary r406 r404.position r405.position into r409;
    ternary r406 r404.attack r405.attack into r410;
    ternary r406 r404.defense r405.defense into r411;
    ternary r406 r404.speed r405.speed into r412;
    ternary r406 r404.power r405.power into r413;
    ternary r406 r404.stamina r405.stamina into r414;
    ternary r406 r404.technique r405.technique into r415;
    ternary r406 r404.goalkeeping r405.goalkeeping into r416;
    cast r407 r408 r409 r410 r411 r412 r413 r414 r415 r416 into r417 as Player;
    gt r404.speed r405.speed into r418;
    ternary r418 r405.player_id r404.player_id into r419;
    ternary r418 r405.team_id r404.team_id into r420;
    ternary r418 r405.position r404.position into r421;
    ternary r418 r405.attack r404.attack into r422;
    ternary r418 r405.defense r404.defense into r423;
    ternary r418 r405.speed r404.speed into r424;
    ternary r418 r405.power r404.power into r425;
    ternary r418 r405.stamina r404.stamina into r426;
    ternary r418 r405.technique r404.technique into r427;
    ternary r418 r405.goalkeeping r404.goalkeeping into r428;
    cast r419 r420 r421 r422 r423 r424 r425 r426 r427 r428 into r429 as Player;
    gt r404.speed r405.speed into r430;
    get players[r2[0u32]] into r431;
    get players[r1[0u32]] into r432;
    ternary r430 r431.player_id r432.player_id into r433;
    ternary r430 r431.team_id r432.team_id into r434;
    ternary r430 r431.position r432.position into r435;
    ternary r430 r431.attack r432.attack into r436;
    ternary r430 r431.defense r432.defense into r437;
    ternary r430 r431.speed r432.speed into r438;
    ternary r430 r431.power r432.power into r439;
    ternary r430 r431.stamina r432.stamina into r440;
    ternary r430 r431.technique r432.technique into r441;
    ternary r430 r431.goalkeeping r432.goalkeeping into r442;
    cast r433 r434 r435 r436 r437 r438 r439 r440 r441 r442 into r443 as Player;
    rand.chacha into r444 as u8;
    gt r417.attack r444 into r445;
    rand.chacha into r446 as u8;
    lt r429.defense r446 into r447;
    rand.chacha into r448 as u8;
    lt r443.goalkeeping r448 into r449;
    lt r404.speed r405.speed into r450;
    add r402 1u64 into r451;
    add r403 1u64 into r452;
    ternary r450 r451 r402 into r453;
    ternary r450 r403 r452 into r454;
    ternary r449 r453 r402 into r455;
    ternary r449 r454 r403 into r456;
    ternary r447 r455 r402 into r457;
    ternary r447 r456 r403 into r458;
    ternary r445 r457 r402 into r459;
    ternary r445 r458 r403 into r460;
    get players[r1[9u32]] into r461;
    get players[r2[9u32]] into r462;
    gt r461.speed r462.speed into r463;
    ternary r463 r461.player_id r462.player_id into r464;
    ternary r463 r461.team_id r462.team_id into r465;
    ternary r463 r461.position r462.position into r466;
    ternary r463 r461.attack r462.attack into r467;
    ternary r463 r461.defense r462.defense into r468;
    ternary r463 r461.speed r462.speed into r469;
    ternary r463 r461.power r462.power into r470;
    ternary r463 r461.stamina r462.stamina into r471;
    ternary r463 r461.technique r462.technique into r472;
    ternary r463 r461.goalkeeping r462.goalkeeping into r473;
    cast r464 r465 r466 r467 r468 r469 r470 r471 r472 r473 into r474 as Player;
    gt r461.speed r462.speed into r475;
    ternary r475 r462.player_id r461.player_id into r476;
    ternary r475 r462.team_id r461.team_id into r477;
    ternary r475 r462.position r461.position into r478;
    ternary r475 r462.attack r461.attack into r479;
    ternary r475 r462.defense r461.defense into r480;
    ternary r475 r462.speed r461.speed into r481;
    ternary r475 r462.power r461.power into r482;
    ternary r475 r462.stamina r461.stamina into r483;
    ternary r475 r462.technique r461.technique into r484;
    ternary r475 r462.goalkeeping r461.goalkeeping into r485;
    cast r476 r477 r478 r479 r480 r481 r482 r483 r484 r485 into r486 as Player;
    gt r461.speed r462.speed into r487;
    get players[r2[0u32]] into r488;
    get players[r1[0u32]] into r489;
    ternary r487 r488.player_id r489.player_id into r490;
    ternary r487 r488.team_id r489.team_id into r491;
    ternary r487 r488.position r489.position into r492;
    ternary r487 r488.attack r489.attack into r493;
    ternary r487 r488.defense r489.defense into r494;
    ternary r487 r488.speed r489.speed into r495;
    ternary r487 r488.power r489.power into r496;
    ternary r487 r488.stamina r489.stamina into r497;
    ternary r487 r488.technique r489.technique into r498;
    ternary r487 r488.goalkeeping r489.goalkeeping into r499;
    cast r490 r491 r492 r493 r494 r495 r496 r497 r498 r499 into r500 as Player;
    rand.chacha into r501 as u8;
    gt r474.attack r501 into r502;
    rand.chacha into r503 as u8;
    lt r486.defense r503 into r504;
    rand.chacha into r505 as u8;
    lt r500.goalkeeping r505 into r506;
    lt r461.speed r462.speed into r507;
    add r459 1u64 into r508;
    add r460 1u64 into r509;
    ternary r507 r508 r459 into r510;
    ternary r507 r460 r509 into r511;
    ternary r506 r510 r459 into r512;
    ternary r506 r511 r460 into r513;
    ternary r504 r512 r459 into r514;
    ternary r504 r513 r460 into r515;
    ternary r502 r514 r459 into r516;
    ternary r502 r515 r460 into r517;
    get players[r1[10u32]] into r518;
    get players[r2[10u32]] into r519;
    gt r518.speed r519.speed into r520;
    ternary r520 r518.player_id r519.player_id into r521;
    ternary r520 r518.team_id r519.team_id into r522;
    ternary r520 r518.position r519.position into r523;
    ternary r520 r518.attack r519.attack into r524;
    ternary r520 r518.defense r519.defense into r525;
    ternary r520 r518.speed r519.speed into r526;
    ternary r520 r518.power r519.power into r527;
    ternary r520 r518.stamina r519.stamina into r528;
    ternary r520 r518.technique r519.technique into r529;
    ternary r520 r518.goalkeeping r519.goalkeeping into r530;
    cast r521 r522 r523 r524 r525 r526 r527 r528 r529 r530 into r531 as Player;
    gt r518.speed r519.speed into r532;
    ternary r532 r519.player_id r518.player_id into r533;
    ternary r532 r519.team_id r518.team_id into r534;
    ternary r532 r519.position r518.position into r535;
    ternary r532 r519.attack r518.attack into r536;
    ternary r532 r519.defense r518.defense into r537;
    ternary r532 r519.speed r518.speed into r538;
    ternary r532 r519.power r518.power into r539;
    ternary r532 r519.stamina r518.stamina into r540;
    ternary r532 r519.technique r518.technique into r541;
    ternary r532 r519.goalkeeping r518.goalkeeping into r542;
    cast r533 r534 r535 r536 r537 r538 r539 r540 r541 r542 into r543 as Player;
    gt r518.speed r519.speed into r544;
    get players[r2[0u32]] into r545;
    get players[r1[0u32]] into r546;
    ternary r544 r545.player_id r546.player_id into r547;
    ternary r544 r545.team_id r546.team_id into r548;
    ternary r544 r545.position r546.position into r549;
    ternary r544 r545.attack r546.attack into r550;
    ternary r544 r545.defense r546.defense into r551;
    ternary r544 r545.speed r546.speed into r552;
    ternary r544 r545.power r546.power into r553;
    ternary r544 r545.stamina r546.stamina into r554;
    ternary r544 r545.technique r546.technique into r555;
    ternary r544 r545.goalkeeping r546.goalkeeping into r556;
    cast r547 r548 r549 r550 r551 r552 r553 r554 r555 r556 into r557 as Player;
    rand.chacha into r558 as u8;
    gt r531.attack r558 into r559;
    rand.chacha into r560 as u8;
    lt r543.defense r560 into r561;
    rand.chacha into r562 as u8;
    lt r557.goalkeeping r562 into r563;
    lt r518.speed r519.speed into r564;
    add r516 1u64 into r565;
    add r517 1u64 into r566;
    ternary r564 r565 r516 into r567;
    ternary r564 r517 r566 into r568;
    ternary r563 r567 r516 into r569;
    ternary r563 r568 r517 into r570;
    ternary r561 r569 r516 into r571;
    ternary r561 r570 r517 into r572;
    ternary r559 r571 r516 into r573;
    ternary r559 r572 r517 into r574;
    lt r518.speed r519.speed into r575;
    add r573 1u64 into r576;
    add r574 1u64 into r577;
    ternary r575 r576 r573 into r578;
    ternary r575 r574 r577 into r579;
    cast r579 r578 into r580 as GameOutcome;
    set r580 into game_outcomes[r0];

function reveal_answer_game:
    input r0 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    input r1 as RevealAnswerNotification.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceState.record;
    input r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    input r4 as GameOutcome.private;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    is.eq r1.opponent_answer r3.answer into r5;
    ternary r5 r3.opponent_address r3.challenger_address into r6;
    is.eq r6 r3.challenger_address into r7;
    ternary r7 r3.opponent_address r3.challenger_address into r8;
    call multiparty_pvp_utils_v015_avh.aleo/reveal_answer r3 r0.sig into r9 r10;
    call puzzle_pieces_v016.aleo/joint_stake_state_update r2 r0 r6 into r11 r12;
    cast r3.opponent_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer 9u32 into r13 as GameFinishReqNotification.record;
    cast r3.challenger_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer 9u32 into r14 as GameFinishReqNotification.record;
    async reveal_answer_game r1.game_uuid r4 into r15;
    output r9 as multiparty_pvp_utils_v015_avh.aleo/RevealAnswer.record;
    output r10 as multiparty_pvp_utils_v015_avh.aleo/AuditRevealAnswer.record;
    output r11 as puzzle_pieces_v016.aleo/JointPieceWinner.record;
    output r12 as puzzle_pieces_v016.aleo/AuditJointPieceWinner.record;
    output r13 as GameFinishReqNotification.record;
    output r14 as GameFinishReqNotification.record;
    output r15 as football_game_v006.aleo/reveal_answer_game.future;

finalize reveal_answer_game:
    input r0 as field.public;
    input r1 as GameOutcome.public;
    get game_outcomes[r0] into r2;
    assert.eq r1.goals_home r2.goals_home ;
    assert.eq r1.goals_away r2.goals_away ;

function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v016.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    input r4 as GameOutcome.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    gt r4.goals_home r4.goals_away into r5;
    ternary r5 r0.challenger_address r0.opponent_address into r6;
    gt r4.goals_home r4.goals_away into r7;
    ternary r7 r0.opponent_address r0.challenger_address into r8;
    call puzzle_pieces_v016.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r9 r10 r11;
    cast r0.owner r0.uuid r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r12 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r8 10u32 into r13 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r8 10u32 into r14 as GameFinishedNotification.record;
    call football_leaderboard_v003.aleo/update_leaderboard r0.challenger_address r0.opponent_address r4.goals_home r4.goals_home into r15;
    async finish_game r15 r0.uuid r0.challenger_address r0.opponent_address r4 into r16;
    output r9 as puzzle_pieces_v016.aleo/Piece.record;
    output r10 as puzzle_pieces_v016.aleo/AuditTransferToWinner.record;
    output r11 as puzzle_pieces_v016.aleo/AuditPieceOwner.record;
    output r12 as Game.record;
    output r13 as GameFinishedNotification.record;
    output r14 as GameFinishedNotification.record;
    output r16 as football_game_v006.aleo/finish_game.future;

finalize finish_game:
    input r0 as football_leaderboard_v003.aleo/update_leaderboard.future;
    input r1 as field.public;
    input r2 as address.public;
    input r3 as address.public;
    input r4 as GameOutcome.public;
    await r0;
    get game_outcomes[r1] into r5;
    assert.eq r4.goals_home r5.goals_home ;
    assert.eq r4.goals_away r5.goals_away ;

function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    cast r0.owner r0.uuid r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r5 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address 10u32 into r6 as GameFinishedNotification.record;
    call puzzle_pieces_v016.aleo/joint_timeout_to_opponent r1 r2 r3 into r7 r8;
    async finish_game_by_timeout r2.block_ht into r9;
    output r7 as puzzle_pieces_v016.aleo/Piece.record;
    output r8 as puzzle_pieces_v016.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r5 as GameFinishedNotification.record;
    output r6 as GameFinishedNotification.record;
    output r9 as football_game_v006.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true ;
