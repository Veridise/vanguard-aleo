import puzzle_pieces_v016.aleo;
import multiparty_pvp_utils_v015_avh.aleo;

program football_game_v012.aleo;

struct GameOutcome:
    address_home as address;
    address_away as address;
    team_id_home as u8;
    team_id_away as u8;
    goals_home as u64;
    goals_away as u64;

struct Player:
    player_id as u8;
    team_id as u8;
    position as field;
    attack as u8;
    defense as u8;
    speed as u8;
    power as u8;
    stamina as u8;
    technique as u8;
    goalkeeping as u8;

struct GameResult:
    goals_home as u64;
    goals_away as u64;

record Game:
    owner as address.private;
    uuid as field.private;
    challenger_commit as field.private;
    opponent_answer as [u8; 11u32].private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    game_multisig as address.private;
    game_state as field.private;
    ix as u32.private;

record GameReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingAcceptanceNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record StakeRenegedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    renege_address as address.private;
    ix as u32.private;

record ChallengerWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record OpponentWagerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record WaitingRevealNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    ix as u32.private;

record CalculatedOutcomeNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [u8; 11u32].private;
    uuid as field.private;
    ix as u32.private;

record RevealAnswerNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    opponent_answer as [u8; 11u32].private;
    uuid as field.private;
    ix as u32.private;

record GameFinishReqNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    challenger_answer as [u8; 11u32].private;
    opponent_answer as [u8; 11u32].private;
    winner as address.private;
    loser as address.private;
    ix as u32.private;

record GameFinishedNotification:
    owner as address.private;
    game_multisig as address.private;
    game_state as field.private;
    your_turn as boolean.private;
    total_pot as u64.private;
    challenger_address as address.private;
    opponent_address as address.private;
    winner as address.private;
    loser as address.private;
    uuid as field.private;
    game_outcome as GameOutcome.private;
    ix as u32.private;

mapping game_outcomes:
    key as field.public;
    value as GameOutcome.public;

mapping players:
    key as u8.public;
    value as Player.public;

function add_player:
    input r0 as Player.private;
    assert.eq self.caller self.signer ;
    async add_player r0 into r1;
    output r1 as football_game_v012.aleo/add_player.future;

finalize add_player:
    input r0 as Player.public;
    is.eq r0.player_id 0u8 into r1;
    cast 0u8 0u8 0field 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r2 as Player;
    set r2 into players[r0.player_id];
    is.eq r0.position 1field into r3;
    is.eq r0.position 2field into r4;
    or r3 r4 into r5;
    is.eq r0.position 3field into r6;
    or r5 r6 into r7;
    is.eq r0.position 4field into r8;
    or r7 r8 into r9;
    not r1 into r10;
    not r10 into r11;
    or r11 r9 into r12;
    assert.eq r12 true ;
    set r0 into players[r0.player_id];

function propose_game:
    input r0 as puzzle_pieces_v016.aleo/Piece.record;
    input r1 as u64.private;
    input r2 as address.private;
    input r3 as address.private;
    input r4 as address.private;
    input r5 as address.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as field.private;
    input r9 as field.private;
    input r10 as field.private;
    input r11 as signature.private;
    input r12 as field.private;
    input r13 as [u8; 11u32].private;
    input r14 as field.private;
    input r15 as field.private;
    cast r12 into r16 as scalar;
    commit.bhp256 r13 r16 into r17 as field;
    call puzzle_pieces_v016.aleo/stake_transfer_in r0 r2 r3 r4 r5 r1 r6 r7 r8 r9 r10 r11 into r18 r19 r20 r21 r22;
    call multiparty_pvp_utils_v015_avh.aleo/mint_multisig_key r14 r1 r3 r4 r5 into r23 r24;
    add r1 r1 into r25;
    cast r4 r5 1field true r25 r3 r4 2u32 into r26 as GameReqNotification.record;
    add r1 r1 into r27;
    cast r3 r5 1field false r27 r3 r4 3u32 into r28 as WaitingAcceptanceNotification.record;
    cast 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 0u8 into r29 as [u8; 11u32];
    add r1 r1 into r30;
    cast r5 r15 r17 r29 r30 r3 r4 r5 1field 1u32 into r31 as Game.record;
    call multiparty_pvp_utils_v015_avh.aleo/mint_answer r3 r4 r5 r1 r12 r13 r6 r7 r8 r9 r10 r11 into r32 r33;
    output r18 as puzzle_pieces_v016.aleo/PieceClaim.record;
    output r19 as puzzle_pieces_v016.aleo/PieceStake.record;
    output r20 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    output r21 as puzzle_pieces_v016.aleo/Piece.record;
    output r22 as puzzle_pieces_v016.aleo/AuditStakeIn.record;
    output r32 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r33 as multiparty_pvp_utils_v015_avh.aleo/AuditMintAnswer.record;
    output r23 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    output r24 as multiparty_pvp_utils_v015_avh.aleo/AuditKey.record;
    output r31 as Game.record;
    output r26 as GameReqNotification.record;
    output r28 as WaitingAcceptanceNotification.record;

function submit_wager:
    input r0 as puzzle_pieces_v016.aleo/Piece.record;
    input r1 as multiparty_pvp_utils_v015_avh.aleo/Key.record;
    input r2 as GameReqNotification.record;
    input r3 as field.private;
    input r4 as field.private;
    input r5 as field.private;
    input r6 as field.private;
    input r7 as field.private;
    input r8 as signature.private;
    assert.eq self.caller self.signer ;
    gt r0.amount 0u64 into r9;
    assert.eq r9 true ;
    div r2.total_pot 2u64 into r10;
    gte r0.amount r10 into r11;
    assert.eq r11 true ;
    div r2.total_pot 2u64 into r12;
    call puzzle_pieces_v016.aleo/stake_transfer_in r0 r2.opponent_address r2.challenger_address r2.opponent_address r2.game_multisig r12 r3 r4 r5 r6 r7 r8 into r13 r14 r15 r16 r17;
    cast r2.challenger_address r2.game_multisig 2field false r2.total_pot r2.challenger_address r2.opponent_address 5u32 into r18 as ChallengerWagerNotification.record;
    cast r2.opponent_address r2.game_multisig 2field true r2.total_pot r2.challenger_address r2.opponent_address 6u32 into r19 as OpponentWagerNotification.record;
    output r13 as puzzle_pieces_v016.aleo/PieceClaim.record;
    output r14 as puzzle_pieces_v016.aleo/PieceStake.record;
    output r15 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    output r16 as puzzle_pieces_v016.aleo/Piece.record;
    output r17 as puzzle_pieces_v016.aleo/AuditStakeIn.record;
    output r18 as ChallengerWagerNotification.record;
    output r19 as OpponentWagerNotification.record;

function accept_game:
    input r0 as Game.record;
    input r1 as [u8; 11u32].private;
    input r2 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r3 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r4 as puzzle_pieces_v016.aleo/PieceStake.record;
    input r5 as puzzle_pieces_v016.aleo/PieceClaim.record;
    input r6 as u32.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    call puzzle_pieces_v016.aleo/transfer_stakes_to_joint r2 r3 r4 r5 r6 into r7 r8 r9 r10;
    cast r0.opponent_address r0.owner 3field false r0.total_pot r0.challenger_address r0.opponent_address 7u32 into r11 as WaitingRevealNotification.record;
    cast r0.challenger_address r0.owner 3field true r0.total_pot r0.challenger_address r0.opponent_address r1 r0.uuid 8u32 into r12 as RevealAnswerNotification.record;
    cast r0.owner r0.uuid r0.challenger_commit r1 r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 1u32 into r13 as Game.record;
    async accept_game r6 r1 into r14;
    output r7 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    output r8 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    output r9 as puzzle_pieces_v016.aleo/JointPieceState.record;
    output r10 as puzzle_pieces_v016.aleo/AuditJointStake.record;
    output r11 as WaitingRevealNotification.record;
    output r12 as RevealAnswerNotification.record;
    output r13 as Game.record;
    output r14 as football_game_v012.aleo/accept_game.future;

finalize accept_game:
    input r0 as u32.public;
    input r1 as [u8; 11u32].public;
    sub block.height 1000u32 into r2;
    gte r0 r2 into r3;
    assert.eq r3 true ;
    add block.height 1000u32 into r4;
    lte r0 r4 into r5;
    assert.eq r5 true ;

function calculate_outcome:
    input r0 as RevealAnswerNotification.record;
    input r1 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    assert.eq r0.challenger_address self.signer ;
    assert.eq self.caller self.signer ;
    cast r0.challenger_address r0.game_multisig 4field true r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_answer r0.uuid 11u32 into r2 as CalculatedOutcomeNotification.record;
    async calculate_outcome r0.uuid r0.challenger_address r0.opponent_address r1.answer r0.opponent_answer into r3;
    output r1 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    output r2 as CalculatedOutcomeNotification.record;
    output r3 as football_game_v012.aleo/calculate_outcome.future;

finalize calculate_outcome:
    input r0 as field.public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as [u8; 11u32].public;
    input r4 as [u8; 11u32].public;
    get players[r3[10u32]] into r5;
    get players[r4[10u32]] into r6;
    get players[r3[1u32]] into r7;
    get players[r4[1u32]] into r8;
    gt r7.speed r8.speed into r9;
    ternary r9 r7.player_id r8.player_id into r10;
    ternary r9 r7.team_id r8.team_id into r11;
    ternary r9 r7.position r8.position into r12;
    ternary r9 r7.attack r8.attack into r13;
    ternary r9 r7.defense r8.defense into r14;
    ternary r9 r7.speed r8.speed into r15;
    ternary r9 r7.power r8.power into r16;
    ternary r9 r7.stamina r8.stamina into r17;
    ternary r9 r7.technique r8.technique into r18;
    ternary r9 r7.goalkeeping r8.goalkeeping into r19;
    cast r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 into r20 as Player;
    gt r7.speed r8.speed into r21;
    ternary r21 r8.player_id r7.player_id into r22;
    ternary r21 r8.team_id r7.team_id into r23;
    ternary r21 r8.position r7.position into r24;
    ternary r21 r8.attack r7.attack into r25;
    ternary r21 r8.defense r7.defense into r26;
    ternary r21 r8.speed r7.speed into r27;
    ternary r21 r8.power r7.power into r28;
    ternary r21 r8.stamina r7.stamina into r29;
    ternary r21 r8.technique r7.technique into r30;
    ternary r21 r8.goalkeeping r7.goalkeeping into r31;
    cast r22 r23 r24 r25 r26 r27 r28 r29 r30 r31 into r32 as Player;
    gt r7.speed r8.speed into r33;
    get players[r4[0u32]] into r34;
    get players[r3[0u32]] into r35;
    ternary r33 r34.player_id r35.player_id into r36;
    ternary r33 r34.team_id r35.team_id into r37;
    ternary r33 r34.position r35.position into r38;
    ternary r33 r34.attack r35.attack into r39;
    ternary r33 r34.defense r35.defense into r40;
    ternary r33 r34.speed r35.speed into r41;
    ternary r33 r34.power r35.power into r42;
    ternary r33 r34.stamina r35.stamina into r43;
    ternary r33 r34.technique r35.technique into r44;
    ternary r33 r34.goalkeeping r35.goalkeeping into r45;
    cast r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 into r46 as Player;
    rand.chacha into r47 as u8;
    gt r20.attack r47 into r48;
    rand.chacha into r49 as u8;
    lt r32.defense r49 into r50;
    rand.chacha into r51 as u8;
    lt r46.goalkeeping r51 into r52;
    lt r7.speed r8.speed into r53;
    add 0u64 1u64 into r54;
    add 0u64 1u64 into r55;
    ternary r53 r54 0u64 into r56;
    ternary r53 0u64 r55 into r57;
    ternary r52 r56 0u64 into r58;
    ternary r52 r57 0u64 into r59;
    ternary r50 r58 0u64 into r60;
    ternary r50 r59 0u64 into r61;
    ternary r48 r60 0u64 into r62;
    ternary r48 r61 0u64 into r63;
    get players[r3[2u32]] into r64;
    get players[r4[2u32]] into r65;
    gt r64.speed r65.speed into r66;
    ternary r66 r64.player_id r65.player_id into r67;
    ternary r66 r64.team_id r65.team_id into r68;
    ternary r66 r64.position r65.position into r69;
    ternary r66 r64.attack r65.attack into r70;
    ternary r66 r64.defense r65.defense into r71;
    ternary r66 r64.speed r65.speed into r72;
    ternary r66 r64.power r65.power into r73;
    ternary r66 r64.stamina r65.stamina into r74;
    ternary r66 r64.technique r65.technique into r75;
    ternary r66 r64.goalkeeping r65.goalkeeping into r76;
    cast r67 r68 r69 r70 r71 r72 r73 r74 r75 r76 into r77 as Player;
    gt r64.speed r65.speed into r78;
    ternary r78 r65.player_id r64.player_id into r79;
    ternary r78 r65.team_id r64.team_id into r80;
    ternary r78 r65.position r64.position into r81;
    ternary r78 r65.attack r64.attack into r82;
    ternary r78 r65.defense r64.defense into r83;
    ternary r78 r65.speed r64.speed into r84;
    ternary r78 r65.power r64.power into r85;
    ternary r78 r65.stamina r64.stamina into r86;
    ternary r78 r65.technique r64.technique into r87;
    ternary r78 r65.goalkeeping r64.goalkeeping into r88;
    cast r79 r80 r81 r82 r83 r84 r85 r86 r87 r88 into r89 as Player;
    gt r64.speed r65.speed into r90;
    get players[r4[0u32]] into r91;
    get players[r3[0u32]] into r92;
    ternary r90 r91.player_id r92.player_id into r93;
    ternary r90 r91.team_id r92.team_id into r94;
    ternary r90 r91.position r92.position into r95;
    ternary r90 r91.attack r92.attack into r96;
    ternary r90 r91.defense r92.defense into r97;
    ternary r90 r91.speed r92.speed into r98;
    ternary r90 r91.power r92.power into r99;
    ternary r90 r91.stamina r92.stamina into r100;
    ternary r90 r91.technique r92.technique into r101;
    ternary r90 r91.goalkeeping r92.goalkeeping into r102;
    cast r93 r94 r95 r96 r97 r98 r99 r100 r101 r102 into r103 as Player;
    rand.chacha into r104 as u8;
    gt r77.attack r104 into r105;
    rand.chacha into r106 as u8;
    lt r89.defense r106 into r107;
    rand.chacha into r108 as u8;
    lt r103.goalkeeping r108 into r109;
    lt r64.speed r65.speed into r110;
    add r62 1u64 into r111;
    add r63 1u64 into r112;
    ternary r110 r111 r62 into r113;
    ternary r110 r63 r112 into r114;
    ternary r109 r113 r62 into r115;
    ternary r109 r114 r63 into r116;
    ternary r107 r115 r62 into r117;
    ternary r107 r116 r63 into r118;
    ternary r105 r117 r62 into r119;
    ternary r105 r118 r63 into r120;
    get players[r3[3u32]] into r121;
    get players[r4[3u32]] into r122;
    gt r121.speed r122.speed into r123;
    ternary r123 r121.player_id r122.player_id into r124;
    ternary r123 r121.team_id r122.team_id into r125;
    ternary r123 r121.position r122.position into r126;
    ternary r123 r121.attack r122.attack into r127;
    ternary r123 r121.defense r122.defense into r128;
    ternary r123 r121.speed r122.speed into r129;
    ternary r123 r121.power r122.power into r130;
    ternary r123 r121.stamina r122.stamina into r131;
    ternary r123 r121.technique r122.technique into r132;
    ternary r123 r121.goalkeeping r122.goalkeeping into r133;
    cast r124 r125 r126 r127 r128 r129 r130 r131 r132 r133 into r134 as Player;
    gt r121.speed r122.speed into r135;
    ternary r135 r122.player_id r121.player_id into r136;
    ternary r135 r122.team_id r121.team_id into r137;
    ternary r135 r122.position r121.position into r138;
    ternary r135 r122.attack r121.attack into r139;
    ternary r135 r122.defense r121.defense into r140;
    ternary r135 r122.speed r121.speed into r141;
    ternary r135 r122.power r121.power into r142;
    ternary r135 r122.stamina r121.stamina into r143;
    ternary r135 r122.technique r121.technique into r144;
    ternary r135 r122.goalkeeping r121.goalkeeping into r145;
    cast r136 r137 r138 r139 r140 r141 r142 r143 r144 r145 into r146 as Player;
    gt r121.speed r122.speed into r147;
    get players[r4[0u32]] into r148;
    get players[r3[0u32]] into r149;
    ternary r147 r148.player_id r149.player_id into r150;
    ternary r147 r148.team_id r149.team_id into r151;
    ternary r147 r148.position r149.position into r152;
    ternary r147 r148.attack r149.attack into r153;
    ternary r147 r148.defense r149.defense into r154;
    ternary r147 r148.speed r149.speed into r155;
    ternary r147 r148.power r149.power into r156;
    ternary r147 r148.stamina r149.stamina into r157;
    ternary r147 r148.technique r149.technique into r158;
    ternary r147 r148.goalkeeping r149.goalkeeping into r159;
    cast r150 r151 r152 r153 r154 r155 r156 r157 r158 r159 into r160 as Player;
    rand.chacha into r161 as u8;
    gt r134.attack r161 into r162;
    rand.chacha into r163 as u8;
    lt r146.defense r163 into r164;
    rand.chacha into r165 as u8;
    lt r160.goalkeeping r165 into r166;
    lt r121.speed r122.speed into r167;
    add r119 1u64 into r168;
    add r120 1u64 into r169;
    ternary r167 r168 r119 into r170;
    ternary r167 r120 r169 into r171;
    ternary r166 r170 r119 into r172;
    ternary r166 r171 r120 into r173;
    ternary r164 r172 r119 into r174;
    ternary r164 r173 r120 into r175;
    ternary r162 r174 r119 into r176;
    ternary r162 r175 r120 into r177;
    get players[r3[4u32]] into r178;
    get players[r4[4u32]] into r179;
    gt r178.speed r179.speed into r180;
    ternary r180 r178.player_id r179.player_id into r181;
    ternary r180 r178.team_id r179.team_id into r182;
    ternary r180 r178.position r179.position into r183;
    ternary r180 r178.attack r179.attack into r184;
    ternary r180 r178.defense r179.defense into r185;
    ternary r180 r178.speed r179.speed into r186;
    ternary r180 r178.power r179.power into r187;
    ternary r180 r178.stamina r179.stamina into r188;
    ternary r180 r178.technique r179.technique into r189;
    ternary r180 r178.goalkeeping r179.goalkeeping into r190;
    cast r181 r182 r183 r184 r185 r186 r187 r188 r189 r190 into r191 as Player;
    gt r178.speed r179.speed into r192;
    ternary r192 r179.player_id r178.player_id into r193;
    ternary r192 r179.team_id r178.team_id into r194;
    ternary r192 r179.position r178.position into r195;
    ternary r192 r179.attack r178.attack into r196;
    ternary r192 r179.defense r178.defense into r197;
    ternary r192 r179.speed r178.speed into r198;
    ternary r192 r179.power r178.power into r199;
    ternary r192 r179.stamina r178.stamina into r200;
    ternary r192 r179.technique r178.technique into r201;
    ternary r192 r179.goalkeeping r178.goalkeeping into r202;
    cast r193 r194 r195 r196 r197 r198 r199 r200 r201 r202 into r203 as Player;
    gt r178.speed r179.speed into r204;
    get players[r4[0u32]] into r205;
    get players[r3[0u32]] into r206;
    ternary r204 r205.player_id r206.player_id into r207;
    ternary r204 r205.team_id r206.team_id into r208;
    ternary r204 r205.position r206.position into r209;
    ternary r204 r205.attack r206.attack into r210;
    ternary r204 r205.defense r206.defense into r211;
    ternary r204 r205.speed r206.speed into r212;
    ternary r204 r205.power r206.power into r213;
    ternary r204 r205.stamina r206.stamina into r214;
    ternary r204 r205.technique r206.technique into r215;
    ternary r204 r205.goalkeeping r206.goalkeeping into r216;
    cast r207 r208 r209 r210 r211 r212 r213 r214 r215 r216 into r217 as Player;
    rand.chacha into r218 as u8;
    gt r191.attack r218 into r219;
    rand.chacha into r220 as u8;
    lt r203.defense r220 into r221;
    rand.chacha into r222 as u8;
    lt r217.goalkeeping r222 into r223;
    lt r178.speed r179.speed into r224;
    add r176 1u64 into r225;
    add r177 1u64 into r226;
    ternary r224 r225 r176 into r227;
    ternary r224 r177 r226 into r228;
    ternary r223 r227 r176 into r229;
    ternary r223 r228 r177 into r230;
    ternary r221 r229 r176 into r231;
    ternary r221 r230 r177 into r232;
    ternary r219 r231 r176 into r233;
    ternary r219 r232 r177 into r234;
    get players[r3[5u32]] into r235;
    get players[r4[5u32]] into r236;
    gt r235.speed r236.speed into r237;
    ternary r237 r235.player_id r236.player_id into r238;
    ternary r237 r235.team_id r236.team_id into r239;
    ternary r237 r235.position r236.position into r240;
    ternary r237 r235.attack r236.attack into r241;
    ternary r237 r235.defense r236.defense into r242;
    ternary r237 r235.speed r236.speed into r243;
    ternary r237 r235.power r236.power into r244;
    ternary r237 r235.stamina r236.stamina into r245;
    ternary r237 r235.technique r236.technique into r246;
    ternary r237 r235.goalkeeping r236.goalkeeping into r247;
    cast r238 r239 r240 r241 r242 r243 r244 r245 r246 r247 into r248 as Player;
    gt r235.speed r236.speed into r249;
    ternary r249 r236.player_id r235.player_id into r250;
    ternary r249 r236.team_id r235.team_id into r251;
    ternary r249 r236.position r235.position into r252;
    ternary r249 r236.attack r235.attack into r253;
    ternary r249 r236.defense r235.defense into r254;
    ternary r249 r236.speed r235.speed into r255;
    ternary r249 r236.power r235.power into r256;
    ternary r249 r236.stamina r235.stamina into r257;
    ternary r249 r236.technique r235.technique into r258;
    ternary r249 r236.goalkeeping r235.goalkeeping into r259;
    cast r250 r251 r252 r253 r254 r255 r256 r257 r258 r259 into r260 as Player;
    gt r235.speed r236.speed into r261;
    get players[r4[0u32]] into r262;
    get players[r3[0u32]] into r263;
    ternary r261 r262.player_id r263.player_id into r264;
    ternary r261 r262.team_id r263.team_id into r265;
    ternary r261 r262.position r263.position into r266;
    ternary r261 r262.attack r263.attack into r267;
    ternary r261 r262.defense r263.defense into r268;
    ternary r261 r262.speed r263.speed into r269;
    ternary r261 r262.power r263.power into r270;
    ternary r261 r262.stamina r263.stamina into r271;
    ternary r261 r262.technique r263.technique into r272;
    ternary r261 r262.goalkeeping r263.goalkeeping into r273;
    cast r264 r265 r266 r267 r268 r269 r270 r271 r272 r273 into r274 as Player;
    rand.chacha into r275 as u8;
    gt r248.attack r275 into r276;
    rand.chacha into r277 as u8;
    lt r260.defense r277 into r278;
    rand.chacha into r279 as u8;
    lt r274.goalkeeping r279 into r280;
    lt r235.speed r236.speed into r281;
    add r233 1u64 into r282;
    add r234 1u64 into r283;
    ternary r281 r282 r233 into r284;
    ternary r281 r234 r283 into r285;
    ternary r280 r284 r233 into r286;
    ternary r280 r285 r234 into r287;
    ternary r278 r286 r233 into r288;
    ternary r278 r287 r234 into r289;
    ternary r276 r288 r233 into r290;
    ternary r276 r289 r234 into r291;
    get players[r3[6u32]] into r292;
    get players[r4[6u32]] into r293;
    gt r292.speed r293.speed into r294;
    ternary r294 r292.player_id r293.player_id into r295;
    ternary r294 r292.team_id r293.team_id into r296;
    ternary r294 r292.position r293.position into r297;
    ternary r294 r292.attack r293.attack into r298;
    ternary r294 r292.defense r293.defense into r299;
    ternary r294 r292.speed r293.speed into r300;
    ternary r294 r292.power r293.power into r301;
    ternary r294 r292.stamina r293.stamina into r302;
    ternary r294 r292.technique r293.technique into r303;
    ternary r294 r292.goalkeeping r293.goalkeeping into r304;
    cast r295 r296 r297 r298 r299 r300 r301 r302 r303 r304 into r305 as Player;
    gt r292.speed r293.speed into r306;
    ternary r306 r293.player_id r292.player_id into r307;
    ternary r306 r293.team_id r292.team_id into r308;
    ternary r306 r293.position r292.position into r309;
    ternary r306 r293.attack r292.attack into r310;
    ternary r306 r293.defense r292.defense into r311;
    ternary r306 r293.speed r292.speed into r312;
    ternary r306 r293.power r292.power into r313;
    ternary r306 r293.stamina r292.stamina into r314;
    ternary r306 r293.technique r292.technique into r315;
    ternary r306 r293.goalkeeping r292.goalkeeping into r316;
    cast r307 r308 r309 r310 r311 r312 r313 r314 r315 r316 into r317 as Player;
    gt r292.speed r293.speed into r318;
    get players[r4[0u32]] into r319;
    get players[r3[0u32]] into r320;
    ternary r318 r319.player_id r320.player_id into r321;
    ternary r318 r319.team_id r320.team_id into r322;
    ternary r318 r319.position r320.position into r323;
    ternary r318 r319.attack r320.attack into r324;
    ternary r318 r319.defense r320.defense into r325;
    ternary r318 r319.speed r320.speed into r326;
    ternary r318 r319.power r320.power into r327;
    ternary r318 r319.stamina r320.stamina into r328;
    ternary r318 r319.technique r320.technique into r329;
    ternary r318 r319.goalkeeping r320.goalkeeping into r330;
    cast r321 r322 r323 r324 r325 r326 r327 r328 r329 r330 into r331 as Player;
    rand.chacha into r332 as u8;
    gt r305.attack r332 into r333;
    rand.chacha into r334 as u8;
    lt r317.defense r334 into r335;
    rand.chacha into r336 as u8;
    lt r331.goalkeeping r336 into r337;
    lt r292.speed r293.speed into r338;
    add r290 1u64 into r339;
    add r291 1u64 into r340;
    ternary r338 r339 r290 into r341;
    ternary r338 r291 r340 into r342;
    ternary r337 r341 r290 into r343;
    ternary r337 r342 r291 into r344;
    ternary r335 r343 r290 into r345;
    ternary r335 r344 r291 into r346;
    ternary r333 r345 r290 into r347;
    ternary r333 r346 r291 into r348;
    get players[r3[7u32]] into r349;
    get players[r4[7u32]] into r350;
    gt r349.speed r350.speed into r351;
    ternary r351 r349.player_id r350.player_id into r352;
    ternary r351 r349.team_id r350.team_id into r353;
    ternary r351 r349.position r350.position into r354;
    ternary r351 r349.attack r350.attack into r355;
    ternary r351 r349.defense r350.defense into r356;
    ternary r351 r349.speed r350.speed into r357;
    ternary r351 r349.power r350.power into r358;
    ternary r351 r349.stamina r350.stamina into r359;
    ternary r351 r349.technique r350.technique into r360;
    ternary r351 r349.goalkeeping r350.goalkeeping into r361;
    cast r352 r353 r354 r355 r356 r357 r358 r359 r360 r361 into r362 as Player;
    gt r349.speed r350.speed into r363;
    ternary r363 r350.player_id r349.player_id into r364;
    ternary r363 r350.team_id r349.team_id into r365;
    ternary r363 r350.position r349.position into r366;
    ternary r363 r350.attack r349.attack into r367;
    ternary r363 r350.defense r349.defense into r368;
    ternary r363 r350.speed r349.speed into r369;
    ternary r363 r350.power r349.power into r370;
    ternary r363 r350.stamina r349.stamina into r371;
    ternary r363 r350.technique r349.technique into r372;
    ternary r363 r350.goalkeeping r349.goalkeeping into r373;
    cast r364 r365 r366 r367 r368 r369 r370 r371 r372 r373 into r374 as Player;
    gt r349.speed r350.speed into r375;
    get players[r4[0u32]] into r376;
    get players[r3[0u32]] into r377;
    ternary r375 r376.player_id r377.player_id into r378;
    ternary r375 r376.team_id r377.team_id into r379;
    ternary r375 r376.position r377.position into r380;
    ternary r375 r376.attack r377.attack into r381;
    ternary r375 r376.defense r377.defense into r382;
    ternary r375 r376.speed r377.speed into r383;
    ternary r375 r376.power r377.power into r384;
    ternary r375 r376.stamina r377.stamina into r385;
    ternary r375 r376.technique r377.technique into r386;
    ternary r375 r376.goalkeeping r377.goalkeeping into r387;
    cast r378 r379 r380 r381 r382 r383 r384 r385 r386 r387 into r388 as Player;
    rand.chacha into r389 as u8;
    gt r362.attack r389 into r390;
    rand.chacha into r391 as u8;
    lt r374.defense r391 into r392;
    rand.chacha into r393 as u8;
    lt r388.goalkeeping r393 into r394;
    lt r349.speed r350.speed into r395;
    add r347 1u64 into r396;
    add r348 1u64 into r397;
    ternary r395 r396 r347 into r398;
    ternary r395 r348 r397 into r399;
    ternary r394 r398 r347 into r400;
    ternary r394 r399 r348 into r401;
    ternary r392 r400 r347 into r402;
    ternary r392 r401 r348 into r403;
    ternary r390 r402 r347 into r404;
    ternary r390 r403 r348 into r405;
    get players[r3[8u32]] into r406;
    get players[r4[8u32]] into r407;
    gt r406.speed r407.speed into r408;
    ternary r408 r406.player_id r407.player_id into r409;
    ternary r408 r406.team_id r407.team_id into r410;
    ternary r408 r406.position r407.position into r411;
    ternary r408 r406.attack r407.attack into r412;
    ternary r408 r406.defense r407.defense into r413;
    ternary r408 r406.speed r407.speed into r414;
    ternary r408 r406.power r407.power into r415;
    ternary r408 r406.stamina r407.stamina into r416;
    ternary r408 r406.technique r407.technique into r417;
    ternary r408 r406.goalkeeping r407.goalkeeping into r418;
    cast r409 r410 r411 r412 r413 r414 r415 r416 r417 r418 into r419 as Player;
    gt r406.speed r407.speed into r420;
    ternary r420 r407.player_id r406.player_id into r421;
    ternary r420 r407.team_id r406.team_id into r422;
    ternary r420 r407.position r406.position into r423;
    ternary r420 r407.attack r406.attack into r424;
    ternary r420 r407.defense r406.defense into r425;
    ternary r420 r407.speed r406.speed into r426;
    ternary r420 r407.power r406.power into r427;
    ternary r420 r407.stamina r406.stamina into r428;
    ternary r420 r407.technique r406.technique into r429;
    ternary r420 r407.goalkeeping r406.goalkeeping into r430;
    cast r421 r422 r423 r424 r425 r426 r427 r428 r429 r430 into r431 as Player;
    gt r406.speed r407.speed into r432;
    get players[r4[0u32]] into r433;
    get players[r3[0u32]] into r434;
    ternary r432 r433.player_id r434.player_id into r435;
    ternary r432 r433.team_id r434.team_id into r436;
    ternary r432 r433.position r434.position into r437;
    ternary r432 r433.attack r434.attack into r438;
    ternary r432 r433.defense r434.defense into r439;
    ternary r432 r433.speed r434.speed into r440;
    ternary r432 r433.power r434.power into r441;
    ternary r432 r433.stamina r434.stamina into r442;
    ternary r432 r433.technique r434.technique into r443;
    ternary r432 r433.goalkeeping r434.goalkeeping into r444;
    cast r435 r436 r437 r438 r439 r440 r441 r442 r443 r444 into r445 as Player;
    rand.chacha into r446 as u8;
    gt r419.attack r446 into r447;
    rand.chacha into r448 as u8;
    lt r431.defense r448 into r449;
    rand.chacha into r450 as u8;
    lt r445.goalkeeping r450 into r451;
    lt r406.speed r407.speed into r452;
    add r404 1u64 into r453;
    add r405 1u64 into r454;
    ternary r452 r453 r404 into r455;
    ternary r452 r405 r454 into r456;
    ternary r451 r455 r404 into r457;
    ternary r451 r456 r405 into r458;
    ternary r449 r457 r404 into r459;
    ternary r449 r458 r405 into r460;
    ternary r447 r459 r404 into r461;
    ternary r447 r460 r405 into r462;
    get players[r3[9u32]] into r463;
    get players[r4[9u32]] into r464;
    gt r463.speed r464.speed into r465;
    ternary r465 r463.player_id r464.player_id into r466;
    ternary r465 r463.team_id r464.team_id into r467;
    ternary r465 r463.position r464.position into r468;
    ternary r465 r463.attack r464.attack into r469;
    ternary r465 r463.defense r464.defense into r470;
    ternary r465 r463.speed r464.speed into r471;
    ternary r465 r463.power r464.power into r472;
    ternary r465 r463.stamina r464.stamina into r473;
    ternary r465 r463.technique r464.technique into r474;
    ternary r465 r463.goalkeeping r464.goalkeeping into r475;
    cast r466 r467 r468 r469 r470 r471 r472 r473 r474 r475 into r476 as Player;
    gt r463.speed r464.speed into r477;
    ternary r477 r464.player_id r463.player_id into r478;
    ternary r477 r464.team_id r463.team_id into r479;
    ternary r477 r464.position r463.position into r480;
    ternary r477 r464.attack r463.attack into r481;
    ternary r477 r464.defense r463.defense into r482;
    ternary r477 r464.speed r463.speed into r483;
    ternary r477 r464.power r463.power into r484;
    ternary r477 r464.stamina r463.stamina into r485;
    ternary r477 r464.technique r463.technique into r486;
    ternary r477 r464.goalkeeping r463.goalkeeping into r487;
    cast r478 r479 r480 r481 r482 r483 r484 r485 r486 r487 into r488 as Player;
    gt r463.speed r464.speed into r489;
    get players[r4[0u32]] into r490;
    get players[r3[0u32]] into r491;
    ternary r489 r490.player_id r491.player_id into r492;
    ternary r489 r490.team_id r491.team_id into r493;
    ternary r489 r490.position r491.position into r494;
    ternary r489 r490.attack r491.attack into r495;
    ternary r489 r490.defense r491.defense into r496;
    ternary r489 r490.speed r491.speed into r497;
    ternary r489 r490.power r491.power into r498;
    ternary r489 r490.stamina r491.stamina into r499;
    ternary r489 r490.technique r491.technique into r500;
    ternary r489 r490.goalkeeping r491.goalkeeping into r501;
    cast r492 r493 r494 r495 r496 r497 r498 r499 r500 r501 into r502 as Player;
    rand.chacha into r503 as u8;
    gt r476.attack r503 into r504;
    rand.chacha into r505 as u8;
    lt r488.defense r505 into r506;
    rand.chacha into r507 as u8;
    lt r502.goalkeeping r507 into r508;
    lt r463.speed r464.speed into r509;
    add r461 1u64 into r510;
    add r462 1u64 into r511;
    ternary r509 r510 r461 into r512;
    ternary r509 r462 r511 into r513;
    ternary r508 r512 r461 into r514;
    ternary r508 r513 r462 into r515;
    ternary r506 r514 r461 into r516;
    ternary r506 r515 r462 into r517;
    ternary r504 r516 r461 into r518;
    ternary r504 r517 r462 into r519;
    get players[r3[10u32]] into r520;
    get players[r4[10u32]] into r521;
    gt r520.speed r521.speed into r522;
    ternary r522 r520.player_id r521.player_id into r523;
    ternary r522 r520.team_id r521.team_id into r524;
    ternary r522 r520.position r521.position into r525;
    ternary r522 r520.attack r521.attack into r526;
    ternary r522 r520.defense r521.defense into r527;
    ternary r522 r520.speed r521.speed into r528;
    ternary r522 r520.power r521.power into r529;
    ternary r522 r520.stamina r521.stamina into r530;
    ternary r522 r520.technique r521.technique into r531;
    ternary r522 r520.goalkeeping r521.goalkeeping into r532;
    cast r523 r524 r525 r526 r527 r528 r529 r530 r531 r532 into r533 as Player;
    gt r520.speed r521.speed into r534;
    ternary r534 r521.player_id r520.player_id into r535;
    ternary r534 r521.team_id r520.team_id into r536;
    ternary r534 r521.position r520.position into r537;
    ternary r534 r521.attack r520.attack into r538;
    ternary r534 r521.defense r520.defense into r539;
    ternary r534 r521.speed r520.speed into r540;
    ternary r534 r521.power r520.power into r541;
    ternary r534 r521.stamina r520.stamina into r542;
    ternary r534 r521.technique r520.technique into r543;
    ternary r534 r521.goalkeeping r520.goalkeeping into r544;
    cast r535 r536 r537 r538 r539 r540 r541 r542 r543 r544 into r545 as Player;
    gt r520.speed r521.speed into r546;
    get players[r4[0u32]] into r547;
    get players[r3[0u32]] into r548;
    ternary r546 r547.player_id r548.player_id into r549;
    ternary r546 r547.team_id r548.team_id into r550;
    ternary r546 r547.position r548.position into r551;
    ternary r546 r547.attack r548.attack into r552;
    ternary r546 r547.defense r548.defense into r553;
    ternary r546 r547.speed r548.speed into r554;
    ternary r546 r547.power r548.power into r555;
    ternary r546 r547.stamina r548.stamina into r556;
    ternary r546 r547.technique r548.technique into r557;
    ternary r546 r547.goalkeeping r548.goalkeeping into r558;
    cast r549 r550 r551 r552 r553 r554 r555 r556 r557 r558 into r559 as Player;
    rand.chacha into r560 as u8;
    gt r533.attack r560 into r561;
    rand.chacha into r562 as u8;
    lt r545.defense r562 into r563;
    rand.chacha into r564 as u8;
    lt r559.goalkeeping r564 into r565;
    lt r520.speed r521.speed into r566;
    add r518 1u64 into r567;
    add r519 1u64 into r568;
    ternary r566 r567 r518 into r569;
    ternary r566 r519 r568 into r570;
    ternary r565 r569 r518 into r571;
    ternary r565 r570 r519 into r572;
    ternary r563 r571 r518 into r573;
    ternary r563 r572 r519 into r574;
    ternary r561 r573 r518 into r575;
    ternary r561 r574 r519 into r576;
    lt r520.speed r521.speed into r577;
    add r575 1u64 into r578;
    add r576 1u64 into r579;
    ternary r577 r578 r575 into r580;
    ternary r577 r576 r579 into r581;
    ternary true r520.player_id r5.player_id into r582;
    ternary true r520.team_id r5.team_id into r583;
    ternary true r520.position r5.position into r584;
    ternary true r520.attack r5.attack into r585;
    ternary true r520.defense r5.defense into r586;
    ternary true r520.speed r5.speed into r587;
    ternary true r520.power r5.power into r588;
    ternary true r520.stamina r5.stamina into r589;
    ternary true r520.technique r5.technique into r590;
    ternary true r520.goalkeeping r5.goalkeeping into r591;
    cast r582 r583 r584 r585 r586 r587 r588 r589 r590 r591 into r592 as Player;
    ternary true r521.player_id r6.player_id into r593;
    ternary true r521.team_id r6.team_id into r594;
    ternary true r521.position r6.position into r595;
    ternary true r521.attack r6.attack into r596;
    ternary true r521.defense r6.defense into r597;
    ternary true r521.speed r6.speed into r598;
    ternary true r521.power r6.power into r599;
    ternary true r521.stamina r6.stamina into r600;
    ternary true r521.technique r6.technique into r601;
    ternary true r521.goalkeeping r6.goalkeeping into r602;
    cast r593 r594 r595 r596 r597 r598 r599 r600 r601 r602 into r603 as Player;
    ternary true r580 0u64 into r604;
    ternary true r581 0u64 into r605;
    cast r1 r2 r592.team_id r592.team_id r605 r604 into r606 as GameOutcome;
    set r606 into game_outcomes[r0];

function reveal_answer_game:
    input r0 as puzzle_pieces_v016.aleo/ClaimSignature.record;
    input r1 as CalculatedOutcomeNotification.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceState.record;
    input r3 as multiparty_pvp_utils_v015_avh.aleo/Answer.record;
    input r4 as GameOutcome.private;
    assert.eq r2.state_updater_address self.signer ;
    assert.eq self.caller self.signer ;
    is.eq r1.opponent_answer r3.answer into r5;
    ternary r5 r3.opponent_address r3.challenger_address into r6;
    is.eq r6 r3.challenger_address into r7;
    ternary r7 r3.opponent_address r3.challenger_address into r8;
    call multiparty_pvp_utils_v015_avh.aleo/reveal_answer r3 r0.sig into r9 r10;
    call puzzle_pieces_v016.aleo/joint_stake_state_update r2 r0 r6 into r11 r12;
    cast r3.opponent_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer r6 r8 9u32 into r13 as GameFinishReqNotification.record;
    cast r3.challenger_address r3.game_multisig 5field true r2.amount r3.challenger_address r3.opponent_address r3.answer r1.opponent_answer r6 r8 9u32 into r14 as GameFinishReqNotification.record;
    async reveal_answer_game r1.uuid r4 into r15;
    output r9 as multiparty_pvp_utils_v015_avh.aleo/RevealAnswer.record;
    output r10 as multiparty_pvp_utils_v015_avh.aleo/AuditRevealAnswer.record;
    output r11 as puzzle_pieces_v016.aleo/JointPieceWinner.record;
    output r12 as puzzle_pieces_v016.aleo/AuditJointPieceWinner.record;
    output r13 as GameFinishReqNotification.record;
    output r14 as GameFinishReqNotification.record;
    output r15 as football_game_v012.aleo/reveal_answer_game.future;

finalize reveal_answer_game:
    input r0 as field.public;
    input r1 as GameOutcome.public;
    get game_outcomes[r0] into r2;
    assert.eq r1.goals_home r2.goals_home ;
    assert.eq r1.goals_away r2.goals_away ;

function finish_game:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v016.aleo/JointPieceWinner.record;
    input r2 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    input r3 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    input r4 as GameOutcome.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    gt r4.goals_home r4.goals_away into r5;
    ternary r5 r0.challenger_address r0.opponent_address into r6;
    gt r4.goals_home r4.goals_away into r7;
    ternary r7 r0.opponent_address r0.challenger_address into r8;
    call puzzle_pieces_v016.aleo/joint_stake_transfer_to_winner r1 r2 r3 into r9 r10 r11;
    cast r0.owner r0.uuid r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r12 as Game.record;
    cast r0.challenger_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r8 r0.uuid r4 10u32 into r13 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 6field false r0.total_pot r0.challenger_address r0.opponent_address r1.winner r8 r0.uuid r4 10u32 into r14 as GameFinishedNotification.record;
    async finish_game r0.uuid r0.challenger_address r0.opponent_address r4 into r15;
    output r9 as puzzle_pieces_v016.aleo/Piece.record;
    output r10 as puzzle_pieces_v016.aleo/AuditTransferToWinner.record;
    output r11 as puzzle_pieces_v016.aleo/AuditPieceOwner.record;
    output r12 as Game.record;
    output r13 as GameFinishedNotification.record;
    output r14 as GameFinishedNotification.record;
    output r15 as football_game_v012.aleo/finish_game.future;

finalize finish_game:
    input r0 as field.public;
    input r1 as address.public;
    input r2 as address.public;
    input r3 as GameOutcome.public;
    get game_outcomes[r0] into r4;
    assert.eq r3.goals_home r4.goals_home ;
    assert.eq r3.goals_away r4.goals_away ;

function finish_game_by_timeout:
    input r0 as Game.record;
    input r1 as puzzle_pieces_v016.aleo/PieceJointStake.record;
    input r2 as puzzle_pieces_v016.aleo/JointPieceTimeClaim.record;
    input r3 as signature.private;
    assert.eq r0.owner self.signer ;
    assert.eq self.caller self.signer ;
    cast r0.owner r0.uuid r0.challenger_commit r0.opponent_answer r0.total_pot r0.challenger_address r0.opponent_address r0.game_multisig 3field 0u32 into r4 as Game.record;
    cast r0.challenger_address r0.opponent_address 0u8 0u8 0u64 3u64 into r5 as GameOutcome;
    cast r0.challenger_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address r0.uuid r5 10u32 into r6 as GameFinishedNotification.record;
    cast r0.opponent_address r0.game_multisig 7field false r0.total_pot r0.challenger_address r0.opponent_address r0.opponent_address r0.challenger_address r0.uuid r5 10u32 into r7 as GameFinishedNotification.record;
    call puzzle_pieces_v016.aleo/joint_timeout_to_opponent r1 r2 r3 into r8 r9;
    async finish_game_by_timeout r2.block_ht into r10;
    output r8 as puzzle_pieces_v016.aleo/Piece.record;
    output r9 as puzzle_pieces_v016.aleo/AuditTransferToWinner.record;
    output r4 as Game.record;
    output r6 as GameFinishedNotification.record;
    output r7 as GameFinishedNotification.record;
    output r10 as football_game_v012.aleo/finish_game_by_timeout.future;

finalize finish_game_by_timeout:
    input r0 as u32.public;
    add r0 10000u32 into r1;
    gt block.height r1 into r2;
    assert.eq r2 true ;
