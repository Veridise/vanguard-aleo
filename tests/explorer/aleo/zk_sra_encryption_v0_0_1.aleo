program zk_sra_encryption_v0_0_1.aleo;

closure exp_by_squaring:
    input r0 as u128;
    input r1 as u128;
    input r2 as u128;
    rem r1 2u128 into r3;
    is.eq r3 1u128 into r4;
    mul 1u128 r0 into r5;
    rem r5 r2 into r6;
    ternary r4 r6 1u128 into r7;
    mul r0 r0 into r8;
    rem r8 r2 into r9;
    shr r1 1u8 into r10;
    rem r10 2u128 into r11;
    is.eq r11 1u128 into r12;
    mul r7 r9 into r13;
    rem r13 r2 into r14;
    ternary r12 r14 r7 into r15;
    mul r9 r9 into r16;
    rem r16 r2 into r17;
    shr r10 1u8 into r18;
    rem r18 2u128 into r19;
    is.eq r19 1u128 into r20;
    mul r15 r17 into r21;
    rem r21 r2 into r22;
    ternary r20 r22 r15 into r23;
    mul r17 r17 into r24;
    rem r24 r2 into r25;
    shr r18 1u8 into r26;
    rem r26 2u128 into r27;
    is.eq r27 1u128 into r28;
    mul r23 r25 into r29;
    rem r29 r2 into r30;
    ternary r28 r30 r23 into r31;
    mul r25 r25 into r32;
    rem r32 r2 into r33;
    shr r26 1u8 into r34;
    rem r34 2u128 into r35;
    is.eq r35 1u128 into r36;
    mul r31 r33 into r37;
    rem r37 r2 into r38;
    ternary r36 r38 r31 into r39;
    mul r33 r33 into r40;
    rem r40 r2 into r41;
    shr r34 1u8 into r42;
    rem r42 2u128 into r43;
    is.eq r43 1u128 into r44;
    mul r39 r41 into r45;
    rem r45 r2 into r46;
    ternary r44 r46 r39 into r47;
    mul r41 r41 into r48;
    rem r48 r2 into r49;
    shr r42 1u8 into r50;
    rem r50 2u128 into r51;
    is.eq r51 1u128 into r52;
    mul r47 r49 into r53;
    rem r53 r2 into r54;
    ternary r52 r54 r47 into r55;
    mul r49 r49 into r56;
    rem r56 r2 into r57;
    shr r50 1u8 into r58;
    rem r58 2u128 into r59;
    is.eq r59 1u128 into r60;
    mul r55 r57 into r61;
    rem r61 r2 into r62;
    ternary r60 r62 r55 into r63;
    mul r57 r57 into r64;
    rem r64 r2 into r65;
    shr r58 1u8 into r66;
    rem r66 2u128 into r67;
    is.eq r67 1u128 into r68;
    mul r63 r65 into r69;
    rem r69 r2 into r70;
    ternary r68 r70 r63 into r71;
    mul r65 r65 into r72;
    rem r72 r2 into r73;
    shr r66 1u8 into r74;
    rem r74 2u128 into r75;
    is.eq r75 1u128 into r76;
    mul r71 r73 into r77;
    rem r77 r2 into r78;
    ternary r76 r78 r71 into r79;
    mul r73 r73 into r80;
    rem r80 r2 into r81;
    shr r74 1u8 into r82;
    rem r82 2u128 into r83;
    is.eq r83 1u128 into r84;
    mul r79 r81 into r85;
    rem r85 r2 into r86;
    ternary r84 r86 r79 into r87;
    mul r81 r81 into r88;
    rem r88 r2 into r89;
    shr r82 1u8 into r90;
    rem r90 2u128 into r91;
    is.eq r91 1u128 into r92;
    mul r87 r89 into r93;
    rem r93 r2 into r94;
    ternary r92 r94 r87 into r95;
    mul r89 r89 into r96;
    rem r96 r2 into r97;
    shr r90 1u8 into r98;
    rem r98 2u128 into r99;
    is.eq r99 1u128 into r100;
    mul r95 r97 into r101;
    rem r101 r2 into r102;
    ternary r100 r102 r95 into r103;
    mul r97 r97 into r104;
    rem r104 r2 into r105;
    shr r98 1u8 into r106;
    rem r106 2u128 into r107;
    is.eq r107 1u128 into r108;
    mul r103 r105 into r109;
    rem r109 r2 into r110;
    ternary r108 r110 r103 into r111;
    mul r105 r105 into r112;
    rem r112 r2 into r113;
    shr r106 1u8 into r114;
    rem r114 2u128 into r115;
    is.eq r115 1u128 into r116;
    mul r111 r113 into r117;
    rem r117 r2 into r118;
    ternary r116 r118 r111 into r119;
    mul r113 r113 into r120;
    rem r120 r2 into r121;
    shr r114 1u8 into r122;
    rem r122 2u128 into r123;
    is.eq r123 1u128 into r124;
    mul r119 r121 into r125;
    rem r125 r2 into r126;
    ternary r124 r126 r119 into r127;
    mul r121 r121 into r128;
    rem r128 r2 into r129;
    shr r122 1u8 into r130;
    rem r130 2u128 into r131;
    is.eq r131 1u128 into r132;
    mul r127 r129 into r133;
    rem r133 r2 into r134;
    ternary r132 r134 r127 into r135;
    mul r129 r129 into r136;
    rem r136 r2 into r137;
    shr r130 1u8 into r138;
    rem r138 2u128 into r139;
    is.eq r139 1u128 into r140;
    mul r135 r137 into r141;
    rem r141 r2 into r142;
    ternary r140 r142 r135 into r143;
    mul r137 r137 into r144;
    rem r144 r2 into r145;
    shr r138 1u8 into r146;
    rem r146 2u128 into r147;
    is.eq r147 1u128 into r148;
    mul r143 r145 into r149;
    rem r149 r2 into r150;
    ternary r148 r150 r143 into r151;
    mul r145 r145 into r152;
    rem r152 r2 into r153;
    shr r146 1u8 into r154;
    rem r154 2u128 into r155;
    is.eq r155 1u128 into r156;
    mul r151 r153 into r157;
    rem r157 r2 into r158;
    ternary r156 r158 r151 into r159;
    mul r153 r153 into r160;
    rem r160 r2 into r161;
    shr r154 1u8 into r162;
    rem r162 2u128 into r163;
    is.eq r163 1u128 into r164;
    mul r159 r161 into r165;
    rem r165 r2 into r166;
    ternary r164 r166 r159 into r167;
    mul r161 r161 into r168;
    rem r168 r2 into r169;
    shr r162 1u8 into r170;
    rem r170 2u128 into r171;
    is.eq r171 1u128 into r172;
    mul r167 r169 into r173;
    rem r173 r2 into r174;
    ternary r172 r174 r167 into r175;
    mul r169 r169 into r176;
    rem r176 r2 into r177;
    shr r170 1u8 into r178;
    rem r178 2u128 into r179;
    is.eq r179 1u128 into r180;
    mul r175 r177 into r181;
    rem r181 r2 into r182;
    ternary r180 r182 r175 into r183;
    mul r177 r177 into r184;
    rem r184 r2 into r185;
    shr r178 1u8 into r186;
    rem r186 2u128 into r187;
    is.eq r187 1u128 into r188;
    mul r183 r185 into r189;
    rem r189 r2 into r190;
    ternary r188 r190 r183 into r191;
    mul r185 r185 into r192;
    rem r192 r2 into r193;
    shr r186 1u8 into r194;
    rem r194 2u128 into r195;
    is.eq r195 1u128 into r196;
    mul r191 r193 into r197;
    rem r197 r2 into r198;
    ternary r196 r198 r191 into r199;
    mul r193 r193 into r200;
    rem r200 r2 into r201;
    shr r194 1u8 into r202;
    rem r202 2u128 into r203;
    is.eq r203 1u128 into r204;
    mul r199 r201 into r205;
    rem r205 r2 into r206;
    ternary r204 r206 r199 into r207;
    mul r201 r201 into r208;
    rem r208 r2 into r209;
    shr r202 1u8 into r210;
    rem r210 2u128 into r211;
    is.eq r211 1u128 into r212;
    mul r207 r209 into r213;
    rem r213 r2 into r214;
    ternary r212 r214 r207 into r215;
    mul r209 r209 into r216;
    rem r216 r2 into r217;
    shr r210 1u8 into r218;
    rem r218 2u128 into r219;
    is.eq r219 1u128 into r220;
    mul r215 r217 into r221;
    rem r221 r2 into r222;
    ternary r220 r222 r215 into r223;
    mul r217 r217 into r224;
    rem r224 r2 into r225;
    shr r218 1u8 into r226;
    rem r226 2u128 into r227;
    is.eq r227 1u128 into r228;
    mul r223 r225 into r229;
    rem r229 r2 into r230;
    ternary r228 r230 r223 into r231;
    mul r225 r225 into r232;
    rem r232 r2 into r233;
    shr r226 1u8 into r234;
    rem r234 2u128 into r235;
    is.eq r235 1u128 into r236;
    mul r231 r233 into r237;
    rem r237 r2 into r238;
    ternary r236 r238 r231 into r239;
    mul r233 r233 into r240;
    rem r240 r2 into r241;
    shr r234 1u8 into r242;
    rem r242 2u128 into r243;
    is.eq r243 1u128 into r244;
    mul r239 r241 into r245;
    rem r245 r2 into r246;
    ternary r244 r246 r239 into r247;
    mul r241 r241 into r248;
    rem r248 r2 into r249;
    shr r242 1u8 into r250;
    rem r250 2u128 into r251;
    is.eq r251 1u128 into r252;
    mul r247 r249 into r253;
    rem r253 r2 into r254;
    ternary r252 r254 r247 into r255;
    mul r249 r249 into r256;
    rem r256 r2 into r257;
    shr r250 1u8 into r258;
    cast r255 into r259 as u128;
    output r259 as u128;

function encrypt_deck:
    input r0 as u128.private;
    input r1 as u128.private;
    input r2 as [[u128; 26u32]; 2u32].private;
    call exp_by_squaring r2[0u32][0u32] r0 r1 into r3;
    call exp_by_squaring r2[0u32][1u32] r0 r1 into r4;
    call exp_by_squaring r2[0u32][2u32] r0 r1 into r5;
    call exp_by_squaring r2[0u32][3u32] r0 r1 into r6;
    call exp_by_squaring r2[0u32][4u32] r0 r1 into r7;
    call exp_by_squaring r2[0u32][5u32] r0 r1 into r8;
    call exp_by_squaring r2[0u32][6u32] r0 r1 into r9;
    call exp_by_squaring r2[0u32][7u32] r0 r1 into r10;
    call exp_by_squaring r2[0u32][8u32] r0 r1 into r11;
    call exp_by_squaring r2[0u32][9u32] r0 r1 into r12;
    call exp_by_squaring r2[0u32][10u32] r0 r1 into r13;
    call exp_by_squaring r2[0u32][11u32] r0 r1 into r14;
    call exp_by_squaring r2[0u32][12u32] r0 r1 into r15;
    call exp_by_squaring r2[0u32][13u32] r0 r1 into r16;
    call exp_by_squaring r2[0u32][14u32] r0 r1 into r17;
    call exp_by_squaring r2[0u32][15u32] r0 r1 into r18;
    call exp_by_squaring r2[0u32][16u32] r0 r1 into r19;
    call exp_by_squaring r2[0u32][17u32] r0 r1 into r20;
    call exp_by_squaring r2[0u32][18u32] r0 r1 into r21;
    call exp_by_squaring r2[0u32][19u32] r0 r1 into r22;
    call exp_by_squaring r2[0u32][20u32] r0 r1 into r23;
    call exp_by_squaring r2[0u32][21u32] r0 r1 into r24;
    call exp_by_squaring r2[0u32][22u32] r0 r1 into r25;
    call exp_by_squaring r2[0u32][23u32] r0 r1 into r26;
    call exp_by_squaring r2[0u32][24u32] r0 r1 into r27;
    call exp_by_squaring r2[0u32][25u32] r0 r1 into r28;
    call exp_by_squaring r2[1u32][0u32] r0 r1 into r29;
    call exp_by_squaring r2[1u32][1u32] r0 r1 into r30;
    call exp_by_squaring r2[1u32][2u32] r0 r1 into r31;
    call exp_by_squaring r2[1u32][3u32] r0 r1 into r32;
    call exp_by_squaring r2[1u32][4u32] r0 r1 into r33;
    call exp_by_squaring r2[1u32][5u32] r0 r1 into r34;
    call exp_by_squaring r2[1u32][6u32] r0 r1 into r35;
    call exp_by_squaring r2[1u32][7u32] r0 r1 into r36;
    call exp_by_squaring r2[1u32][8u32] r0 r1 into r37;
    call exp_by_squaring r2[1u32][9u32] r0 r1 into r38;
    call exp_by_squaring r2[1u32][10u32] r0 r1 into r39;
    call exp_by_squaring r2[1u32][11u32] r0 r1 into r40;
    call exp_by_squaring r2[1u32][12u32] r0 r1 into r41;
    call exp_by_squaring r2[1u32][13u32] r0 r1 into r42;
    call exp_by_squaring r2[1u32][14u32] r0 r1 into r43;
    call exp_by_squaring r2[1u32][15u32] r0 r1 into r44;
    call exp_by_squaring r2[1u32][16u32] r0 r1 into r45;
    call exp_by_squaring r2[1u32][17u32] r0 r1 into r46;
    call exp_by_squaring r2[1u32][18u32] r0 r1 into r47;
    call exp_by_squaring r2[1u32][19u32] r0 r1 into r48;
    call exp_by_squaring r2[1u32][20u32] r0 r1 into r49;
    call exp_by_squaring r2[1u32][21u32] r0 r1 into r50;
    call exp_by_squaring r2[1u32][22u32] r0 r1 into r51;
    call exp_by_squaring r2[1u32][23u32] r0 r1 into r52;
    call exp_by_squaring r2[1u32][24u32] r0 r1 into r53;
    call exp_by_squaring r2[1u32][25u32] r0 r1 into r54;
    cast r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 into r55 as [u128; 26u32];
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 into r56 as [u128; 26u32];
    cast r55 r56 into r57 as [[u128; 26u32]; 2u32];
    output r57 as [[u128; 26u32]; 2u32].private;

function decrypt_deck:
    input r0 as u128.private;
    input r1 as u128.private;
    input r2 as [[u128; 26u32]; 2u32].private;
    call exp_by_squaring r2[0u32][0u32] r0 r1 into r3;
    call exp_by_squaring r2[0u32][1u32] r0 r1 into r4;
    call exp_by_squaring r2[0u32][2u32] r0 r1 into r5;
    call exp_by_squaring r2[0u32][3u32] r0 r1 into r6;
    call exp_by_squaring r2[0u32][4u32] r0 r1 into r7;
    call exp_by_squaring r2[0u32][5u32] r0 r1 into r8;
    call exp_by_squaring r2[0u32][6u32] r0 r1 into r9;
    call exp_by_squaring r2[0u32][7u32] r0 r1 into r10;
    call exp_by_squaring r2[0u32][8u32] r0 r1 into r11;
    call exp_by_squaring r2[0u32][9u32] r0 r1 into r12;
    call exp_by_squaring r2[0u32][10u32] r0 r1 into r13;
    call exp_by_squaring r2[0u32][11u32] r0 r1 into r14;
    call exp_by_squaring r2[0u32][12u32] r0 r1 into r15;
    call exp_by_squaring r2[0u32][13u32] r0 r1 into r16;
    call exp_by_squaring r2[0u32][14u32] r0 r1 into r17;
    call exp_by_squaring r2[0u32][15u32] r0 r1 into r18;
    call exp_by_squaring r2[0u32][16u32] r0 r1 into r19;
    call exp_by_squaring r2[0u32][17u32] r0 r1 into r20;
    call exp_by_squaring r2[0u32][18u32] r0 r1 into r21;
    call exp_by_squaring r2[0u32][19u32] r0 r1 into r22;
    call exp_by_squaring r2[0u32][20u32] r0 r1 into r23;
    call exp_by_squaring r2[0u32][21u32] r0 r1 into r24;
    call exp_by_squaring r2[0u32][22u32] r0 r1 into r25;
    call exp_by_squaring r2[0u32][23u32] r0 r1 into r26;
    call exp_by_squaring r2[0u32][24u32] r0 r1 into r27;
    call exp_by_squaring r2[0u32][25u32] r0 r1 into r28;
    call exp_by_squaring r2[1u32][0u32] r0 r1 into r29;
    call exp_by_squaring r2[1u32][1u32] r0 r1 into r30;
    call exp_by_squaring r2[1u32][2u32] r0 r1 into r31;
    call exp_by_squaring r2[1u32][3u32] r0 r1 into r32;
    call exp_by_squaring r2[1u32][4u32] r0 r1 into r33;
    call exp_by_squaring r2[1u32][5u32] r0 r1 into r34;
    call exp_by_squaring r2[1u32][6u32] r0 r1 into r35;
    call exp_by_squaring r2[1u32][7u32] r0 r1 into r36;
    call exp_by_squaring r2[1u32][8u32] r0 r1 into r37;
    call exp_by_squaring r2[1u32][9u32] r0 r1 into r38;
    call exp_by_squaring r2[1u32][10u32] r0 r1 into r39;
    call exp_by_squaring r2[1u32][11u32] r0 r1 into r40;
    call exp_by_squaring r2[1u32][12u32] r0 r1 into r41;
    call exp_by_squaring r2[1u32][13u32] r0 r1 into r42;
    call exp_by_squaring r2[1u32][14u32] r0 r1 into r43;
    call exp_by_squaring r2[1u32][15u32] r0 r1 into r44;
    call exp_by_squaring r2[1u32][16u32] r0 r1 into r45;
    call exp_by_squaring r2[1u32][17u32] r0 r1 into r46;
    call exp_by_squaring r2[1u32][18u32] r0 r1 into r47;
    call exp_by_squaring r2[1u32][19u32] r0 r1 into r48;
    call exp_by_squaring r2[1u32][20u32] r0 r1 into r49;
    call exp_by_squaring r2[1u32][21u32] r0 r1 into r50;
    call exp_by_squaring r2[1u32][22u32] r0 r1 into r51;
    call exp_by_squaring r2[1u32][23u32] r0 r1 into r52;
    call exp_by_squaring r2[1u32][24u32] r0 r1 into r53;
    call exp_by_squaring r2[1u32][25u32] r0 r1 into r54;
    cast r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 into r55 as [u128; 26u32];
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 into r56 as [u128; 26u32];
    cast r55 r56 into r57 as [[u128; 26u32]; 2u32];
    output r57 as [[u128; 26u32]; 2u32].private;

function encrypt_deck_per_card:
    input r0 as [[u128; 26u32]; 2u32].private;
    input r1 as u128.private;
    input r2 as [[u128; 26u32]; 2u32].private;
    call exp_by_squaring r2[0u32][0u32] r0[0u32][0u32] r1 into r3;
    call exp_by_squaring r2[0u32][1u32] r0[0u32][1u32] r1 into r4;
    call exp_by_squaring r2[0u32][2u32] r0[0u32][2u32] r1 into r5;
    call exp_by_squaring r2[0u32][3u32] r0[0u32][3u32] r1 into r6;
    call exp_by_squaring r2[0u32][4u32] r0[0u32][4u32] r1 into r7;
    call exp_by_squaring r2[0u32][5u32] r0[0u32][5u32] r1 into r8;
    call exp_by_squaring r2[0u32][6u32] r0[0u32][6u32] r1 into r9;
    call exp_by_squaring r2[0u32][7u32] r0[0u32][7u32] r1 into r10;
    call exp_by_squaring r2[0u32][8u32] r0[0u32][8u32] r1 into r11;
    call exp_by_squaring r2[0u32][9u32] r0[0u32][9u32] r1 into r12;
    call exp_by_squaring r2[0u32][10u32] r0[0u32][10u32] r1 into r13;
    call exp_by_squaring r2[0u32][11u32] r0[0u32][11u32] r1 into r14;
    call exp_by_squaring r2[0u32][12u32] r0[0u32][12u32] r1 into r15;
    call exp_by_squaring r2[0u32][13u32] r0[0u32][13u32] r1 into r16;
    call exp_by_squaring r2[0u32][14u32] r0[0u32][14u32] r1 into r17;
    call exp_by_squaring r2[0u32][15u32] r0[0u32][15u32] r1 into r18;
    call exp_by_squaring r2[0u32][16u32] r0[0u32][16u32] r1 into r19;
    call exp_by_squaring r2[0u32][17u32] r0[0u32][17u32] r1 into r20;
    call exp_by_squaring r2[0u32][18u32] r0[0u32][18u32] r1 into r21;
    call exp_by_squaring r2[0u32][19u32] r0[0u32][19u32] r1 into r22;
    call exp_by_squaring r2[0u32][20u32] r0[0u32][20u32] r1 into r23;
    call exp_by_squaring r2[0u32][21u32] r0[0u32][21u32] r1 into r24;
    call exp_by_squaring r2[0u32][22u32] r0[0u32][22u32] r1 into r25;
    call exp_by_squaring r2[0u32][23u32] r0[0u32][23u32] r1 into r26;
    call exp_by_squaring r2[0u32][24u32] r0[0u32][24u32] r1 into r27;
    call exp_by_squaring r2[0u32][25u32] r0[0u32][25u32] r1 into r28;
    call exp_by_squaring r2[1u32][0u32] r0[1u32][0u32] r1 into r29;
    call exp_by_squaring r2[1u32][1u32] r0[1u32][1u32] r1 into r30;
    call exp_by_squaring r2[1u32][2u32] r0[1u32][2u32] r1 into r31;
    call exp_by_squaring r2[1u32][3u32] r0[1u32][3u32] r1 into r32;
    call exp_by_squaring r2[1u32][4u32] r0[1u32][4u32] r1 into r33;
    call exp_by_squaring r2[1u32][5u32] r0[1u32][5u32] r1 into r34;
    call exp_by_squaring r2[1u32][6u32] r0[1u32][6u32] r1 into r35;
    call exp_by_squaring r2[1u32][7u32] r0[1u32][7u32] r1 into r36;
    call exp_by_squaring r2[1u32][8u32] r0[1u32][8u32] r1 into r37;
    call exp_by_squaring r2[1u32][9u32] r0[1u32][9u32] r1 into r38;
    call exp_by_squaring r2[1u32][10u32] r0[1u32][10u32] r1 into r39;
    call exp_by_squaring r2[1u32][11u32] r0[1u32][11u32] r1 into r40;
    call exp_by_squaring r2[1u32][12u32] r0[1u32][12u32] r1 into r41;
    call exp_by_squaring r2[1u32][13u32] r0[1u32][13u32] r1 into r42;
    call exp_by_squaring r2[1u32][14u32] r0[1u32][14u32] r1 into r43;
    call exp_by_squaring r2[1u32][15u32] r0[1u32][15u32] r1 into r44;
    call exp_by_squaring r2[1u32][16u32] r0[1u32][16u32] r1 into r45;
    call exp_by_squaring r2[1u32][17u32] r0[1u32][17u32] r1 into r46;
    call exp_by_squaring r2[1u32][18u32] r0[1u32][18u32] r1 into r47;
    call exp_by_squaring r2[1u32][19u32] r0[1u32][19u32] r1 into r48;
    call exp_by_squaring r2[1u32][20u32] r0[1u32][20u32] r1 into r49;
    call exp_by_squaring r2[1u32][21u32] r0[1u32][21u32] r1 into r50;
    call exp_by_squaring r2[1u32][22u32] r0[1u32][22u32] r1 into r51;
    call exp_by_squaring r2[1u32][23u32] r0[1u32][23u32] r1 into r52;
    call exp_by_squaring r2[1u32][24u32] r0[1u32][24u32] r1 into r53;
    call exp_by_squaring r2[1u32][25u32] r0[1u32][25u32] r1 into r54;
    cast r3 r4 r5 r6 r7 r8 r9 r10 r11 r12 r13 r14 r15 r16 r17 r18 r19 r20 r21 r22 r23 r24 r25 r26 r27 r28 into r55 as [u128; 26u32];
    cast r29 r30 r31 r32 r33 r34 r35 r36 r37 r38 r39 r40 r41 r42 r43 r44 r45 r46 r47 r48 r49 r50 r51 r52 r53 r54 into r56 as [u128; 26u32];
    cast r55 r56 into r57 as [[u128; 26u32]; 2u32];
    output r57 as [[u128; 26u32]; 2u32].private;

function test_encrypt_exp_by_squaring:
    input r0 as u128.public;
    input r1 as u128.private;
    input r2 as u128.private;
    input r3 as u128.private;
    call exp_by_squaring r0 r1 r3 into r4;
    call exp_by_squaring r4 r2 r3 into r5;
    assert.eq r0 r5 ;
    output r4 as u128.private;
    output r5 as u128.private;

function test_exp_by_squaring:
    input r0 as u128.public;
    input r1 as u128.private;
    input r2 as u128.private;
    input r3 as u128.private;
    call exp_by_squaring r0 r1 r3 into r4;
    call exp_by_squaring r4 r2 r3 into r5;
    output r4 as u128.private;
    output r5 as u128.private;
