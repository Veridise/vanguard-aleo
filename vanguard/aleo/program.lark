// adapted from: https://github.com/AleoHQ/grammars/blob/master/aleo.abnf
start: program

uppercase_letter : "A".."Z"
lowercase_letter : "a".."z"
letter : uppercase_letter | lowercase_letter

digit : "0".."9"

!identifier : letter ( letter | digit | "_" )*
!lowercase_identifier : lowercase_letter ( lowercase_letter | digit | "_" )*
program_name : lowercase_identifier
program_domain : lowercase_identifier
!program_id : program_name "." program_domain
!locator : program_id "/" identifier

!register : "r" digit+
!register_accessor : "." identifier | "[" u32_literal "]"
register_access : register register_accessor*

!signed_literal : [ "-" ] ( digit "_"* )+ signed_type
!unsigned_literal : [ "-" ] ( digit "_"* )+ unsigned_type
integer_literal : signed_literal | unsigned_literal
!field_literal : [ "-" ] ( digit "_"* )+ field_type
!group_literal : [ "-" ] ( digit "_"* )+ group_type
!scalar_literal : [ "-" ] ( digit "_"* )+ scalar_type
arithmetic_literal : integer_literal | field_literal | group_literal | scalar_literal
!u32_literal : [ "-" ] ( digit "_"* )+ "u32"

!address_literal : "aleo1" ( address_or_signature_char "_"* )+
!signature_literal : "sign1" ( address_or_signature_char "_"* )+
!address_or_signature_char : "0" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
                          | "a" | "c" | "d" | "e" | "f" | "g" | "h" | "j" | "k"
                          | "l" | "m" | "n" | "p" | "q" | "r" | "s" | "t" | "u"
                          | "v" | "w" | "x" | "y" | "z"

!boolean_literal : "true" | "false"

literal : arithmetic_literal | address_literal | signature_literal | boolean_literal

!operand : literal | "group::GEN" | register_access | program_id | "self.signer" | "self.caller" | "block.height"

!unsigned_type : "u8" | "u16" | "u32" | "u64" | "u128"
!signed_type : "i8" | "i16" | "i32" | "i64" | "i128"
integer_type : unsigned_type | signed_type
!field_type : "field"
!group_type : "group"
!scalar_type : "scalar"
arithmetic_type : integer_type | field_type | group_type | scalar_type
!address_type : "address"
!boolean_type : "boolean"
!signature_type : "signature"
literal_type : arithmetic_type | address_type | signature_type | boolean_type
!array_type : "[" plaintext_type ";" u32_literal "]"
plaintext_type : literal_type | array_type | identifier
!value_type : plaintext_type ".constant" | plaintext_type ".public" | plaintext_type ".private"
           | identifier ".record" | locator ".record" | locator ".future"
!mapping_type : plaintext_type ".public"
!finalize_type :plaintext_type ".public" | locator ".future"
!entry_type : plaintext_type ( ".constant" | ".public" | ".private" )
!register_type : locator ".future" | locator ".record" | identifier ".record" | plaintext_type

!import : "import" program_id ";"

!mapping : "mapping" identifier ":" mapping_key mapping_value
!mapping_key : "key" "as" mapping_type ";"
!mapping_value : "value" "as" mapping_type ";"

!struct : "struct" identifier ":" tuple+
!tuple : identifier "as" plaintext_type ";"

!record : "record" identifier ":" "owner" "as" ( "address.public" | "address.private" ) ";" entry*
!entry : identifier "as" entry_type ";"

!unary_op : "abs" | "abs.w" | "double" | "inv" | "neg" | "not" | "square" | "sqrt"
!binary_op : "add" | "add.w" | "sub" | "sub.w" | "mul" | "mul.w" | "div" | "div.w" | "rem" | "rem.w"
           | "pow" | "pow.w" | "shl" | "shl.w" | "shr" | "shr.w" | "mod" | "and" | "or" | "xor"
           | "nand" | "nor" | "gt" | "gte" | "lt" | "lte"
!is_op : "is.eq" | "is.neq"
!assert_op : "assert.eq" | "assert.neq"
!commit_op : "commit.bhp" ( "256" | "512" | "768" | "1024" )
           | "commit.ped" ( "64" | "128" )
!hash1_op : "hash.bhp" ( "256" | "512" | "768" | "1024" )
          | "hash.ped" ( "64" | "128" )
          | "hash.psd" ( "2" | "4" | "8" )
          | "hash.keccak" ( "256" | "384" | "512" )
          | "hash.sha3_" ( "256" | "384" | "512" )
!hash2_op : "hash_many.psd" ( "2" | "4" | "8" )
!cast_op : "cast" | "cast.lossy"
!cast_destination : plaintext_type | identifier | locator | "group.x" | "group.y"
!unary : unary_op operand "into" register_access
!binary : binary_op operand~2 "into" register_access
!ternary : "ternary" operand~3 "into" register_access
!is : is_op operand~2 "into" register_access
assert : assert_op operand~2
!commit : commit_op operand~2 "into" register_access "as" ( address_type | field_type | group_type )
!hash1 : hash1_op operand "into" register_access "as" ( arithmetic_type | address_type | signature_type | array_type | identifier )
!hash2 : hash2_op operand~2 "into" register_access "as"( arithmetic_type | address_type | signature_type | array_type | identifier )
hash : hash1 | hash2
!signverify : "sign.verify" operand~3 "into" register_access
!cast : cast_op operand+ "into" register_access "as" cast_destination
!call : "call" ( locator | identifier ) operand* [ "into" register_access+ ]
!async : "async" identifier operand* "into" register_access
!instruction : ( unary | binary | ternary | is | assert | commit | hash | signverify | cast | call | async ) ";"
!contains : "contains" identifier "[" operand "]" "into" register_access ";"
!get : "get" identifier "[" operand "]" "into" register_access ";"
!get_or_use : "get.or_use" identifier "[" operand "]" operand "into" register_access ";"
!set : "set" operand "into" identifier "[" operand "]" ";"
!remove : "remove" identifier "[" operand "]" ";"
!random : "rand.chacha" operand~2 "into" register_access "as" ( arithmetic_type | address_type | signature_type | boolean_type ) ";"
label : identifier
!position : "position" label ";"
!branch_op : "branch.eq" | "branch.neq"
!branch : branch_op operand~2 "to" label ";"
!await : "await" register_access ";"
command : contains | get | get_or_use | set | remove | random | position | branch | await | instruction

!closure : "closure" identifier ":" closure_input* instruction+ closure_output*
!closure_input : "input" register "as" register_type ";"
!closure_output : "output" operand "as" register_type ";"

!function : "function" identifier ":" function_input* instruction* function_output* [ finalize ]
!function_input : "input" register "as" value_type ";"
!function_output : "output" operand "as" value_type ";"
!finalize : "finalize" identifier ":" finalize_input* command+
!finalize_input : "input" register "as" finalize_type ";"

!program : import* "program" program_id ";" ( mapping | struct | record | closure | function )+

COMMENT: "//" /.*/ "\n"
  | "/*" /(.|\n)+/ "*//"
%import common.WS
%ignore WS
%ignore COMMENT