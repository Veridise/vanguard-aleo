# Generated from ./Aleo.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,139,863,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,1,0,1,0,1,1,5,1,192,8,1,10,1,12,1,195,9,1,
        1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,1,205,8,1,11,1,12,1,206,1,2,1,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,
        5,1,5,1,5,1,6,1,6,1,6,1,6,4,6,233,8,6,11,6,12,6,234,1,7,1,7,1,7,
        1,7,5,7,241,8,7,10,7,12,7,244,9,7,1,8,1,8,1,8,1,8,5,8,250,8,8,10,
        8,12,8,253,9,8,1,8,4,8,256,8,8,11,8,12,8,257,1,8,5,8,261,8,8,10,
        8,12,8,264,9,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,
        1,10,1,11,1,11,1,11,1,11,5,11,282,8,11,10,11,12,11,285,9,11,1,11,
        5,11,288,8,11,10,11,12,11,291,9,11,1,11,5,11,294,8,11,10,11,12,11,
        297,9,11,1,11,3,11,300,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,318,8,14,10,14,12,
        14,321,9,14,1,14,4,14,324,8,14,11,14,12,14,325,1,15,1,15,1,15,1,
        15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,
        16,344,8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
        20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,5,22,392,8,22,10,
        22,12,22,395,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,404,8,
        22,1,22,1,22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,3,26,434,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,478,8,32,1,32,1,
        32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,492,8,
        33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,3,34,507,8,34,1,34,1,34,1,35,1,35,3,35,513,8,35,1,36,1,36,1,36,
        1,36,1,36,1,36,1,36,1,36,1,37,1,37,4,37,525,8,37,11,37,12,37,526,
        1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,538,8,38,1,38,
        5,38,541,8,38,10,38,12,38,544,9,38,1,38,1,38,4,38,548,8,38,11,38,
        12,38,549,3,38,552,8,38,1,38,1,38,1,39,1,39,1,39,5,39,559,8,39,10,
        39,12,39,562,9,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,572,
        8,40,1,41,3,41,575,8,41,1,41,1,41,5,41,579,8,41,10,41,12,41,582,
        9,41,4,41,584,8,41,11,41,12,41,585,1,41,1,41,1,42,3,42,591,8,42,
        1,42,1,42,5,42,595,8,42,10,42,12,42,598,9,42,4,42,600,8,42,11,42,
        12,42,601,1,42,1,42,1,43,1,43,3,43,608,8,43,1,44,3,44,611,8,44,1,
        44,1,44,5,44,615,8,44,10,44,12,44,618,9,44,4,44,620,8,44,11,44,12,
        44,621,1,44,1,44,1,45,3,45,627,8,45,1,45,1,45,5,45,631,8,45,10,45,
        12,45,634,9,45,4,45,636,8,45,11,45,12,45,637,1,45,1,45,1,46,3,46,
        643,8,46,1,46,1,46,5,46,647,8,46,10,46,12,46,650,9,46,4,46,652,8,
        46,11,46,12,46,653,1,46,1,46,1,47,1,47,1,47,1,47,3,47,662,8,47,1,
        48,3,48,665,8,48,1,48,1,48,5,48,669,8,48,10,48,12,48,672,9,48,4,
        48,674,8,48,11,48,12,48,675,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,
        51,1,52,1,52,1,53,1,53,1,54,1,54,3,54,692,8,54,1,55,1,55,1,56,1,
        56,1,57,1,57,1,58,1,58,1,58,1,58,3,58,704,8,58,1,59,1,59,1,60,1,
        60,1,61,1,61,1,62,1,62,1,62,1,62,3,62,716,8,62,1,63,1,63,1,63,1,
        63,1,63,1,63,1,64,1,64,1,64,3,64,727,8,64,1,65,1,65,1,65,1,65,1,
        65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,
        65,3,65,747,8,65,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,3,
        67,758,8,67,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,
        69,1,69,1,69,3,69,773,8,69,1,70,1,70,1,70,1,70,1,71,1,71,1,72,1,
        72,1,73,1,73,1,74,1,74,5,74,787,8,74,10,74,12,74,790,9,74,1,75,1,
        75,3,75,794,8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,4,
        77,805,8,77,11,77,12,77,806,1,77,3,77,810,8,77,1,78,1,78,1,78,1,
        78,1,78,1,78,1,78,3,78,819,8,78,1,79,1,79,1,79,1,79,1,79,1,80,1,
        80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,3,82,839,
        8,82,1,83,1,83,1,84,1,84,1,85,1,85,1,86,1,86,1,87,1,87,1,88,1,88,
        1,89,1,89,1,90,1,90,1,91,1,91,1,92,1,92,1,93,1,93,1,93,0,0,94,0,
        2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
        48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,
        92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,
        158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,0,14,
        1,0,29,30,1,0,36,37,2,0,35,35,38,41,1,0,42,46,1,0,53,55,1,0,66,73,
        1,0,74,99,1,0,100,101,1,0,102,103,1,0,104,109,1,0,110,124,1,0,125,
        127,1,0,128,129,1,0,130,131,881,0,188,1,0,0,0,2,193,1,0,0,0,4,208,
        1,0,0,0,6,212,1,0,0,0,8,218,1,0,0,0,10,223,1,0,0,0,12,228,1,0,0,
        0,14,236,1,0,0,0,16,245,1,0,0,0,18,265,1,0,0,0,20,271,1,0,0,0,22,
        277,1,0,0,0,24,301,1,0,0,0,26,307,1,0,0,0,28,313,1,0,0,0,30,327,
        1,0,0,0,32,343,1,0,0,0,34,345,1,0,0,0,36,354,1,0,0,0,38,363,1,0,
        0,0,40,373,1,0,0,0,42,382,1,0,0,0,44,389,1,0,0,0,46,407,1,0,0,0,
        48,411,1,0,0,0,50,418,1,0,0,0,52,433,1,0,0,0,54,435,1,0,0,0,56,441,
        1,0,0,0,58,448,1,0,0,0,60,456,1,0,0,0,62,463,1,0,0,0,64,468,1,0,
        0,0,66,481,1,0,0,0,68,495,1,0,0,0,70,512,1,0,0,0,72,514,1,0,0,0,
        74,522,1,0,0,0,76,534,1,0,0,0,78,555,1,0,0,0,80,571,1,0,0,0,82,574,
        1,0,0,0,84,590,1,0,0,0,86,607,1,0,0,0,88,610,1,0,0,0,90,626,1,0,
        0,0,92,642,1,0,0,0,94,661,1,0,0,0,96,664,1,0,0,0,98,679,1,0,0,0,
        100,681,1,0,0,0,102,683,1,0,0,0,104,685,1,0,0,0,106,687,1,0,0,0,
        108,691,1,0,0,0,110,693,1,0,0,0,112,695,1,0,0,0,114,697,1,0,0,0,
        116,703,1,0,0,0,118,705,1,0,0,0,120,707,1,0,0,0,122,709,1,0,0,0,
        124,715,1,0,0,0,126,717,1,0,0,0,128,726,1,0,0,0,130,746,1,0,0,0,
        132,748,1,0,0,0,134,757,1,0,0,0,136,759,1,0,0,0,138,772,1,0,0,0,
        140,774,1,0,0,0,142,778,1,0,0,0,144,780,1,0,0,0,146,782,1,0,0,0,
        148,784,1,0,0,0,150,793,1,0,0,0,152,795,1,0,0,0,154,809,1,0,0,0,
        156,818,1,0,0,0,158,820,1,0,0,0,160,825,1,0,0,0,162,830,1,0,0,0,
        164,838,1,0,0,0,166,840,1,0,0,0,168,842,1,0,0,0,170,844,1,0,0,0,
        172,846,1,0,0,0,174,848,1,0,0,0,176,850,1,0,0,0,178,852,1,0,0,0,
        180,854,1,0,0,0,182,856,1,0,0,0,184,858,1,0,0,0,186,860,1,0,0,0,
        188,189,3,2,1,0,189,1,1,0,0,0,190,192,3,4,2,0,191,190,1,0,0,0,192,
        195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,
        193,1,0,0,0,196,197,5,1,0,0,197,198,3,140,70,0,198,204,5,2,0,0,199,
        205,3,6,3,0,200,205,3,12,6,0,201,205,3,14,7,0,202,205,3,16,8,0,203,
        205,3,22,11,0,204,199,1,0,0,0,204,200,1,0,0,0,204,201,1,0,0,0,204,
        202,1,0,0,0,204,203,1,0,0,0,205,206,1,0,0,0,206,204,1,0,0,0,206,
        207,1,0,0,0,207,3,1,0,0,0,208,209,5,3,0,0,209,210,3,140,70,0,210,
        211,5,2,0,0,211,5,1,0,0,0,212,213,5,4,0,0,213,214,3,186,93,0,214,
        215,5,5,0,0,215,216,3,8,4,0,216,217,3,10,5,0,217,7,1,0,0,0,218,219,
        5,6,0,0,219,220,5,7,0,0,220,221,3,132,66,0,221,222,5,2,0,0,222,9,
        1,0,0,0,223,224,5,8,0,0,224,225,5,7,0,0,225,226,3,132,66,0,226,227,
        5,2,0,0,227,11,1,0,0,0,228,229,5,9,0,0,229,230,3,186,93,0,230,232,
        5,5,0,0,231,233,3,158,79,0,232,231,1,0,0,0,233,234,1,0,0,0,234,232,
        1,0,0,0,234,235,1,0,0,0,235,13,1,0,0,0,236,237,5,10,0,0,237,238,
        3,186,93,0,238,242,5,5,0,0,239,241,3,160,80,0,240,239,1,0,0,0,241,
        244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,15,1,0,0,0,244,242,
        1,0,0,0,245,246,5,11,0,0,246,247,3,186,93,0,247,251,5,5,0,0,248,
        250,3,18,9,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,0,0,251,
        252,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,256,3,52,26,0,255,
        254,1,0,0,0,256,257,1,0,0,0,257,255,1,0,0,0,257,258,1,0,0,0,258,
        262,1,0,0,0,259,261,3,20,10,0,260,259,1,0,0,0,261,264,1,0,0,0,262,
        260,1,0,0,0,262,263,1,0,0,0,263,17,1,0,0,0,264,262,1,0,0,0,265,266,
        5,12,0,0,266,267,3,146,73,0,267,268,5,7,0,0,268,269,3,138,69,0,269,
        270,5,2,0,0,270,19,1,0,0,0,271,272,5,13,0,0,272,273,3,156,78,0,273,
        274,5,7,0,0,274,275,3,138,69,0,275,276,5,2,0,0,276,21,1,0,0,0,277,
        278,5,14,0,0,278,279,3,186,93,0,279,283,5,5,0,0,280,282,3,24,12,
        0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,
        0,284,289,1,0,0,0,285,283,1,0,0,0,286,288,3,52,26,0,287,286,1,0,
        0,0,288,291,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,295,1,0,
        0,0,291,289,1,0,0,0,292,294,3,26,13,0,293,292,1,0,0,0,294,297,1,
        0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,299,1,0,0,0,297,295,1,
        0,0,0,298,300,3,28,14,0,299,298,1,0,0,0,299,300,1,0,0,0,300,23,1,
        0,0,0,301,302,5,12,0,0,302,303,3,146,73,0,303,304,5,7,0,0,304,305,
        3,130,65,0,305,306,5,2,0,0,306,25,1,0,0,0,307,308,5,13,0,0,308,309,
        3,156,78,0,309,310,5,7,0,0,310,311,3,130,65,0,311,312,5,2,0,0,312,
        27,1,0,0,0,313,314,5,15,0,0,314,315,3,186,93,0,315,319,5,5,0,0,316,
        318,3,30,15,0,317,316,1,0,0,0,318,321,1,0,0,0,319,317,1,0,0,0,319,
        320,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,322,324,3,32,16,0,323,
        322,1,0,0,0,324,325,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,
        29,1,0,0,0,327,328,5,12,0,0,328,329,3,146,73,0,329,330,5,7,0,0,330,
        331,3,134,67,0,331,332,5,2,0,0,332,31,1,0,0,0,333,344,3,34,17,0,
        334,344,3,36,18,0,335,344,3,38,19,0,336,344,3,40,20,0,337,344,3,
        42,21,0,338,344,3,44,22,0,339,344,3,46,23,0,340,344,3,48,24,0,341,
        344,3,50,25,0,342,344,3,52,26,0,343,333,1,0,0,0,343,334,1,0,0,0,
        343,335,1,0,0,0,343,336,1,0,0,0,343,337,1,0,0,0,343,338,1,0,0,0,
        343,339,1,0,0,0,343,340,1,0,0,0,343,341,1,0,0,0,343,342,1,0,0,0,
        344,33,1,0,0,0,345,346,5,16,0,0,346,347,3,186,93,0,347,348,5,17,
        0,0,348,349,3,156,78,0,349,350,5,18,0,0,350,351,5,19,0,0,351,352,
        3,148,74,0,352,353,5,2,0,0,353,35,1,0,0,0,354,355,5,20,0,0,355,356,
        3,186,93,0,356,357,5,17,0,0,357,358,3,156,78,0,358,359,5,18,0,0,
        359,360,5,19,0,0,360,361,3,148,74,0,361,362,5,2,0,0,362,37,1,0,0,
        0,363,364,5,21,0,0,364,365,3,186,93,0,365,366,5,17,0,0,366,367,3,
        156,78,0,367,368,5,18,0,0,368,369,3,156,78,0,369,370,5,19,0,0,370,
        371,3,148,74,0,371,372,5,2,0,0,372,39,1,0,0,0,373,374,5,22,0,0,374,
        375,3,156,78,0,375,376,5,19,0,0,376,377,3,186,93,0,377,378,5,17,
        0,0,378,379,3,156,78,0,379,380,5,18,0,0,380,381,5,2,0,0,381,41,1,
        0,0,0,382,383,5,23,0,0,383,384,3,186,93,0,384,385,5,17,0,0,385,386,
        3,156,78,0,386,387,5,18,0,0,387,388,5,2,0,0,388,43,1,0,0,0,389,393,
        5,24,0,0,390,392,3,156,78,0,391,390,1,0,0,0,392,395,1,0,0,0,393,
        391,1,0,0,0,393,394,1,0,0,0,394,396,1,0,0,0,395,393,1,0,0,0,396,
        397,5,19,0,0,397,398,3,148,74,0,398,403,5,7,0,0,399,404,3,116,58,
        0,400,404,3,118,59,0,401,404,3,122,61,0,402,404,3,120,60,0,403,399,
        1,0,0,0,403,400,1,0,0,0,403,401,1,0,0,0,403,402,1,0,0,0,404,405,
        1,0,0,0,405,406,5,2,0,0,406,45,1,0,0,0,407,408,5,25,0,0,408,409,
        3,184,92,0,409,410,5,2,0,0,410,47,1,0,0,0,411,412,3,182,91,0,412,
        413,3,156,78,0,413,414,3,156,78,0,414,415,5,26,0,0,415,416,3,184,
        92,0,416,417,5,2,0,0,417,49,1,0,0,0,418,419,5,27,0,0,419,420,3,148,
        74,0,420,421,5,2,0,0,421,51,1,0,0,0,422,434,3,54,27,0,423,434,3,
        56,28,0,424,434,3,58,29,0,425,434,3,60,30,0,426,434,3,62,31,0,427,
        434,3,64,32,0,428,434,3,70,35,0,429,434,3,72,36,0,430,434,3,74,37,
        0,431,434,3,76,38,0,432,434,3,78,39,0,433,422,1,0,0,0,433,423,1,
        0,0,0,433,424,1,0,0,0,433,425,1,0,0,0,433,426,1,0,0,0,433,427,1,
        0,0,0,433,428,1,0,0,0,433,429,1,0,0,0,433,430,1,0,0,0,433,431,1,
        0,0,0,433,432,1,0,0,0,434,53,1,0,0,0,435,436,3,166,83,0,436,437,
        3,156,78,0,437,438,5,19,0,0,438,439,3,148,74,0,439,440,5,2,0,0,440,
        55,1,0,0,0,441,442,3,168,84,0,442,443,3,156,78,0,443,444,3,156,78,
        0,444,445,5,19,0,0,445,446,3,148,74,0,446,447,5,2,0,0,447,57,1,0,
        0,0,448,449,5,28,0,0,449,450,3,156,78,0,450,451,3,156,78,0,451,452,
        3,156,78,0,452,453,5,19,0,0,453,454,3,148,74,0,454,455,5,2,0,0,455,
        59,1,0,0,0,456,457,3,170,85,0,457,458,3,156,78,0,458,459,3,156,78,
        0,459,460,5,19,0,0,460,461,3,148,74,0,461,462,5,2,0,0,462,61,1,0,
        0,0,463,464,3,172,86,0,464,465,3,156,78,0,465,466,3,156,78,0,466,
        467,5,2,0,0,467,63,1,0,0,0,468,469,3,174,87,0,469,470,3,156,78,0,
        470,471,3,156,78,0,471,472,5,19,0,0,472,473,3,148,74,0,473,477,5,
        7,0,0,474,478,3,118,59,0,475,478,3,110,55,0,476,478,3,112,56,0,477,
        474,1,0,0,0,477,475,1,0,0,0,477,476,1,0,0,0,478,479,1,0,0,0,479,
        480,5,2,0,0,480,65,1,0,0,0,481,482,3,176,88,0,482,483,3,156,78,0,
        483,484,5,19,0,0,484,485,3,148,74,0,485,491,5,7,0,0,486,492,3,116,
        58,0,487,492,3,118,59,0,488,492,3,122,61,0,489,492,3,126,63,0,490,
        492,3,186,93,0,491,486,1,0,0,0,491,487,1,0,0,0,491,488,1,0,0,0,491,
        489,1,0,0,0,491,490,1,0,0,0,492,493,1,0,0,0,493,494,5,2,0,0,494,
        67,1,0,0,0,495,496,3,178,89,0,496,497,3,156,78,0,497,498,3,156,78,
        0,498,499,5,19,0,0,499,500,3,148,74,0,500,506,5,7,0,0,501,507,3,
        116,58,0,502,507,3,118,59,0,503,507,3,122,61,0,504,507,3,126,63,
        0,505,507,3,186,93,0,506,501,1,0,0,0,506,502,1,0,0,0,506,503,1,0,
        0,0,506,504,1,0,0,0,506,505,1,0,0,0,507,508,1,0,0,0,508,509,5,2,
        0,0,509,69,1,0,0,0,510,513,3,66,33,0,511,513,3,68,34,0,512,510,1,
        0,0,0,512,511,1,0,0,0,513,71,1,0,0,0,514,515,7,0,0,0,515,516,3,156,
        78,0,516,517,3,156,78,0,517,518,3,156,78,0,518,519,5,19,0,0,519,
        520,3,148,74,0,520,521,5,2,0,0,521,73,1,0,0,0,522,524,3,180,90,0,
        523,525,3,156,78,0,524,523,1,0,0,0,525,526,1,0,0,0,526,524,1,0,0,
        0,526,527,1,0,0,0,527,528,1,0,0,0,528,529,5,19,0,0,529,530,3,148,
        74,0,530,531,5,7,0,0,531,532,3,164,82,0,532,533,5,2,0,0,533,75,1,
        0,0,0,534,537,5,31,0,0,535,538,3,162,81,0,536,538,3,186,93,0,537,
        535,1,0,0,0,537,536,1,0,0,0,538,542,1,0,0,0,539,541,3,156,78,0,540,
        539,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,1,0,0,0,543,
        551,1,0,0,0,544,542,1,0,0,0,545,547,5,19,0,0,546,548,3,148,74,0,
        547,546,1,0,0,0,548,549,1,0,0,0,549,547,1,0,0,0,549,550,1,0,0,0,
        550,552,1,0,0,0,551,545,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,
        553,554,5,2,0,0,554,77,1,0,0,0,555,556,5,32,0,0,556,560,3,186,93,
        0,557,559,3,156,78,0,558,557,1,0,0,0,559,562,1,0,0,0,560,558,1,0,
        0,0,560,561,1,0,0,0,561,563,1,0,0,0,562,560,1,0,0,0,563,564,5,19,
        0,0,564,565,3,148,74,0,565,566,5,2,0,0,566,79,1,0,0,0,567,572,3,
        94,47,0,568,572,3,98,49,0,569,572,3,100,50,0,570,572,3,102,51,0,
        571,567,1,0,0,0,571,568,1,0,0,0,571,569,1,0,0,0,571,570,1,0,0,0,
        572,81,1,0,0,0,573,575,5,33,0,0,574,573,1,0,0,0,574,575,1,0,0,0,
        575,583,1,0,0,0,576,580,5,136,0,0,577,579,5,34,0,0,578,577,1,0,0,
        0,579,582,1,0,0,0,580,578,1,0,0,0,580,581,1,0,0,0,581,584,1,0,0,
        0,582,580,1,0,0,0,583,576,1,0,0,0,584,585,1,0,0,0,585,583,1,0,0,
        0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,3,106,53,0,588,83,1,0,
        0,0,589,591,5,33,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,599,1,0,
        0,0,592,596,5,136,0,0,593,595,5,34,0,0,594,593,1,0,0,0,595,598,1,
        0,0,0,596,594,1,0,0,0,596,597,1,0,0,0,597,600,1,0,0,0,598,596,1,
        0,0,0,599,592,1,0,0,0,600,601,1,0,0,0,601,599,1,0,0,0,601,602,1,
        0,0,0,602,603,1,0,0,0,603,604,3,104,52,0,604,85,1,0,0,0,605,608,
        3,82,41,0,606,608,3,84,42,0,607,605,1,0,0,0,607,606,1,0,0,0,608,
        87,1,0,0,0,609,611,5,33,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,
        619,1,0,0,0,612,616,5,136,0,0,613,615,5,34,0,0,614,613,1,0,0,0,615,
        618,1,0,0,0,616,614,1,0,0,0,616,617,1,0,0,0,617,620,1,0,0,0,618,
        616,1,0,0,0,619,612,1,0,0,0,620,621,1,0,0,0,621,619,1,0,0,0,621,
        622,1,0,0,0,622,623,1,0,0,0,623,624,3,110,55,0,624,89,1,0,0,0,625,
        627,5,33,0,0,626,625,1,0,0,0,626,627,1,0,0,0,627,635,1,0,0,0,628,
        632,5,136,0,0,629,631,5,34,0,0,630,629,1,0,0,0,631,634,1,0,0,0,632,
        630,1,0,0,0,632,633,1,0,0,0,633,636,1,0,0,0,634,632,1,0,0,0,635,
        628,1,0,0,0,636,637,1,0,0,0,637,635,1,0,0,0,637,638,1,0,0,0,638,
        639,1,0,0,0,639,640,3,112,56,0,640,91,1,0,0,0,641,643,5,33,0,0,642,
        641,1,0,0,0,642,643,1,0,0,0,643,651,1,0,0,0,644,648,5,136,0,0,645,
        647,5,34,0,0,646,645,1,0,0,0,647,650,1,0,0,0,648,646,1,0,0,0,648,
        649,1,0,0,0,649,652,1,0,0,0,650,648,1,0,0,0,651,644,1,0,0,0,652,
        653,1,0,0,0,653,651,1,0,0,0,653,654,1,0,0,0,654,655,1,0,0,0,655,
        656,3,114,57,0,656,93,1,0,0,0,657,662,3,86,43,0,658,662,3,88,44,
        0,659,662,3,90,45,0,660,662,3,92,46,0,661,657,1,0,0,0,661,658,1,
        0,0,0,661,659,1,0,0,0,661,660,1,0,0,0,662,95,1,0,0,0,663,665,5,33,
        0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,673,1,0,0,0,666,670,5,136,
        0,0,667,669,5,34,0,0,668,667,1,0,0,0,669,672,1,0,0,0,670,668,1,0,
        0,0,670,671,1,0,0,0,671,674,1,0,0,0,672,670,1,0,0,0,673,666,1,0,
        0,0,674,675,1,0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,677,1,0,
        0,0,677,678,5,35,0,0,678,97,1,0,0,0,679,680,5,132,0,0,680,99,1,0,
        0,0,681,682,5,133,0,0,682,101,1,0,0,0,683,684,7,1,0,0,684,103,1,
        0,0,0,685,686,7,2,0,0,686,105,1,0,0,0,687,688,7,3,0,0,688,107,1,
        0,0,0,689,692,3,104,52,0,690,692,3,106,53,0,691,689,1,0,0,0,691,
        690,1,0,0,0,692,109,1,0,0,0,693,694,5,47,0,0,694,111,1,0,0,0,695,
        696,5,48,0,0,696,113,1,0,0,0,697,698,5,49,0,0,698,115,1,0,0,0,699,
        704,3,108,54,0,700,704,3,110,55,0,701,704,3,112,56,0,702,704,3,114,
        57,0,703,699,1,0,0,0,703,700,1,0,0,0,703,701,1,0,0,0,703,702,1,0,
        0,0,704,117,1,0,0,0,705,706,5,50,0,0,706,119,1,0,0,0,707,708,5,51,
        0,0,708,121,1,0,0,0,709,710,5,52,0,0,710,123,1,0,0,0,711,716,3,116,
        58,0,712,716,3,118,59,0,713,716,3,122,61,0,714,716,3,120,60,0,715,
        711,1,0,0,0,715,712,1,0,0,0,715,713,1,0,0,0,715,714,1,0,0,0,716,
        125,1,0,0,0,717,718,5,17,0,0,718,719,3,128,64,0,719,720,5,2,0,0,
        720,721,3,96,48,0,721,722,5,18,0,0,722,127,1,0,0,0,723,727,3,124,
        62,0,724,727,3,126,63,0,725,727,3,186,93,0,726,723,1,0,0,0,726,724,
        1,0,0,0,726,725,1,0,0,0,727,129,1,0,0,0,728,729,3,128,64,0,729,730,
        5,53,0,0,730,747,1,0,0,0,731,732,3,128,64,0,732,733,5,54,0,0,733,
        747,1,0,0,0,734,735,3,128,64,0,735,736,5,55,0,0,736,747,1,0,0,0,
        737,738,3,186,93,0,738,739,5,56,0,0,739,747,1,0,0,0,740,741,3,162,
        81,0,741,742,5,56,0,0,742,747,1,0,0,0,743,744,3,162,81,0,744,745,
        5,57,0,0,745,747,1,0,0,0,746,728,1,0,0,0,746,731,1,0,0,0,746,734,
        1,0,0,0,746,737,1,0,0,0,746,740,1,0,0,0,746,743,1,0,0,0,747,131,
        1,0,0,0,748,749,3,128,64,0,749,750,5,54,0,0,750,133,1,0,0,0,751,
        752,3,128,64,0,752,753,5,54,0,0,753,758,1,0,0,0,754,755,3,162,81,
        0,755,756,5,57,0,0,756,758,1,0,0,0,757,751,1,0,0,0,757,754,1,0,0,
        0,758,135,1,0,0,0,759,760,3,128,64,0,760,761,7,4,0,0,761,137,1,0,
        0,0,762,763,3,162,81,0,763,764,5,57,0,0,764,773,1,0,0,0,765,766,
        3,162,81,0,766,767,5,56,0,0,767,773,1,0,0,0,768,769,3,186,93,0,769,
        770,5,56,0,0,770,773,1,0,0,0,771,773,3,128,64,0,772,762,1,0,0,0,
        772,765,1,0,0,0,772,768,1,0,0,0,772,771,1,0,0,0,773,139,1,0,0,0,
        774,775,3,142,71,0,775,776,5,58,0,0,776,777,3,144,72,0,777,141,1,
        0,0,0,778,779,3,186,93,0,779,143,1,0,0,0,780,781,3,186,93,0,781,
        145,1,0,0,0,782,783,5,134,0,0,783,147,1,0,0,0,784,788,3,146,73,0,
        785,787,3,150,75,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,
        0,788,789,1,0,0,0,789,149,1,0,0,0,790,788,1,0,0,0,791,794,3,152,
        76,0,792,794,3,154,77,0,793,791,1,0,0,0,793,792,1,0,0,0,794,151,
        1,0,0,0,795,796,5,58,0,0,796,797,3,186,93,0,797,153,1,0,0,0,798,
        799,5,17,0,0,799,800,3,96,48,0,800,801,5,18,0,0,801,810,1,0,0,0,
        802,804,5,17,0,0,803,805,5,136,0,0,804,803,1,0,0,0,805,806,1,0,0,
        0,806,804,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,810,5,18,0,
        0,809,798,1,0,0,0,809,802,1,0,0,0,810,155,1,0,0,0,811,819,3,80,40,
        0,812,819,5,59,0,0,813,819,3,148,74,0,814,819,3,140,70,0,815,819,
        5,60,0,0,816,819,5,61,0,0,817,819,5,62,0,0,818,811,1,0,0,0,818,812,
        1,0,0,0,818,813,1,0,0,0,818,814,1,0,0,0,818,815,1,0,0,0,818,816,
        1,0,0,0,818,817,1,0,0,0,819,157,1,0,0,0,820,821,3,186,93,0,821,822,
        5,7,0,0,822,823,3,128,64,0,823,824,5,2,0,0,824,159,1,0,0,0,825,826,
        3,186,93,0,826,827,5,7,0,0,827,828,3,136,68,0,828,829,5,2,0,0,829,
        161,1,0,0,0,830,831,3,140,70,0,831,832,5,63,0,0,832,833,3,186,93,
        0,833,163,1,0,0,0,834,839,3,138,69,0,835,839,3,162,81,0,836,839,
        5,64,0,0,837,839,5,65,0,0,838,834,1,0,0,0,838,835,1,0,0,0,838,836,
        1,0,0,0,838,837,1,0,0,0,839,165,1,0,0,0,840,841,7,5,0,0,841,167,
        1,0,0,0,842,843,7,6,0,0,843,169,1,0,0,0,844,845,7,7,0,0,845,171,
        1,0,0,0,846,847,7,8,0,0,847,173,1,0,0,0,848,849,7,9,0,0,849,175,
        1,0,0,0,850,851,7,10,0,0,851,177,1,0,0,0,852,853,7,11,0,0,853,179,
        1,0,0,0,854,855,7,12,0,0,855,181,1,0,0,0,856,857,7,13,0,0,857,183,
        1,0,0,0,858,859,3,186,93,0,859,185,1,0,0,0,860,861,5,135,0,0,861,
        187,1,0,0,0,62,193,204,206,234,242,251,257,262,283,289,295,299,319,
        325,343,393,403,433,477,491,506,512,526,537,542,549,551,560,571,
        574,580,585,590,596,601,607,610,616,621,626,632,637,642,648,653,
        661,664,670,675,691,703,715,726,746,757,772,788,793,806,809,818,
        838
    ]

class AleoParser ( Parser ):

    grammarFileName = "Aleo.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'program'", "';'", "'import'", "'mapping'", 
                     "':'", "'key'", "'as'", "'value'", "'struct'", "'record'", 
                     "'closure'", "'input'", "'output'", "'function'", "'finalize'", 
                     "'contains'", "'['", "']'", "'into'", "'get'", "'get.or_use'", 
                     "'set'", "'remove'", "'rand.chacha'", "'position'", 
                     "'to'", "'await'", "'ternary'", "'sign.verify'", "'sign_verify'", 
                     "'call'", "'async'", "'-'", "'_'", "'u32'", "'true'", 
                     "'false'", "'u8'", "'u16'", "'u64'", "'u128'", "'i8'", 
                     "'i16'", "'i32'", "'i64'", "'i128'", "'field'", "'group'", 
                     "'scalar'", "'address'", "'boolean'", "'signature'", 
                     "'.constant'", "'.public'", "'.private'", "'.record'", 
                     "'.future'", "'.'", "'group::GEN'", "'self.signer'", 
                     "'self.caller'", "'block.height'", "'/'", "'group.x'", 
                     "'group.y'", "'abs'", "'abs.w'", "'double'", "'inv'", 
                     "'neg'", "'not'", "'square'", "'sqrt'", "'add'", "'add.w'", 
                     "'sub'", "'sub.w'", "'mul'", "'mul.w'", "'div'", "'div.w'", 
                     "'rem'", "'rem.w'", "'pow'", "'pow.w'", "'shl'", "'shl.w'", 
                     "'shr'", "'shr.w'", "'mod'", "'and'", "'or'", "'xor'", 
                     "'nand'", "'nor'", "'gt'", "'gte'", "'lt'", "'lte'", 
                     "'is.eq'", "'is.neq'", "'assert.eq'", "'assert.neq'", 
                     "'commit.bhp256'", "'commit.bhp512'", "'commit.bhp768'", 
                     "'commit.bhp1024'", "'commit.ped64'", "'commit.ped128'", 
                     "'hash.bhp256'", "'hash.bhp512'", "'hash.bhp768'", 
                     "'hash.bhp1024'", "'hash.ped64'", "'hash.ped128'", 
                     "'hash.psd2'", "'hash.psd4'", "'hash.psd8'", "'hash.keccak256'", 
                     "'hash.keccak384'", "'hash.keccak512'", "'hash.sha3_256'", 
                     "'hash.sha3_384'", "'hash.sha3_512'", "'hash_many.psd2'", 
                     "'hash_many.psd4'", "'hash_many.psd8'", "'cast.lossy'", 
                     "'cast'", "'branch.eq'", "'branch.neq'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "ADDRESS_LITERAL", "SIGNATURE_LITERAL", "REGISTER", 
                      "IDENTIFIER", "DIGIT", "WS", "COMMENT", "LINE_COMMENT" ]

    RULE_start = 0
    RULE_program = 1
    RULE_ximport = 2
    RULE_mapping = 3
    RULE_mapping_key = 4
    RULE_mapping_value = 5
    RULE_struct = 6
    RULE_record = 7
    RULE_closure = 8
    RULE_closure_input = 9
    RULE_closure_output = 10
    RULE_function = 11
    RULE_function_input = 12
    RULE_function_output = 13
    RULE_finalize = 14
    RULE_finalize_input = 15
    RULE_command = 16
    RULE_contains = 17
    RULE_get = 18
    RULE_get_or_use = 19
    RULE_set = 20
    RULE_remove = 21
    RULE_random = 22
    RULE_position = 23
    RULE_branch = 24
    RULE_xawait = 25
    RULE_instruction = 26
    RULE_unary = 27
    RULE_binary = 28
    RULE_ternary = 29
    RULE_is = 30
    RULE_assert = 31
    RULE_commit = 32
    RULE_hash1 = 33
    RULE_hash2 = 34
    RULE_hash = 35
    RULE_signverify = 36
    RULE_cast = 37
    RULE_call = 38
    RULE_xasync = 39
    RULE_literal = 40
    RULE_signed_literal = 41
    RULE_unsigned_literal = 42
    RULE_integer_literal = 43
    RULE_field_literal = 44
    RULE_group_literal = 45
    RULE_scalar_literal = 46
    RULE_arithmetic_literal = 47
    RULE_u32_literal = 48
    RULE_address_literal = 49
    RULE_signature_literal = 50
    RULE_boolean_literal = 51
    RULE_unsigned_type = 52
    RULE_signed_type = 53
    RULE_integer_type = 54
    RULE_field_type = 55
    RULE_group_type = 56
    RULE_scalar_type = 57
    RULE_arithmetic_type = 58
    RULE_address_type = 59
    RULE_boolean_type = 60
    RULE_signature_type = 61
    RULE_literal_type = 62
    RULE_array_type = 63
    RULE_plaintext_type = 64
    RULE_value_type = 65
    RULE_mapping_type = 66
    RULE_finalize_type = 67
    RULE_entry_type = 68
    RULE_register_type = 69
    RULE_program_id = 70
    RULE_program_name = 71
    RULE_program_domain = 72
    RULE_register = 73
    RULE_register_access = 74
    RULE_register_accessor = 75
    RULE_access_by_field = 76
    RULE_access_by_index = 77
    RULE_operand = 78
    RULE_tuple = 79
    RULE_entry = 80
    RULE_locator = 81
    RULE_cast_destination = 82
    RULE_unary_op = 83
    RULE_binary_op = 84
    RULE_is_op = 85
    RULE_assert_op = 86
    RULE_commit_op = 87
    RULE_hash1_op = 88
    RULE_hash2_op = 89
    RULE_cast_op = 90
    RULE_branch_op = 91
    RULE_label = 92
    RULE_identifier = 93

    ruleNames =  [ "start", "program", "ximport", "mapping", "mapping_key", 
                   "mapping_value", "struct", "record", "closure", "closure_input", 
                   "closure_output", "function", "function_input", "function_output", 
                   "finalize", "finalize_input", "command", "contains", 
                   "get", "get_or_use", "set", "remove", "random", "position", 
                   "branch", "xawait", "instruction", "unary", "binary", 
                   "ternary", "is", "assert", "commit", "hash1", "hash2", 
                   "hash", "signverify", "cast", "call", "xasync", "literal", 
                   "signed_literal", "unsigned_literal", "integer_literal", 
                   "field_literal", "group_literal", "scalar_literal", "arithmetic_literal", 
                   "u32_literal", "address_literal", "signature_literal", 
                   "boolean_literal", "unsigned_type", "signed_type", "integer_type", 
                   "field_type", "group_type", "scalar_type", "arithmetic_type", 
                   "address_type", "boolean_type", "signature_type", "literal_type", 
                   "array_type", "plaintext_type", "value_type", "mapping_type", 
                   "finalize_type", "entry_type", "register_type", "program_id", 
                   "program_name", "program_domain", "register", "register_access", 
                   "register_accessor", "access_by_field", "access_by_index", 
                   "operand", "tuple", "entry", "locator", "cast_destination", 
                   "unary_op", "binary_op", "is_op", "assert_op", "commit_op", 
                   "hash1_op", "hash2_op", "cast_op", "branch_op", "label", 
                   "identifier" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    T__103=104
    T__104=105
    T__105=106
    T__106=107
    T__107=108
    T__108=109
    T__109=110
    T__110=111
    T__111=112
    T__112=113
    T__113=114
    T__114=115
    T__115=116
    T__116=117
    T__117=118
    T__118=119
    T__119=120
    T__120=121
    T__121=122
    T__122=123
    T__123=124
    T__124=125
    T__125=126
    T__126=127
    T__127=128
    T__128=129
    T__129=130
    T__130=131
    ADDRESS_LITERAL=132
    SIGNATURE_LITERAL=133
    REGISTER=134
    IDENTIFIER=135
    DIGIT=136
    WS=137
    COMMENT=138
    LINE_COMMENT=139

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program(self):
            return self.getTypedRuleContext(AleoParser.ProgramContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = AleoParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.program()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def ximport(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.XimportContext)
            else:
                return self.getTypedRuleContext(AleoParser.XimportContext,i)


        def mapping(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.MappingContext)
            else:
                return self.getTypedRuleContext(AleoParser.MappingContext,i)


        def struct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.StructContext)
            else:
                return self.getTypedRuleContext(AleoParser.StructContext,i)


        def record(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.RecordContext)
            else:
                return self.getTypedRuleContext(AleoParser.RecordContext,i)


        def closure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.ClosureContext)
            else:
                return self.getTypedRuleContext(AleoParser.ClosureContext,i)


        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.FunctionContext)
            else:
                return self.getTypedRuleContext(AleoParser.FunctionContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = AleoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3:
                self.state = 190
                self.ximport()
                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(AleoParser.T__0)
            self.state = 197
            self.program_id()
            self.state = 198
            self.match(AleoParser.T__1)
            self.state = 204 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 204
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [4]:
                    self.state = 199
                    self.mapping()
                    pass
                elif token in [9]:
                    self.state = 200
                    self.struct()
                    pass
                elif token in [10]:
                    self.state = 201
                    self.record()
                    pass
                elif token in [11]:
                    self.state = 202
                    self.closure()
                    pass
                elif token in [14]:
                    self.state = 203
                    self.function()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 206 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 19984) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XimportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_ximport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXimport" ):
                listener.enterXimport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXimport" ):
                listener.exitXimport(self)




    def ximport(self):

        localctx = AleoParser.XimportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ximport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(AleoParser.T__2)
            self.state = 209
            self.program_id()
            self.state = 210
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def mapping_key(self):
            return self.getTypedRuleContext(AleoParser.Mapping_keyContext,0)


        def mapping_value(self):
            return self.getTypedRuleContext(AleoParser.Mapping_valueContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = AleoParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self.match(AleoParser.T__3)
            self.state = 213
            self.identifier()
            self.state = 214
            self.match(AleoParser.T__4)
            self.state = 215
            self.mapping_key()
            self.state = 216
            self.mapping_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapping_type(self):
            return self.getTypedRuleContext(AleoParser.Mapping_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_mapping_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_key" ):
                listener.enterMapping_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_key" ):
                listener.exitMapping_key(self)




    def mapping_key(self):

        localctx = AleoParser.Mapping_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_mapping_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(AleoParser.T__5)
            self.state = 219
            self.match(AleoParser.T__6)
            self.state = 220
            self.mapping_type()
            self.state = 221
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def mapping_type(self):
            return self.getTypedRuleContext(AleoParser.Mapping_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_mapping_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_value" ):
                listener.enterMapping_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_value" ):
                listener.exitMapping_value(self)




    def mapping_value(self):

        localctx = AleoParser.Mapping_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_mapping_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(AleoParser.T__7)
            self.state = 224
            self.match(AleoParser.T__6)
            self.state = 225
            self.mapping_type()
            self.state = 226
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def tuple_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.TupleContext)
            else:
                return self.getTypedRuleContext(AleoParser.TupleContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_struct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)




    def struct(self):

        localctx = AleoParser.StructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_struct)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(AleoParser.T__8)
            self.state = 229
            self.identifier()
            self.state = 230
            self.match(AleoParser.T__4)
            self.state = 232 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 231
                self.tuple_()
                self.state = 234 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==135):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.EntryContext)
            else:
                return self.getTypedRuleContext(AleoParser.EntryContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_record

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord" ):
                listener.enterRecord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord" ):
                listener.exitRecord(self)




    def record(self):

        localctx = AleoParser.RecordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_record)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(AleoParser.T__9)
            self.state = 237
            self.identifier()
            self.state = 238
            self.match(AleoParser.T__4)
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==135:
                self.state = 239
                self.entry()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def closure_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Closure_inputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Closure_inputContext,i)


        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.InstructionContext)
            else:
                return self.getTypedRuleContext(AleoParser.InstructionContext,i)


        def closure_output(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Closure_outputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Closure_outputContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_closure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure" ):
                listener.enterClosure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure" ):
                listener.exitClosure(self)




    def closure(self):

        localctx = AleoParser.ClosureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_closure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(AleoParser.T__10)
            self.state = 246
            self.identifier()
            self.state = 247
            self.match(AleoParser.T__4)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12:
                self.state = 248
                self.closure_input()
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 255 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 254
                self.instruction()
                self.state = 257 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8321499136) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1) != 0)):
                    break

            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 259
                self.closure_output()
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def register_type(self):
            return self.getTypedRuleContext(AleoParser.Register_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_closure_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_input" ):
                listener.enterClosure_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_input" ):
                listener.exitClosure_input(self)




    def closure_input(self):

        localctx = AleoParser.Closure_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_closure_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(AleoParser.T__11)
            self.state = 266
            self.register()
            self.state = 267
            self.match(AleoParser.T__6)
            self.state = 268
            self.register_type()
            self.state = 269
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_outputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def register_type(self):
            return self.getTypedRuleContext(AleoParser.Register_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_closure_output

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_output" ):
                listener.enterClosure_output(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_output" ):
                listener.exitClosure_output(self)




    def closure_output(self):

        localctx = AleoParser.Closure_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_closure_output)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(AleoParser.T__12)
            self.state = 272
            self.operand()
            self.state = 273
            self.match(AleoParser.T__6)
            self.state = 274
            self.register_type()
            self.state = 275
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def function_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Function_inputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Function_inputContext,i)


        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.InstructionContext)
            else:
                return self.getTypedRuleContext(AleoParser.InstructionContext,i)


        def function_output(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Function_outputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Function_outputContext,i)


        def finalize(self):
            return self.getTypedRuleContext(AleoParser.FinalizeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)




    def function(self):

        localctx = AleoParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self.match(AleoParser.T__13)
            self.state = 278
            self.identifier()
            self.state = 279
            self.match(AleoParser.T__4)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12:
                self.state = 280
                self.function_input()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8321499136) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & -1) != 0):
                self.state = 286
                self.instruction()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==13:
                self.state = 292
                self.function_output()
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==15:
                self.state = 298
                self.finalize()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def value_type(self):
            return self.getTypedRuleContext(AleoParser.Value_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_function_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_input" ):
                listener.enterFunction_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_input" ):
                listener.exitFunction_input(self)




    def function_input(self):

        localctx = AleoParser.Function_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_function_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(AleoParser.T__11)
            self.state = 302
            self.register()
            self.state = 303
            self.match(AleoParser.T__6)
            self.state = 304
            self.value_type()
            self.state = 305
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_outputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def value_type(self):
            return self.getTypedRuleContext(AleoParser.Value_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_function_output

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_output" ):
                listener.enterFunction_output(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_output" ):
                listener.exitFunction_output(self)




    def function_output(self):

        localctx = AleoParser.Function_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function_output)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 307
            self.match(AleoParser.T__12)
            self.state = 308
            self.operand()
            self.state = 309
            self.match(AleoParser.T__6)
            self.state = 310
            self.value_type()
            self.state = 311
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def finalize_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Finalize_inputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Finalize_inputContext,i)


        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.CommandContext)
            else:
                return self.getTypedRuleContext(AleoParser.CommandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_finalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalize" ):
                listener.enterFinalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalize" ):
                listener.exitFinalize(self)




    def finalize(self):

        localctx = AleoParser.FinalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_finalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 313
            self.match(AleoParser.T__14)
            self.state = 314
            self.identifier()
            self.state = 315
            self.match(AleoParser.T__4)
            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==12:
                self.state = 316
                self.finalize_input()
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 323 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 322
                self.command()
                self.state = 325 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 16)) & ~0x3f) == 0 and ((1 << (_la - 16)) & -1125899906712591) != 0) or ((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 4503599627370495) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finalize_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def finalize_type(self):
            return self.getTypedRuleContext(AleoParser.Finalize_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_finalize_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalize_input" ):
                listener.enterFinalize_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalize_input" ):
                listener.exitFinalize_input(self)




    def finalize_input(self):

        localctx = AleoParser.Finalize_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_finalize_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(AleoParser.T__11)
            self.state = 328
            self.register()
            self.state = 329
            self.match(AleoParser.T__6)
            self.state = 330
            self.finalize_type()
            self.state = 331
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contains(self):
            return self.getTypedRuleContext(AleoParser.ContainsContext,0)


        def get(self):
            return self.getTypedRuleContext(AleoParser.GetContext,0)


        def get_or_use(self):
            return self.getTypedRuleContext(AleoParser.Get_or_useContext,0)


        def set_(self):
            return self.getTypedRuleContext(AleoParser.SetContext,0)


        def remove(self):
            return self.getTypedRuleContext(AleoParser.RemoveContext,0)


        def random(self):
            return self.getTypedRuleContext(AleoParser.RandomContext,0)


        def position(self):
            return self.getTypedRuleContext(AleoParser.PositionContext,0)


        def branch(self):
            return self.getTypedRuleContext(AleoParser.BranchContext,0)


        def xawait(self):
            return self.getTypedRuleContext(AleoParser.XawaitContext,0)


        def instruction(self):
            return self.getTypedRuleContext(AleoParser.InstructionContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)




    def command(self):

        localctx = AleoParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_command)
        try:
            self.state = 343
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [16]:
                self.enterOuterAlt(localctx, 1)
                self.state = 333
                self.contains()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 2)
                self.state = 334
                self.get()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                self.get_or_use()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 4)
                self.state = 336
                self.set_()
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 5)
                self.state = 337
                self.remove()
                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 6)
                self.state = 338
                self.random()
                pass
            elif token in [25]:
                self.enterOuterAlt(localctx, 7)
                self.state = 339
                self.position()
                pass
            elif token in [130, 131]:
                self.enterOuterAlt(localctx, 8)
                self.state = 340
                self.branch()
                pass
            elif token in [27]:
                self.enterOuterAlt(localctx, 9)
                self.state = 341
                self.xawait()
                pass
            elif token in [28, 29, 30, 31, 32, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129]:
                self.enterOuterAlt(localctx, 10)
                self.state = 342
                self.instruction()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_contains

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContains" ):
                listener.enterContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContains" ):
                listener.exitContains(self)




    def contains(self):

        localctx = AleoParser.ContainsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_contains)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(AleoParser.T__15)
            self.state = 346
            self.identifier()
            self.state = 347
            self.match(AleoParser.T__16)
            self.state = 348
            self.operand()
            self.state = 349
            self.match(AleoParser.T__17)
            self.state = 350
            self.match(AleoParser.T__18)
            self.state = 351
            self.register_access()
            self.state = 352
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_get

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet" ):
                listener.enterGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet" ):
                listener.exitGet(self)




    def get(self):

        localctx = AleoParser.GetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_get)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(AleoParser.T__19)
            self.state = 355
            self.identifier()
            self.state = 356
            self.match(AleoParser.T__16)
            self.state = 357
            self.operand()
            self.state = 358
            self.match(AleoParser.T__17)
            self.state = 359
            self.match(AleoParser.T__18)
            self.state = 360
            self.register_access()
            self.state = 361
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_or_useContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_get_or_use

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_or_use" ):
                listener.enterGet_or_use(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_or_use" ):
                listener.exitGet_or_use(self)




    def get_or_use(self):

        localctx = AleoParser.Get_or_useContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_get_or_use)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(AleoParser.T__20)
            self.state = 364
            self.identifier()
            self.state = 365
            self.match(AleoParser.T__16)
            self.state = 366
            self.operand()
            self.state = 367
            self.match(AleoParser.T__17)
            self.state = 368
            self.operand()
            self.state = 369
            self.match(AleoParser.T__18)
            self.state = 370
            self.register_access()
            self.state = 371
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)




    def set_(self):

        localctx = AleoParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.match(AleoParser.T__21)
            self.state = 374
            self.operand()
            self.state = 375
            self.match(AleoParser.T__18)
            self.state = 376
            self.identifier()
            self.state = 377
            self.match(AleoParser.T__16)
            self.state = 378
            self.operand()
            self.state = 379
            self.match(AleoParser.T__17)
            self.state = 380
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = AleoParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_remove)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.match(AleoParser.T__22)
            self.state = 383
            self.identifier()
            self.state = 384
            self.match(AleoParser.T__16)
            self.state = 385
            self.operand()
            self.state = 386
            self.match(AleoParser.T__17)
            self.state = 387
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RandomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(AleoParser.Boolean_typeContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_random

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandom" ):
                listener.enterRandom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandom" ):
                listener.exitRandom(self)




    def random(self):

        localctx = AleoParser.RandomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_random)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 389
            self.match(AleoParser.T__23)
            self.state = 393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646911499299717120) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 31) != 0):
                self.state = 390
                self.operand()
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 396
            self.match(AleoParser.T__18)
            self.state = 397
            self.register_access()
            self.state = 398
            self.match(AleoParser.T__6)
            self.state = 403
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:
                self.state = 399
                self.arithmetic_type()
                pass
            elif token in [50]:
                self.state = 400
                self.address_type()
                pass
            elif token in [52]:
                self.state = 401
                self.signature_type()
                pass
            elif token in [51]:
                self.state = 402
                self.boolean_type()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 405
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def label(self):
            return self.getTypedRuleContext(AleoParser.LabelContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)




    def position(self):

        localctx = AleoParser.PositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_position)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.match(AleoParser.T__24)
            self.state = 408
            self.label()
            self.state = 409
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def branch_op(self):
            return self.getTypedRuleContext(AleoParser.Branch_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def label(self):
            return self.getTypedRuleContext(AleoParser.LabelContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranch" ):
                listener.enterBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranch" ):
                listener.exitBranch(self)




    def branch(self):

        localctx = AleoParser.BranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.branch_op()
            self.state = 412
            self.operand()
            self.state = 413
            self.operand()
            self.state = 414
            self.match(AleoParser.T__25)
            self.state = 415
            self.label()
            self.state = 416
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XawaitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_xawait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXawait" ):
                listener.enterXawait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXawait" ):
                listener.exitXawait(self)




    def xawait(self):

        localctx = AleoParser.XawaitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_xawait)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(AleoParser.T__26)
            self.state = 419
            self.register_access()
            self.state = 420
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(AleoParser.UnaryContext,0)


        def binary(self):
            return self.getTypedRuleContext(AleoParser.BinaryContext,0)


        def ternary(self):
            return self.getTypedRuleContext(AleoParser.TernaryContext,0)


        def is_(self):
            return self.getTypedRuleContext(AleoParser.IsContext,0)


        def assert_(self):
            return self.getTypedRuleContext(AleoParser.AssertContext,0)


        def commit(self):
            return self.getTypedRuleContext(AleoParser.CommitContext,0)


        def hash_(self):
            return self.getTypedRuleContext(AleoParser.HashContext,0)


        def signverify(self):
            return self.getTypedRuleContext(AleoParser.SignverifyContext,0)


        def cast(self):
            return self.getTypedRuleContext(AleoParser.CastContext,0)


        def call(self):
            return self.getTypedRuleContext(AleoParser.CallContext,0)


        def xasync(self):
            return self.getTypedRuleContext(AleoParser.XasyncContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)




    def instruction(self):

        localctx = AleoParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_instruction)
        try:
            self.state = 433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [66, 67, 68, 69, 70, 71, 72, 73]:
                self.enterOuterAlt(localctx, 1)
                self.state = 422
                self.unary()
                pass
            elif token in [74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 423
                self.binary()
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 3)
                self.state = 424
                self.ternary()
                pass
            elif token in [100, 101]:
                self.enterOuterAlt(localctx, 4)
                self.state = 425
                self.is_()
                pass
            elif token in [102, 103]:
                self.enterOuterAlt(localctx, 5)
                self.state = 426
                self.assert_()
                pass
            elif token in [104, 105, 106, 107, 108, 109]:
                self.enterOuterAlt(localctx, 6)
                self.state = 427
                self.commit()
                pass
            elif token in [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127]:
                self.enterOuterAlt(localctx, 7)
                self.state = 428
                self.hash_()
                pass
            elif token in [29, 30]:
                self.enterOuterAlt(localctx, 8)
                self.state = 429
                self.signverify()
                pass
            elif token in [128, 129]:
                self.enterOuterAlt(localctx, 9)
                self.state = 430
                self.cast()
                pass
            elif token in [31]:
                self.enterOuterAlt(localctx, 10)
                self.state = 431
                self.call()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 11)
                self.state = 432
                self.xasync()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_op(self):
            return self.getTypedRuleContext(AleoParser.Unary_opContext,0)


        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)




    def unary(self):

        localctx = AleoParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.unary_op()
            self.state = 436
            self.operand()
            self.state = 437
            self.match(AleoParser.T__18)
            self.state = 438
            self.register_access()
            self.state = 439
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_op(self):
            return self.getTypedRuleContext(AleoParser.Binary_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)




    def binary(self):

        localctx = AleoParser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_binary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.binary_op()
            self.state = 442
            self.operand()
            self.state = 443
            self.operand()
            self.state = 444
            self.match(AleoParser.T__18)
            self.state = 445
            self.register_access()
            self.state = 446
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TernaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_ternary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernary" ):
                listener.enterTernary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernary" ):
                listener.exitTernary(self)




    def ternary(self):

        localctx = AleoParser.TernaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ternary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448
            self.match(AleoParser.T__27)
            self.state = 449
            self.operand()
            self.state = 450
            self.operand()
            self.state = 451
            self.operand()
            self.state = 452
            self.match(AleoParser.T__18)
            self.state = 453
            self.register_access()
            self.state = 454
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def is_op(self):
            return self.getTypedRuleContext(AleoParser.Is_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_is

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs" ):
                listener.enterIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs" ):
                listener.exitIs(self)




    def is_(self):

        localctx = AleoParser.IsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_is)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 456
            self.is_op()
            self.state = 457
            self.operand()
            self.state = 458
            self.operand()
            self.state = 459
            self.match(AleoParser.T__18)
            self.state = 460
            self.register_access()
            self.state = 461
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assert_op(self):
            return self.getTypedRuleContext(AleoParser.Assert_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_assert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert" ):
                listener.enterAssert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert" ):
                listener.exitAssert(self)




    def assert_(self):

        localctx = AleoParser.AssertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_assert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463
            self.assert_op()
            self.state = 464
            self.operand()
            self.state = 465
            self.operand()
            self.state = 466
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commit_op(self):
            return self.getTypedRuleContext(AleoParser.Commit_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def field_type(self):
            return self.getTypedRuleContext(AleoParser.Field_typeContext,0)


        def group_type(self):
            return self.getTypedRuleContext(AleoParser.Group_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_commit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)




    def commit(self):

        localctx = AleoParser.CommitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_commit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 468
            self.commit_op()
            self.state = 469
            self.operand()
            self.state = 470
            self.operand()
            self.state = 471
            self.match(AleoParser.T__18)
            self.state = 472
            self.register_access()
            self.state = 473
            self.match(AleoParser.T__6)
            self.state = 477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [50]:
                self.state = 474
                self.address_type()
                pass
            elif token in [47]:
                self.state = 475
                self.field_type()
                pass
            elif token in [48]:
                self.state = 476
                self.group_type()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 479
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash1_op(self):
            return self.getTypedRuleContext(AleoParser.Hash1_opContext,0)


        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(AleoParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_hash1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash1" ):
                listener.enterHash1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash1" ):
                listener.exitHash1(self)




    def hash1(self):

        localctx = AleoParser.Hash1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_hash1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 481
            self.hash1_op()
            self.state = 482
            self.operand()
            self.state = 483
            self.match(AleoParser.T__18)
            self.state = 484
            self.register_access()
            self.state = 485
            self.match(AleoParser.T__6)
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:
                self.state = 486
                self.arithmetic_type()
                pass
            elif token in [50]:
                self.state = 487
                self.address_type()
                pass
            elif token in [52]:
                self.state = 488
                self.signature_type()
                pass
            elif token in [17]:
                self.state = 489
                self.array_type()
                pass
            elif token in [135]:
                self.state = 490
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 493
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash2_op(self):
            return self.getTypedRuleContext(AleoParser.Hash2_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(AleoParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_hash2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash2" ):
                listener.enterHash2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash2" ):
                listener.exitHash2(self)




    def hash2(self):

        localctx = AleoParser.Hash2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_hash2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.hash2_op()
            self.state = 496
            self.operand()
            self.state = 497
            self.operand()
            self.state = 498
            self.match(AleoParser.T__18)
            self.state = 499
            self.register_access()
            self.state = 500
            self.match(AleoParser.T__6)
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:
                self.state = 501
                self.arithmetic_type()
                pass
            elif token in [50]:
                self.state = 502
                self.address_type()
                pass
            elif token in [52]:
                self.state = 503
                self.signature_type()
                pass
            elif token in [17]:
                self.state = 504
                self.array_type()
                pass
            elif token in [135]:
                self.state = 505
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 508
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash1(self):
            return self.getTypedRuleContext(AleoParser.Hash1Context,0)


        def hash2(self):
            return self.getTypedRuleContext(AleoParser.Hash2Context,0)


        def getRuleIndex(self):
            return AleoParser.RULE_hash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash" ):
                listener.enterHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash" ):
                listener.exitHash(self)




    def hash_(self):

        localctx = AleoParser.HashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_hash)
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 510
                self.hash1()
                pass
            elif token in [125, 126, 127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 511
                self.hash2()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignverifyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_signverify

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignverify" ):
                listener.enterSignverify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignverify" ):
                listener.exitSignverify(self)




    def signverify(self):

        localctx = AleoParser.SignverifyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_signverify)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            _la = self._input.LA(1)
            if not(_la==29 or _la==30):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 515
            self.operand()
            self.state = 516
            self.operand()
            self.state = 517
            self.operand()
            self.state = 518
            self.match(AleoParser.T__18)
            self.state = 519
            self.register_access()
            self.state = 520
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_op(self):
            return self.getTypedRuleContext(AleoParser.Cast_opContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def cast_destination(self):
            return self.getTypedRuleContext(AleoParser.Cast_destinationContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_cast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)




    def cast(self):

        localctx = AleoParser.CastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_cast)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 522
            self.cast_op()
            self.state = 524 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 523
                self.operand()
                self.state = 526 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 8646911499299717120) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 31) != 0)):
                    break

            self.state = 528
            self.match(AleoParser.T__18)
            self.state = 529
            self.register_access()
            self.state = 530
            self.match(AleoParser.T__6)
            self.state = 531
            self.cast_destination()
            self.state = 532
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def register_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Register_accessContext)
            else:
                return self.getTypedRuleContext(AleoParser.Register_accessContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)




    def call(self):

        localctx = AleoParser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(AleoParser.T__30)
            self.state = 537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 535
                self.locator()
                pass

            elif la_ == 2:
                self.state = 536
                self.identifier()
                pass


            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646911499299717120) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 31) != 0):
                self.state = 539
                self.operand()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 545
                self.match(AleoParser.T__18)
                self.state = 547 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 546
                    self.register_access()
                    self.state = 549 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==134):
                        break



            self.state = 553
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XasyncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_xasync

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXasync" ):
                listener.enterXasync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXasync" ):
                listener.exitXasync(self)




    def xasync(self):

        localctx = AleoParser.XasyncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_xasync)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 555
            self.match(AleoParser.T__31)
            self.state = 556
            self.identifier()
            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 8646911499299717120) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & 31) != 0):
                self.state = 557
                self.operand()
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 563
            self.match(AleoParser.T__18)
            self.state = 564
            self.register_access()
            self.state = 565
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_literal(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_literalContext,0)


        def address_literal(self):
            return self.getTypedRuleContext(AleoParser.Address_literalContext,0)


        def signature_literal(self):
            return self.getTypedRuleContext(AleoParser.Signature_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(AleoParser.Boolean_literalContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = AleoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_literal)
        try:
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33, 136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.arithmetic_literal()
                pass
            elif token in [132]:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.address_literal()
                pass
            elif token in [133]:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.signature_literal()
                pass
            elif token in [36, 37]:
                self.enterOuterAlt(localctx, 4)
                self.state = 570
                self.boolean_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_type(self):
            return self.getTypedRuleContext(AleoParser.Signed_typeContext,0)


        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(AleoParser.DIGIT)
            else:
                return self.getToken(AleoParser.DIGIT, i)

        def getRuleIndex(self):
            return AleoParser.RULE_signed_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_literal" ):
                listener.enterSigned_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_literal" ):
                listener.exitSigned_literal(self)




    def signed_literal(self):

        localctx = AleoParser.Signed_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_signed_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 573
                self.match(AleoParser.T__32)


            self.state = 583 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 576
                self.match(AleoParser.DIGIT)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 577
                    self.match(AleoParser.T__33)
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 585 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

            self.state = 587
            self.signed_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_type(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_typeContext,0)


        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(AleoParser.DIGIT)
            else:
                return self.getToken(AleoParser.DIGIT, i)

        def getRuleIndex(self):
            return AleoParser.RULE_unsigned_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_literal" ):
                listener.enterUnsigned_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_literal" ):
                listener.exitUnsigned_literal(self)




    def unsigned_literal(self):

        localctx = AleoParser.Unsigned_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_unsigned_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 589
                self.match(AleoParser.T__32)


            self.state = 599 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 592
                self.match(AleoParser.DIGIT)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 593
                    self.match(AleoParser.T__33)
                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 601 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

            self.state = 603
            self.unsigned_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_literal(self):
            return self.getTypedRuleContext(AleoParser.Signed_literalContext,0)


        def unsigned_literal(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_literalContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = AleoParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_integer_literal)
        try:
            self.state = 607
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.signed_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self.unsigned_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def field_type(self):
            return self.getTypedRuleContext(AleoParser.Field_typeContext,0)


        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(AleoParser.DIGIT)
            else:
                return self.getToken(AleoParser.DIGIT, i)

        def getRuleIndex(self):
            return AleoParser.RULE_field_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_literal" ):
                listener.enterField_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_literal" ):
                listener.exitField_literal(self)




    def field_literal(self):

        localctx = AleoParser.Field_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_field_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 609
                self.match(AleoParser.T__32)


            self.state = 619 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 612
                self.match(AleoParser.DIGIT)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 613
                    self.match(AleoParser.T__33)
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 621 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

            self.state = 623
            self.field_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def group_type(self):
            return self.getTypedRuleContext(AleoParser.Group_typeContext,0)


        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(AleoParser.DIGIT)
            else:
                return self.getToken(AleoParser.DIGIT, i)

        def getRuleIndex(self):
            return AleoParser.RULE_group_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_literal" ):
                listener.enterGroup_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_literal" ):
                listener.exitGroup_literal(self)




    def group_literal(self):

        localctx = AleoParser.Group_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_group_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 625
                self.match(AleoParser.T__32)


            self.state = 635 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 628
                self.match(AleoParser.DIGIT)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 629
                    self.match(AleoParser.T__33)
                    self.state = 634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 637 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

            self.state = 639
            self.group_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def scalar_type(self):
            return self.getTypedRuleContext(AleoParser.Scalar_typeContext,0)


        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(AleoParser.DIGIT)
            else:
                return self.getToken(AleoParser.DIGIT, i)

        def getRuleIndex(self):
            return AleoParser.RULE_scalar_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_literal" ):
                listener.enterScalar_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_literal" ):
                listener.exitScalar_literal(self)




    def scalar_literal(self):

        localctx = AleoParser.Scalar_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_scalar_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 641
                self.match(AleoParser.T__32)


            self.state = 651 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 644
                self.match(AleoParser.DIGIT)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 645
                    self.match(AleoParser.T__33)
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 653 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

            self.state = 655
            self.scalar_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(AleoParser.Integer_literalContext,0)


        def field_literal(self):
            return self.getTypedRuleContext(AleoParser.Field_literalContext,0)


        def group_literal(self):
            return self.getTypedRuleContext(AleoParser.Group_literalContext,0)


        def scalar_literal(self):
            return self.getTypedRuleContext(AleoParser.Scalar_literalContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_arithmetic_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_literal" ):
                listener.enterArithmetic_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_literal" ):
                listener.exitArithmetic_literal(self)




    def arithmetic_literal(self):

        localctx = AleoParser.Arithmetic_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_arithmetic_literal)
        try:
            self.state = 661
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.field_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.group_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 660
                self.scalar_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class U32_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(AleoParser.DIGIT)
            else:
                return self.getToken(AleoParser.DIGIT, i)

        def getRuleIndex(self):
            return AleoParser.RULE_u32_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterU32_literal" ):
                listener.enterU32_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitU32_literal" ):
                listener.exitU32_literal(self)




    def u32_literal(self):

        localctx = AleoParser.U32_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_u32_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==33:
                self.state = 663
                self.match(AleoParser.T__32)


            self.state = 673 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 666
                self.match(AleoParser.DIGIT)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==34:
                    self.state = 667
                    self.match(AleoParser.T__33)
                    self.state = 672
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 675 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==136):
                    break

            self.state = 677
            self.match(AleoParser.T__34)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Address_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESS_LITERAL(self):
            return self.getToken(AleoParser.ADDRESS_LITERAL, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_address_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddress_literal" ):
                listener.enterAddress_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddress_literal" ):
                listener.exitAddress_literal(self)




    def address_literal(self):

        localctx = AleoParser.Address_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_address_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 679
            self.match(AleoParser.ADDRESS_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signature_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNATURE_LITERAL(self):
            return self.getToken(AleoParser.SIGNATURE_LITERAL, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_signature_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature_literal" ):
                listener.enterSignature_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature_literal" ):
                listener.exitSignature_literal(self)




    def signature_literal(self):

        localctx = AleoParser.Signature_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_signature_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(AleoParser.SIGNATURE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = AleoParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 683
            _la = self._input.LA(1)
            if not(_la==36 or _la==37):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_unsigned_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_type" ):
                listener.enterUnsigned_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_type" ):
                listener.exitUnsigned_type(self)




    def unsigned_type(self):

        localctx = AleoParser.Unsigned_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_unsigned_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4157528342528) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_signed_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_type" ):
                listener.enterSigned_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_type" ):
                listener.exitSigned_type(self)




    def signed_type(self):

        localctx = AleoParser.Signed_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_signed_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 136339441844224) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_type(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_typeContext,0)


        def signed_type(self):
            return self.getTypedRuleContext(AleoParser.Signed_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_integer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_type" ):
                listener.enterInteger_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_type" ):
                listener.exitInteger_type(self)




    def integer_type(self):

        localctx = AleoParser.Integer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_integer_type)
        try:
            self.state = 691
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 38, 39, 40, 41]:
                self.enterOuterAlt(localctx, 1)
                self.state = 689
                self.unsigned_type()
                pass
            elif token in [42, 43, 44, 45, 46]:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.signed_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_field_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_type" ):
                listener.enterField_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_type" ):
                listener.exitField_type(self)




    def field_type(self):

        localctx = AleoParser.Field_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_field_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(AleoParser.T__46)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_group_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_type" ):
                listener.enterGroup_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_type" ):
                listener.exitGroup_type(self)




    def group_type(self):

        localctx = AleoParser.Group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(AleoParser.T__47)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_scalar_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_type" ):
                listener.enterScalar_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_type" ):
                listener.exitScalar_type(self)




    def scalar_type(self):

        localctx = AleoParser.Scalar_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_scalar_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(AleoParser.T__48)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_type(self):
            return self.getTypedRuleContext(AleoParser.Integer_typeContext,0)


        def field_type(self):
            return self.getTypedRuleContext(AleoParser.Field_typeContext,0)


        def group_type(self):
            return self.getTypedRuleContext(AleoParser.Group_typeContext,0)


        def scalar_type(self):
            return self.getTypedRuleContext(AleoParser.Scalar_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_arithmetic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_type" ):
                listener.enterArithmetic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_type" ):
                listener.exitArithmetic_type(self)




    def arithmetic_type(self):

        localctx = AleoParser.Arithmetic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_arithmetic_type)
        try:
            self.state = 703
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 38, 39, 40, 41, 42, 43, 44, 45, 46]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.integer_type()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.field_type()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.group_type()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 4)
                self.state = 702
                self.scalar_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Address_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_address_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddress_type" ):
                listener.enterAddress_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddress_type" ):
                listener.exitAddress_type(self)




    def address_type(self):

        localctx = AleoParser.Address_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_address_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 705
            self.match(AleoParser.T__49)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_boolean_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_type" ):
                listener.enterBoolean_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_type" ):
                listener.exitBoolean_type(self)




    def boolean_type(self):

        localctx = AleoParser.Boolean_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_boolean_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(AleoParser.T__50)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signature_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_signature_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature_type" ):
                listener.enterSignature_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature_type" ):
                listener.exitSignature_type(self)




    def signature_type(self):

        localctx = AleoParser.Signature_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_signature_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(AleoParser.T__51)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(AleoParser.Boolean_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_literal_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_type" ):
                listener.enterLiteral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_type" ):
                listener.exitLiteral_type(self)




    def literal_type(self):

        localctx = AleoParser.Literal_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_literal_type)
        try:
            self.state = 715
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.arithmetic_type()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.address_type()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 3)
                self.state = 713
                self.signature_type()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 4)
                self.state = 714
                self.boolean_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def u32_literal(self):
            return self.getTypedRuleContext(AleoParser.U32_literalContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = AleoParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_array_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(AleoParser.T__16)
            self.state = 718
            self.plaintext_type()
            self.state = 719
            self.match(AleoParser.T__1)
            self.state = 720
            self.u32_literal()
            self.state = 721
            self.match(AleoParser.T__17)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plaintext_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_type(self):
            return self.getTypedRuleContext(AleoParser.Literal_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(AleoParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_plaintext_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlaintext_type" ):
                listener.enterPlaintext_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlaintext_type" ):
                listener.exitPlaintext_type(self)




    def plaintext_type(self):

        localctx = AleoParser.Plaintext_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_plaintext_type)
        try:
            self.state = 726
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 723
                self.literal_type()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 724
                self.array_type()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 3)
                self.state = 725
                self.identifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_value_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_type" ):
                listener.enterValue_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_type" ):
                listener.exitValue_type(self)




    def value_type(self):

        localctx = AleoParser.Value_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_value_type)
        try:
            self.state = 746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.plaintext_type()
                self.state = 729
                self.match(AleoParser.T__52)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 731
                self.plaintext_type()
                self.state = 732
                self.match(AleoParser.T__53)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 734
                self.plaintext_type()
                self.state = 735
                self.match(AleoParser.T__54)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 737
                self.identifier()
                self.state = 738
                self.match(AleoParser.T__55)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 740
                self.locator()
                self.state = 741
                self.match(AleoParser.T__55)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 743
                self.locator()
                self.state = 744
                self.match(AleoParser.T__56)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_mapping_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_type" ):
                listener.enterMapping_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_type" ):
                listener.exitMapping_type(self)




    def mapping_type(self):

        localctx = AleoParser.Mapping_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_mapping_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 748
            self.plaintext_type()
            self.state = 749
            self.match(AleoParser.T__53)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finalize_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_finalize_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalize_type" ):
                listener.enterFinalize_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalize_type" ):
                listener.exitFinalize_type(self)




    def finalize_type(self):

        localctx = AleoParser.Finalize_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_finalize_type)
        try:
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.plaintext_type()
                self.state = 752
                self.match(AleoParser.T__53)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 754
                self.locator()
                self.state = 755
                self.match(AleoParser.T__56)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entry_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_entry_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntry_type" ):
                listener.enterEntry_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntry_type" ):
                listener.exitEntry_type(self)




    def entry_type(self):

        localctx = AleoParser.Entry_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_entry_type)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.plaintext_type()
            self.state = 760
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 63050394783186944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Register_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_register_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister_type" ):
                listener.enterRegister_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister_type" ):
                listener.exitRegister_type(self)




    def register_type(self):

        localctx = AleoParser.Register_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_register_type)
        try:
            self.state = 772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 762
                self.locator()
                self.state = 763
                self.match(AleoParser.T__56)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 765
                self.locator()
                self.state = 766
                self.match(AleoParser.T__55)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.identifier()
                self.state = 769
                self.match(AleoParser.T__55)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 771
                self.plaintext_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_name(self):
            return self.getTypedRuleContext(AleoParser.Program_nameContext,0)


        def program_domain(self):
            return self.getTypedRuleContext(AleoParser.Program_domainContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_program_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_id" ):
                listener.enterProgram_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_id" ):
                listener.exitProgram_id(self)




    def program_id(self):

        localctx = AleoParser.Program_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_program_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.program_name()
            self.state = 775
            self.match(AleoParser.T__57)
            self.state = 776
            self.program_domain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_program_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_name" ):
                listener.enterProgram_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_name" ):
                listener.exitProgram_name(self)




    def program_name(self):

        localctx = AleoParser.Program_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_program_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_domainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_program_domain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_domain" ):
                listener.enterProgram_domain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_domain" ):
                listener.exitProgram_domain(self)




    def program_domain(self):

        localctx = AleoParser.Program_domainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_program_domain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGISTER(self):
            return self.getToken(AleoParser.REGISTER, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_register

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister" ):
                listener.enterRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister" ):
                listener.exitRegister(self)




    def register(self):

        localctx = AleoParser.RegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_register)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 782
            self.match(AleoParser.REGISTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Register_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def register_accessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Register_accessorContext)
            else:
                return self.getTypedRuleContext(AleoParser.Register_accessorContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_register_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister_access" ):
                listener.enterRegister_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister_access" ):
                listener.exitRegister_access(self)




    def register_access(self):

        localctx = AleoParser.Register_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_register_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.register()
            self.state = 788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==17 or _la==58:
                self.state = 785
                self.register_accessor()
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Register_accessorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def access_by_field(self):
            return self.getTypedRuleContext(AleoParser.Access_by_fieldContext,0)


        def access_by_index(self):
            return self.getTypedRuleContext(AleoParser.Access_by_indexContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_register_accessor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister_accessor" ):
                listener.enterRegister_accessor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister_accessor" ):
                listener.exitRegister_accessor(self)




    def register_accessor(self):

        localctx = AleoParser.Register_accessorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_register_accessor)
        try:
            self.state = 793
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [58]:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self.access_by_field()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 2)
                self.state = 792
                self.access_by_index()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_by_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_access_by_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_by_field" ):
                listener.enterAccess_by_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_by_field" ):
                listener.exitAccess_by_field(self)




    def access_by_field(self):

        localctx = AleoParser.Access_by_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_access_by_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 795
            self.match(AleoParser.T__57)
            self.state = 796
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_by_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def u32_literal(self):
            return self.getTypedRuleContext(AleoParser.U32_literalContext,0)


        def DIGIT(self, i:int=None):
            if i is None:
                return self.getTokens(AleoParser.DIGIT)
            else:
                return self.getToken(AleoParser.DIGIT, i)

        def getRuleIndex(self):
            return AleoParser.RULE_access_by_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_by_index" ):
                listener.enterAccess_by_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_by_index" ):
                listener.exitAccess_by_index(self)




    def access_by_index(self):

        localctx = AleoParser.Access_by_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_access_by_index)
        self._la = 0 # Token type
        try:
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 798
                self.match(AleoParser.T__16)
                self.state = 799
                self.u32_literal()
                self.state = 800
                self.match(AleoParser.T__17)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 802
                self.match(AleoParser.T__16)
                self.state = 804 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 803
                    self.match(AleoParser.DIGIT)
                    self.state = 806 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==136):
                        break

                self.state = 808
                self.match(AleoParser.T__17)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self):
            return self.getTypedRuleContext(AleoParser.LiteralContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperand" ):
                listener.enterOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperand" ):
                listener.exitOperand(self)




    def operand(self):

        localctx = AleoParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_operand)
        try:
            self.state = 818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [33, 36, 37, 132, 133, 136]:
                self.enterOuterAlt(localctx, 1)
                self.state = 811
                self.literal()
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 812
                self.match(AleoParser.T__58)
                pass
            elif token in [134]:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.register_access()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 4)
                self.state = 814
                self.program_id()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 5)
                self.state = 815
                self.match(AleoParser.T__59)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 6)
                self.state = 816
                self.match(AleoParser.T__60)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 7)
                self.state = 817
                self.match(AleoParser.T__61)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = AleoParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_tuple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            self.identifier()
            self.state = 821
            self.match(AleoParser.T__6)
            self.state = 822
            self.plaintext_type()
            self.state = 823
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def entry_type(self):
            return self.getTypedRuleContext(AleoParser.Entry_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntry" ):
                listener.enterEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntry" ):
                listener.exitEntry(self)




    def entry(self):

        localctx = AleoParser.EntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.identifier()
            self.state = 826
            self.match(AleoParser.T__6)
            self.state = 827
            self.entry_type()
            self.state = 828
            self.match(AleoParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_locator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocator" ):
                listener.enterLocator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocator" ):
                listener.exitLocator(self)




    def locator(self):

        localctx = AleoParser.LocatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_locator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 830
            self.program_id()
            self.state = 831
            self.match(AleoParser.T__62)
            self.state = 832
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_destinationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register_type(self):
            return self.getTypedRuleContext(AleoParser.Register_typeContext,0)


        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_cast_destination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_destination" ):
                listener.enterCast_destination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_destination" ):
                listener.exitCast_destination(self)




    def cast_destination(self):

        localctx = AleoParser.Cast_destinationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_cast_destination)
        try:
            self.state = 838
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 834
                self.register_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.locator()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 836
                self.match(AleoParser.T__63)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 837
                self.match(AleoParser.T__64)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_unary_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_op" ):
                listener.enterUnary_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_op" ):
                listener.exitUnary_op(self)




    def unary_op(self):

        localctx = AleoParser.Unary_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_unary_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 255) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_binary_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_op" ):
                listener.enterBinary_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_op" ):
                listener.exitBinary_op(self)




    def binary_op(self):

        localctx = AleoParser.Binary_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_binary_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            _la = self._input.LA(1)
            if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 67108863) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_is_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_op" ):
                listener.enterIs_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_op" ):
                listener.exitIs_op(self)




    def is_op(self):

        localctx = AleoParser.Is_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_is_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            _la = self._input.LA(1)
            if not(_la==100 or _la==101):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_assert_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_op" ):
                listener.enterAssert_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_op" ):
                listener.exitAssert_op(self)




    def assert_op(self):

        localctx = AleoParser.Assert_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_assert_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 846
            _la = self._input.LA(1)
            if not(_la==102 or _la==103):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_commit_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_op" ):
                listener.enterCommit_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_op" ):
                listener.exitCommit_op(self)




    def commit_op(self):

        localctx = AleoParser.Commit_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_commit_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash1_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_hash1_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash1_op" ):
                listener.enterHash1_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash1_op" ):
                listener.exitHash1_op(self)




    def hash1_op(self):

        localctx = AleoParser.Hash1_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hash1_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            _la = self._input.LA(1)
            if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & 32767) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash2_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_hash2_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash2_op" ):
                listener.enterHash2_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash2_op" ):
                listener.exitHash2_op(self)




    def hash2_op(self):

        localctx = AleoParser.Hash2_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hash2_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            _la = self._input.LA(1)
            if not(((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_cast_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_op" ):
                listener.enterCast_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_op" ):
                listener.exitCast_op(self)




    def cast_op(self):

        localctx = AleoParser.Cast_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_cast_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            _la = self._input.LA(1)
            if not(_la==128 or _la==129):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Branch_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return AleoParser.RULE_branch_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranch_op" ):
                listener.enterBranch_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranch_op" ):
                listener.exitBranch_op(self)




    def branch_op(self):

        localctx = AleoParser.Branch_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_branch_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            _la = self._input.LA(1)
            if not(_la==130 or _la==131):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = AleoParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(AleoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = AleoParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(AleoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





