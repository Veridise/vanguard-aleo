# Generated from ./AleoParser.g4 by ANTLR 4.13.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,119,896,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,1,0,1,0,1,1,5,1,202,8,1,10,1,12,1,205,9,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,1,4,1,215,8,1,11,1,12,1,216,1,2,1,2,1,2,1,2,1,3,
        1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,4,6,243,8,6,11,6,12,6,244,1,7,1,7,1,7,1,7,5,7,251,8,
        7,10,7,12,7,254,9,7,1,8,1,8,1,8,1,8,5,8,260,8,8,10,8,12,8,263,9,
        8,1,8,4,8,266,8,8,11,8,12,8,267,1,8,5,8,271,8,8,10,8,12,8,274,9,
        8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,11,5,11,292,8,11,10,11,12,11,295,9,11,1,11,5,11,298,8,11,
        10,11,12,11,301,9,11,1,11,5,11,304,8,11,10,11,12,11,307,9,11,1,11,
        3,11,310,8,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,
        1,13,1,13,1,14,1,14,1,14,1,14,5,14,328,8,14,10,14,12,14,331,9,14,
        1,14,5,14,334,8,14,10,14,12,14,337,9,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,355,
        8,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,5,22,403,8,22,10,22,12,22,
        406,9,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,415,8,22,1,22,1,
        22,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,3,26,445,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,489,8,32,1,32,1,32,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,503,8,33,1,33,1,
        33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,518,
        8,34,1,34,1,34,1,35,1,35,3,35,524,8,35,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,1,36,1,37,1,37,4,37,536,8,37,11,37,12,37,537,1,37,1,37,
        1,37,1,37,1,37,1,37,1,38,1,38,1,38,3,38,549,8,38,1,38,5,38,552,8,
        38,10,38,12,38,555,9,38,1,38,1,38,4,38,559,8,38,11,38,12,38,560,
        3,38,563,8,38,1,38,1,38,1,39,1,39,1,39,5,39,570,8,39,10,39,12,39,
        573,9,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,3,40,583,8,40,1,
        41,3,41,586,8,41,1,41,1,41,1,41,1,42,3,42,592,8,42,1,42,1,42,1,42,
        1,43,1,43,3,43,599,8,43,1,44,3,44,602,8,44,1,44,1,44,1,44,1,45,3,
        45,608,8,45,1,45,1,45,1,45,1,46,3,46,614,8,46,1,46,1,46,1,46,1,47,
        1,47,1,47,1,47,3,47,623,8,47,1,48,1,48,1,49,1,49,1,50,1,50,1,51,
        1,51,1,52,1,52,1,53,1,53,3,53,637,8,53,1,54,1,54,1,55,1,55,1,56,
        1,56,1,57,1,57,1,57,1,57,3,57,649,8,57,1,58,1,58,1,59,1,59,1,60,
        1,60,1,61,1,61,1,61,1,61,3,61,661,8,61,1,62,1,62,1,62,1,62,1,62,
        1,62,1,63,1,63,1,63,3,63,672,8,63,1,64,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,3,64,683,8,64,1,65,1,65,1,65,1,66,1,66,1,66,1,66,
        1,66,1,66,3,66,694,8,66,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,3,68,706,8,68,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,71,
        1,71,1,72,1,72,1,73,1,73,1,74,1,74,5,74,723,8,74,10,74,12,74,726,
        9,74,1,75,1,75,3,75,730,8,75,1,76,1,76,1,76,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,3,77,742,8,77,1,78,1,78,1,78,1,78,3,78,748,8,78,1,
        79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,759,8,79,1,80,1,
        80,1,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,
        83,1,83,1,83,3,83,778,8,83,1,84,1,84,1,84,1,84,1,85,1,85,1,85,3,
        85,787,8,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,795,8,85,1,86,1,86,
        1,86,3,86,800,8,86,1,86,1,86,1,86,3,86,805,8,86,1,86,1,86,1,86,3,
        86,810,8,86,1,86,1,86,1,86,3,86,815,8,86,1,86,1,86,1,86,3,86,820,
        8,86,1,86,1,86,1,86,3,86,825,8,86,1,86,1,86,1,86,3,86,830,8,86,1,
        86,1,86,1,86,3,86,835,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,
        86,1,86,1,86,3,86,847,8,86,1,87,1,87,1,87,1,87,1,88,1,88,1,88,1,
        88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,1,91,1,91,1,91,1,91,1,
        92,1,92,1,92,3,92,872,8,92,1,93,1,93,1,93,1,93,1,94,1,94,1,94,1,
        94,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,3,96,890,8,96,1,97,1,
        97,1,98,1,98,1,98,0,0,99,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
        30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,
        74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,
        114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,
        146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,
        178,180,182,184,186,188,190,192,194,196,0,9,1,0,103,104,1,0,12,16,
        1,0,20,21,1,0,25,26,1,0,68,69,1,0,74,79,1,0,74,88,1,0,80,82,2,0,
        9,113,115,116,923,0,198,1,0,0,0,2,203,1,0,0,0,4,218,1,0,0,0,6,222,
        1,0,0,0,8,228,1,0,0,0,10,233,1,0,0,0,12,238,1,0,0,0,14,246,1,0,0,
        0,16,255,1,0,0,0,18,275,1,0,0,0,20,281,1,0,0,0,22,287,1,0,0,0,24,
        311,1,0,0,0,26,317,1,0,0,0,28,323,1,0,0,0,30,338,1,0,0,0,32,354,
        1,0,0,0,34,356,1,0,0,0,36,365,1,0,0,0,38,374,1,0,0,0,40,384,1,0,
        0,0,42,393,1,0,0,0,44,400,1,0,0,0,46,418,1,0,0,0,48,422,1,0,0,0,
        50,429,1,0,0,0,52,444,1,0,0,0,54,446,1,0,0,0,56,452,1,0,0,0,58,459,
        1,0,0,0,60,467,1,0,0,0,62,474,1,0,0,0,64,479,1,0,0,0,66,492,1,0,
        0,0,68,506,1,0,0,0,70,523,1,0,0,0,72,525,1,0,0,0,74,533,1,0,0,0,
        76,545,1,0,0,0,78,566,1,0,0,0,80,582,1,0,0,0,82,585,1,0,0,0,84,591,
        1,0,0,0,86,598,1,0,0,0,88,601,1,0,0,0,90,607,1,0,0,0,92,613,1,0,
        0,0,94,622,1,0,0,0,96,624,1,0,0,0,98,626,1,0,0,0,100,628,1,0,0,0,
        102,630,1,0,0,0,104,632,1,0,0,0,106,636,1,0,0,0,108,638,1,0,0,0,
        110,640,1,0,0,0,112,642,1,0,0,0,114,648,1,0,0,0,116,650,1,0,0,0,
        118,652,1,0,0,0,120,654,1,0,0,0,122,660,1,0,0,0,124,662,1,0,0,0,
        126,671,1,0,0,0,128,682,1,0,0,0,130,684,1,0,0,0,132,693,1,0,0,0,
        134,695,1,0,0,0,136,705,1,0,0,0,138,707,1,0,0,0,140,710,1,0,0,0,
        142,714,1,0,0,0,144,716,1,0,0,0,146,718,1,0,0,0,148,720,1,0,0,0,
        150,729,1,0,0,0,152,731,1,0,0,0,154,741,1,0,0,0,156,747,1,0,0,0,
        158,758,1,0,0,0,160,760,1,0,0,0,162,765,1,0,0,0,164,770,1,0,0,0,
        166,777,1,0,0,0,168,779,1,0,0,0,170,794,1,0,0,0,172,846,1,0,0,0,
        174,848,1,0,0,0,176,852,1,0,0,0,178,856,1,0,0,0,180,860,1,0,0,0,
        182,864,1,0,0,0,184,868,1,0,0,0,186,873,1,0,0,0,188,877,1,0,0,0,
        190,881,1,0,0,0,192,889,1,0,0,0,194,891,1,0,0,0,196,893,1,0,0,0,
        198,199,3,2,1,0,199,1,1,0,0,0,200,202,3,4,2,0,201,200,1,0,0,0,202,
        205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,
        203,1,0,0,0,206,207,5,92,0,0,207,208,3,140,70,0,208,214,5,5,0,0,
        209,215,3,6,3,0,210,215,3,12,6,0,211,215,3,14,7,0,212,215,3,16,8,
        0,213,215,3,22,11,0,214,209,1,0,0,0,214,210,1,0,0,0,214,211,1,0,
        0,0,214,212,1,0,0,0,214,213,1,0,0,0,215,216,1,0,0,0,216,214,1,0,
        0,0,216,217,1,0,0,0,217,3,1,0,0,0,218,219,5,93,0,0,219,220,3,140,
        70,0,220,221,5,5,0,0,221,5,1,0,0,0,222,223,5,94,0,0,223,224,3,196,
        98,0,224,225,5,7,0,0,225,226,3,8,4,0,226,227,3,10,5,0,227,7,1,0,
        0,0,228,229,5,95,0,0,229,230,5,9,0,0,230,231,3,130,65,0,231,232,
        5,5,0,0,232,9,1,0,0,0,233,234,5,96,0,0,234,235,5,9,0,0,235,236,3,
        130,65,0,236,237,5,5,0,0,237,11,1,0,0,0,238,239,5,97,0,0,239,240,
        3,196,98,0,240,242,5,7,0,0,241,243,3,160,80,0,242,241,1,0,0,0,243,
        244,1,0,0,0,244,242,1,0,0,0,244,245,1,0,0,0,245,13,1,0,0,0,246,247,
        5,16,0,0,247,248,3,196,98,0,248,252,5,7,0,0,249,251,3,162,81,0,250,
        249,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,
        15,1,0,0,0,254,252,1,0,0,0,255,256,5,98,0,0,256,257,3,196,98,0,257,
        261,5,7,0,0,258,260,3,18,9,0,259,258,1,0,0,0,260,263,1,0,0,0,261,
        259,1,0,0,0,261,262,1,0,0,0,262,265,1,0,0,0,263,261,1,0,0,0,264,
        266,3,52,26,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,
        268,1,0,0,0,268,272,1,0,0,0,269,271,3,20,10,0,270,269,1,0,0,0,271,
        274,1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,17,1,0,0,0,274,272,
        1,0,0,0,275,276,5,99,0,0,276,277,3,146,73,0,277,278,5,9,0,0,278,
        279,3,136,68,0,279,280,5,5,0,0,280,19,1,0,0,0,281,282,5,100,0,0,
        282,283,3,156,78,0,283,284,5,9,0,0,284,285,3,136,68,0,285,286,5,
        5,0,0,286,21,1,0,0,0,287,288,5,101,0,0,288,289,3,196,98,0,289,293,
        5,7,0,0,290,292,3,24,12,0,291,290,1,0,0,0,292,295,1,0,0,0,293,291,
        1,0,0,0,293,294,1,0,0,0,294,299,1,0,0,0,295,293,1,0,0,0,296,298,
        3,52,26,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,1,0,0,0,299,300,
        1,0,0,0,300,305,1,0,0,0,301,299,1,0,0,0,302,304,3,26,13,0,303,302,
        1,0,0,0,304,307,1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,309,
        1,0,0,0,307,305,1,0,0,0,308,310,3,28,14,0,309,308,1,0,0,0,309,310,
        1,0,0,0,310,23,1,0,0,0,311,312,5,99,0,0,312,313,3,146,73,0,313,314,
        5,9,0,0,314,315,3,128,64,0,315,316,5,5,0,0,316,25,1,0,0,0,317,318,
        5,100,0,0,318,319,3,156,78,0,319,320,5,9,0,0,320,321,3,128,64,0,
        321,322,5,5,0,0,322,27,1,0,0,0,323,324,5,102,0,0,324,325,3,196,98,
        0,325,329,5,7,0,0,326,328,3,30,15,0,327,326,1,0,0,0,328,331,1,0,
        0,0,329,327,1,0,0,0,329,330,1,0,0,0,330,335,1,0,0,0,331,329,1,0,
        0,0,332,334,3,32,16,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,
        0,0,0,335,336,1,0,0,0,336,29,1,0,0,0,337,335,1,0,0,0,338,339,5,99,
        0,0,339,340,3,146,73,0,340,341,5,9,0,0,341,342,3,132,66,0,342,343,
        5,5,0,0,343,31,1,0,0,0,344,355,3,34,17,0,345,355,3,36,18,0,346,355,
        3,38,19,0,347,355,3,40,20,0,348,355,3,42,21,0,349,355,3,44,22,0,
        350,355,3,46,23,0,351,355,3,48,24,0,352,355,3,50,25,0,353,355,3,
        52,26,0,354,344,1,0,0,0,354,345,1,0,0,0,354,346,1,0,0,0,354,347,
        1,0,0,0,354,348,1,0,0,0,354,349,1,0,0,0,354,350,1,0,0,0,354,351,
        1,0,0,0,354,352,1,0,0,0,354,353,1,0,0,0,355,33,1,0,0,0,356,357,5,
        27,0,0,357,358,3,196,98,0,358,359,5,3,0,0,359,360,3,156,78,0,360,
        361,5,4,0,0,361,362,5,10,0,0,362,363,3,148,74,0,363,364,5,5,0,0,
        364,35,1,0,0,0,365,366,5,28,0,0,366,367,3,196,98,0,367,368,5,3,0,
        0,368,369,3,156,78,0,369,370,5,4,0,0,370,371,5,10,0,0,371,372,3,
        148,74,0,372,373,5,5,0,0,373,37,1,0,0,0,374,375,3,190,95,0,375,376,
        3,196,98,0,376,377,5,3,0,0,377,378,3,156,78,0,378,379,5,4,0,0,379,
        380,3,156,78,0,380,381,5,10,0,0,381,382,3,148,74,0,382,383,5,5,0,
        0,383,39,1,0,0,0,384,385,5,30,0,0,385,386,3,156,78,0,386,387,5,10,
        0,0,387,388,3,196,98,0,388,389,5,3,0,0,389,390,3,156,78,0,390,391,
        5,4,0,0,391,392,5,5,0,0,392,41,1,0,0,0,393,394,5,31,0,0,394,395,
        3,196,98,0,395,396,5,3,0,0,396,397,3,156,78,0,397,398,5,4,0,0,398,
        399,5,5,0,0,399,43,1,0,0,0,400,404,3,188,94,0,401,403,3,156,78,0,
        402,401,1,0,0,0,403,406,1,0,0,0,404,402,1,0,0,0,404,405,1,0,0,0,
        405,407,1,0,0,0,406,404,1,0,0,0,407,408,5,10,0,0,408,409,3,148,74,
        0,409,414,5,9,0,0,410,415,3,114,57,0,411,415,3,116,58,0,412,415,
        3,120,60,0,413,415,3,118,59,0,414,410,1,0,0,0,414,411,1,0,0,0,414,
        412,1,0,0,0,414,413,1,0,0,0,415,416,1,0,0,0,416,417,5,5,0,0,417,
        45,1,0,0,0,418,419,5,34,0,0,419,420,3,194,97,0,420,421,5,5,0,0,421,
        47,1,0,0,0,422,423,3,186,93,0,423,424,3,156,78,0,424,425,3,156,78,
        0,425,426,5,11,0,0,426,427,3,194,97,0,427,428,5,5,0,0,428,49,1,0,
        0,0,429,430,5,35,0,0,430,431,3,148,74,0,431,432,5,5,0,0,432,51,1,
        0,0,0,433,445,3,54,27,0,434,445,3,56,28,0,435,445,3,58,29,0,436,
        445,3,60,30,0,437,445,3,62,31,0,438,445,3,64,32,0,439,445,3,70,35,
        0,440,445,3,72,36,0,441,445,3,74,37,0,442,445,3,76,38,0,443,445,
        3,78,39,0,444,433,1,0,0,0,444,434,1,0,0,0,444,435,1,0,0,0,444,436,
        1,0,0,0,444,437,1,0,0,0,444,438,1,0,0,0,444,439,1,0,0,0,444,440,
        1,0,0,0,444,441,1,0,0,0,444,442,1,0,0,0,444,443,1,0,0,0,445,53,1,
        0,0,0,446,447,3,170,85,0,447,448,3,156,78,0,448,449,5,10,0,0,449,
        450,3,148,74,0,450,451,5,5,0,0,451,55,1,0,0,0,452,453,3,172,86,0,
        453,454,3,156,78,0,454,455,3,156,78,0,455,456,5,10,0,0,456,457,3,
        148,74,0,457,458,5,5,0,0,458,57,1,0,0,0,459,460,5,36,0,0,460,461,
        3,156,78,0,461,462,3,156,78,0,462,463,3,156,78,0,463,464,5,10,0,
        0,464,465,3,148,74,0,465,466,5,5,0,0,466,59,1,0,0,0,467,468,3,174,
        87,0,468,469,3,156,78,0,469,470,3,156,78,0,470,471,5,10,0,0,471,
        472,3,148,74,0,472,473,5,5,0,0,473,61,1,0,0,0,474,475,3,176,88,0,
        475,476,3,156,78,0,476,477,3,156,78,0,477,478,5,5,0,0,478,63,1,0,
        0,0,479,480,3,178,89,0,480,481,3,156,78,0,481,482,3,156,78,0,482,
        483,5,10,0,0,483,484,3,148,74,0,484,488,5,9,0,0,485,489,3,116,58,
        0,486,489,3,108,54,0,487,489,3,110,55,0,488,485,1,0,0,0,488,486,
        1,0,0,0,488,487,1,0,0,0,489,490,1,0,0,0,490,491,5,5,0,0,491,65,1,
        0,0,0,492,493,3,180,90,0,493,494,3,156,78,0,494,495,5,10,0,0,495,
        496,3,148,74,0,496,502,5,9,0,0,497,503,3,114,57,0,498,503,3,116,
        58,0,499,503,3,120,60,0,500,503,3,124,62,0,501,503,3,196,98,0,502,
        497,1,0,0,0,502,498,1,0,0,0,502,499,1,0,0,0,502,500,1,0,0,0,502,
        501,1,0,0,0,503,504,1,0,0,0,504,505,5,5,0,0,505,67,1,0,0,0,506,507,
        3,182,91,0,507,508,3,156,78,0,508,509,3,156,78,0,509,510,5,10,0,
        0,510,511,3,148,74,0,511,517,5,9,0,0,512,518,3,114,57,0,513,518,
        3,116,58,0,514,518,3,120,60,0,515,518,3,124,62,0,516,518,3,196,98,
        0,517,512,1,0,0,0,517,513,1,0,0,0,517,514,1,0,0,0,517,515,1,0,0,
        0,517,516,1,0,0,0,518,519,1,0,0,0,519,520,5,5,0,0,520,69,1,0,0,0,
        521,524,3,66,33,0,522,524,3,68,34,0,523,521,1,0,0,0,523,522,1,0,
        0,0,524,71,1,0,0,0,525,526,3,192,96,0,526,527,3,156,78,0,527,528,
        3,156,78,0,528,529,3,156,78,0,529,530,5,10,0,0,530,531,3,148,74,
        0,531,532,5,5,0,0,532,73,1,0,0,0,533,535,3,184,92,0,534,536,3,156,
        78,0,535,534,1,0,0,0,536,537,1,0,0,0,537,535,1,0,0,0,537,538,1,0,
        0,0,538,539,1,0,0,0,539,540,5,10,0,0,540,541,3,148,74,0,541,542,
        5,9,0,0,542,543,3,166,83,0,543,544,5,5,0,0,544,75,1,0,0,0,545,548,
        5,40,0,0,546,549,3,164,82,0,547,549,3,196,98,0,548,546,1,0,0,0,548,
        547,1,0,0,0,549,553,1,0,0,0,550,552,3,156,78,0,551,550,1,0,0,0,552,
        555,1,0,0,0,553,551,1,0,0,0,553,554,1,0,0,0,554,562,1,0,0,0,555,
        553,1,0,0,0,556,558,5,10,0,0,557,559,3,148,74,0,558,557,1,0,0,0,
        559,560,1,0,0,0,560,558,1,0,0,0,560,561,1,0,0,0,561,563,1,0,0,0,
        562,556,1,0,0,0,562,563,1,0,0,0,563,564,1,0,0,0,564,565,5,5,0,0,
        565,77,1,0,0,0,566,567,5,41,0,0,567,571,3,196,98,0,568,570,3,156,
        78,0,569,568,1,0,0,0,570,573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,
        0,0,572,574,1,0,0,0,573,571,1,0,0,0,574,575,5,10,0,0,575,576,3,148,
        74,0,576,577,5,5,0,0,577,79,1,0,0,0,578,583,3,94,47,0,579,583,3,
        96,48,0,580,583,3,98,49,0,581,583,3,100,50,0,582,578,1,0,0,0,582,
        579,1,0,0,0,582,580,1,0,0,0,582,581,1,0,0,0,583,81,1,0,0,0,584,586,
        5,8,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,587,1,0,0,0,587,588,
        5,114,0,0,588,589,3,104,52,0,589,83,1,0,0,0,590,592,5,8,0,0,591,
        590,1,0,0,0,591,592,1,0,0,0,592,593,1,0,0,0,593,594,5,114,0,0,594,
        595,3,102,51,0,595,85,1,0,0,0,596,599,3,82,41,0,597,599,3,84,42,
        0,598,596,1,0,0,0,598,597,1,0,0,0,599,87,1,0,0,0,600,602,5,8,0,0,
        601,600,1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,604,5,114,0,
        0,604,605,3,108,54,0,605,89,1,0,0,0,606,608,5,8,0,0,607,606,1,0,
        0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,610,5,114,0,0,610,611,3,
        110,55,0,611,91,1,0,0,0,612,614,5,8,0,0,613,612,1,0,0,0,613,614,
        1,0,0,0,614,615,1,0,0,0,615,616,5,114,0,0,616,617,3,112,56,0,617,
        93,1,0,0,0,618,623,3,86,43,0,619,623,3,88,44,0,620,623,3,90,45,0,
        621,623,3,92,46,0,622,618,1,0,0,0,622,619,1,0,0,0,622,620,1,0,0,
        0,622,621,1,0,0,0,623,95,1,0,0,0,624,625,5,112,0,0,625,97,1,0,0,
        0,626,627,5,113,0,0,627,99,1,0,0,0,628,629,7,0,0,0,629,101,1,0,0,
        0,630,631,5,105,0,0,631,103,1,0,0,0,632,633,5,106,0,0,633,105,1,
        0,0,0,634,637,3,102,51,0,635,637,3,104,52,0,636,634,1,0,0,0,636,
        635,1,0,0,0,637,107,1,0,0,0,638,639,5,107,0,0,639,109,1,0,0,0,640,
        641,5,17,0,0,641,111,1,0,0,0,642,643,5,108,0,0,643,113,1,0,0,0,644,
        649,3,106,53,0,645,649,3,108,54,0,646,649,3,110,55,0,647,649,3,112,
        56,0,648,644,1,0,0,0,648,645,1,0,0,0,648,646,1,0,0,0,648,647,1,0,
        0,0,649,115,1,0,0,0,650,651,5,109,0,0,651,117,1,0,0,0,652,653,5,
        110,0,0,653,119,1,0,0,0,654,655,5,111,0,0,655,121,1,0,0,0,656,661,
        3,114,57,0,657,661,3,116,58,0,658,661,3,120,60,0,659,661,3,118,59,
        0,660,656,1,0,0,0,660,657,1,0,0,0,660,658,1,0,0,0,660,659,1,0,0,
        0,661,123,1,0,0,0,662,663,5,3,0,0,663,664,3,126,63,0,664,665,5,5,
        0,0,665,666,3,84,42,0,666,667,5,4,0,0,667,125,1,0,0,0,668,672,3,
        122,61,0,669,672,3,124,62,0,670,672,3,196,98,0,671,668,1,0,0,0,671,
        669,1,0,0,0,671,670,1,0,0,0,672,127,1,0,0,0,673,674,3,126,63,0,674,
        675,3,138,69,0,675,683,1,0,0,0,676,677,3,196,98,0,677,678,3,138,
        69,0,678,683,1,0,0,0,679,680,3,164,82,0,680,681,3,138,69,0,681,683,
        1,0,0,0,682,673,1,0,0,0,682,676,1,0,0,0,682,679,1,0,0,0,683,129,
        1,0,0,0,684,685,3,126,63,0,685,686,3,138,69,0,686,131,1,0,0,0,687,
        688,3,126,63,0,688,689,3,138,69,0,689,694,1,0,0,0,690,691,3,164,
        82,0,691,692,3,138,69,0,692,694,1,0,0,0,693,687,1,0,0,0,693,690,
        1,0,0,0,694,133,1,0,0,0,695,696,3,126,63,0,696,697,3,138,69,0,697,
        135,1,0,0,0,698,699,3,164,82,0,699,700,3,138,69,0,700,706,1,0,0,
        0,701,702,3,196,98,0,702,703,3,138,69,0,703,706,1,0,0,0,704,706,
        3,126,63,0,705,698,1,0,0,0,705,701,1,0,0,0,705,704,1,0,0,0,706,137,
        1,0,0,0,707,708,5,1,0,0,708,709,7,1,0,0,709,139,1,0,0,0,710,711,
        3,142,71,0,711,712,5,1,0,0,712,713,3,144,72,0,713,141,1,0,0,0,714,
        715,3,196,98,0,715,143,1,0,0,0,716,717,3,196,98,0,717,145,1,0,0,
        0,718,719,5,115,0,0,719,147,1,0,0,0,720,724,3,146,73,0,721,723,3,
        150,75,0,722,721,1,0,0,0,723,726,1,0,0,0,724,722,1,0,0,0,724,725,
        1,0,0,0,725,149,1,0,0,0,726,724,1,0,0,0,727,730,3,152,76,0,728,730,
        3,154,77,0,729,727,1,0,0,0,729,728,1,0,0,0,730,151,1,0,0,0,731,732,
        5,1,0,0,732,733,3,196,98,0,733,153,1,0,0,0,734,735,5,3,0,0,735,736,
        3,84,42,0,736,737,5,4,0,0,737,742,1,0,0,0,738,739,5,3,0,0,739,740,
        5,114,0,0,740,742,5,4,0,0,741,734,1,0,0,0,741,738,1,0,0,0,742,155,
        1,0,0,0,743,748,3,158,79,0,744,748,3,80,40,0,745,748,3,148,74,0,
        746,748,3,140,70,0,747,743,1,0,0,0,747,744,1,0,0,0,747,745,1,0,0,
        0,747,746,1,0,0,0,748,157,1,0,0,0,749,750,5,17,0,0,750,751,5,6,0,
        0,751,759,5,18,0,0,752,753,5,19,0,0,753,754,5,1,0,0,754,759,7,2,
        0,0,755,756,5,22,0,0,756,757,5,1,0,0,757,759,5,23,0,0,758,749,1,
        0,0,0,758,752,1,0,0,0,758,755,1,0,0,0,759,159,1,0,0,0,760,761,3,
        196,98,0,761,762,5,9,0,0,762,763,3,126,63,0,763,764,5,5,0,0,764,
        161,1,0,0,0,765,766,3,196,98,0,766,767,5,9,0,0,767,768,3,134,67,
        0,768,769,5,5,0,0,769,163,1,0,0,0,770,771,3,140,70,0,771,772,5,2,
        0,0,772,773,3,196,98,0,773,165,1,0,0,0,774,778,3,168,84,0,775,778,
        3,136,68,0,776,778,3,164,82,0,777,774,1,0,0,0,777,775,1,0,0,0,777,
        776,1,0,0,0,778,167,1,0,0,0,779,780,5,17,0,0,780,781,5,1,0,0,781,
        782,7,3,0,0,782,169,1,0,0,0,783,786,5,42,0,0,784,785,5,1,0,0,785,
        787,5,24,0,0,786,784,1,0,0,0,786,787,1,0,0,0,787,795,1,0,0,0,788,
        795,5,43,0,0,789,795,5,44,0,0,790,795,5,45,0,0,791,795,5,46,0,0,
        792,795,5,47,0,0,793,795,5,48,0,0,794,783,1,0,0,0,794,788,1,0,0,
        0,794,789,1,0,0,0,794,790,1,0,0,0,794,791,1,0,0,0,794,792,1,0,0,
        0,794,793,1,0,0,0,795,171,1,0,0,0,796,799,5,49,0,0,797,798,5,1,0,
        0,798,800,5,24,0,0,799,797,1,0,0,0,799,800,1,0,0,0,800,847,1,0,0,
        0,801,804,5,50,0,0,802,803,5,1,0,0,803,805,5,24,0,0,804,802,1,0,
        0,0,804,805,1,0,0,0,805,847,1,0,0,0,806,809,5,51,0,0,807,808,5,1,
        0,0,808,810,5,24,0,0,809,807,1,0,0,0,809,810,1,0,0,0,810,847,1,0,
        0,0,811,814,5,52,0,0,812,813,5,1,0,0,813,815,5,24,0,0,814,812,1,
        0,0,0,814,815,1,0,0,0,815,847,1,0,0,0,816,819,5,53,0,0,817,818,5,
        1,0,0,818,820,5,24,0,0,819,817,1,0,0,0,819,820,1,0,0,0,820,847,1,
        0,0,0,821,824,5,54,0,0,822,823,5,1,0,0,823,825,5,24,0,0,824,822,
        1,0,0,0,824,825,1,0,0,0,825,847,1,0,0,0,826,829,5,55,0,0,827,828,
        5,1,0,0,828,830,5,24,0,0,829,827,1,0,0,0,829,830,1,0,0,0,830,847,
        1,0,0,0,831,834,5,56,0,0,832,833,5,1,0,0,833,835,5,24,0,0,834,832,
        1,0,0,0,834,835,1,0,0,0,835,847,1,0,0,0,836,847,5,57,0,0,837,847,
        5,58,0,0,838,847,5,59,0,0,839,847,5,60,0,0,840,847,5,61,0,0,841,
        847,5,62,0,0,842,847,5,63,0,0,843,847,5,64,0,0,844,847,5,65,0,0,
        845,847,5,66,0,0,846,796,1,0,0,0,846,801,1,0,0,0,846,806,1,0,0,0,
        846,811,1,0,0,0,846,816,1,0,0,0,846,821,1,0,0,0,846,826,1,0,0,0,
        846,831,1,0,0,0,846,836,1,0,0,0,846,837,1,0,0,0,846,838,1,0,0,0,
        846,839,1,0,0,0,846,840,1,0,0,0,846,841,1,0,0,0,846,842,1,0,0,0,
        846,843,1,0,0,0,846,844,1,0,0,0,846,845,1,0,0,0,847,173,1,0,0,0,
        848,849,5,67,0,0,849,850,5,1,0,0,850,851,7,4,0,0,851,175,1,0,0,0,
        852,853,5,70,0,0,853,854,5,1,0,0,854,855,7,4,0,0,855,177,1,0,0,0,
        856,857,5,71,0,0,857,858,5,1,0,0,858,859,7,5,0,0,859,179,1,0,0,0,
        860,861,5,72,0,0,861,862,5,1,0,0,862,863,7,6,0,0,863,181,1,0,0,0,
        864,865,5,73,0,0,865,866,5,1,0,0,866,867,7,7,0,0,867,183,1,0,0,0,
        868,871,5,89,0,0,869,870,5,1,0,0,870,872,5,90,0,0,871,869,1,0,0,
        0,871,872,1,0,0,0,872,185,1,0,0,0,873,874,5,91,0,0,874,875,5,1,0,
        0,875,876,7,4,0,0,876,187,1,0,0,0,877,878,5,32,0,0,878,879,5,1,0,
        0,879,880,5,33,0,0,880,189,1,0,0,0,881,882,5,28,0,0,882,883,5,1,
        0,0,883,884,5,29,0,0,884,191,1,0,0,0,885,886,5,37,0,0,886,887,5,
        1,0,0,887,890,5,38,0,0,888,890,5,39,0,0,889,885,1,0,0,0,889,888,
        1,0,0,0,890,193,1,0,0,0,891,892,5,116,0,0,892,195,1,0,0,0,893,894,
        7,8,0,0,894,197,1,0,0,0,62,203,214,216,244,252,261,267,272,293,299,
        305,309,329,335,354,404,414,444,488,502,517,523,537,548,553,560,
        562,571,582,585,591,598,601,607,613,622,636,648,660,671,682,693,
        705,724,729,741,747,758,777,786,794,799,804,809,814,819,824,829,
        834,846,871,889
    ]

class AleoParser ( Parser ):

    grammarFileName = "AleoParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'.'", "'/'", "'['", "']'", "';'", "'::'", 
                     "':'", "'-'", "'as'", "'into'", "'to'", "'public'", 
                     "'private'", "'constant'", "'future'", "'record'", 
                     "'group'", "'GEN'", "'self'", "'signer'", "'caller'", 
                     "'block'", "'height'", "'w'", "'x'", "'y'", "'contains'", 
                     "'get'", "'or_use'", "'set'", "'remove'", "'rand'", 
                     "'chacha'", "'position'", "'await'", "'ternary'", "'sign'", 
                     "'verify'", "'sign_verify'", "'call'", "'async'", "'abs'", 
                     "'double'", "'inv'", "'neg'", "'not'", "'square'", 
                     "'sqrt'", "'add'", "'sub'", "'mul'", "'div'", "'rem'", 
                     "'pow'", "'shl'", "'shr'", "'mod'", "'and'", "'or'", 
                     "'xor'", "'nand'", "'nor'", "'gt'", "'gte'", "'lt'", 
                     "'lte'", "'is'", "'eq'", "'neq'", "'assert'", "'commit'", 
                     "'hash'", "'hash_many'", "'bhp256'", "'bhp512'", "'bhp768'", 
                     "'bhp1024'", "'ped64'", "'ped128'", "'psd2'", "'psd4'", 
                     "'psd8'", "'keccak256'", "'keccak384'", "'keccak512'", 
                     "'sha3_256'", "'sha3_384'", "'sha3_512'", "'cast'", 
                     "'lossy'", "'branch'", "'program'", "'import'", "'mapping'", 
                     "'key'", "'value'", "'struct'", "'closure'", "'input'", 
                     "'output'", "'function'", "'finalize'", "'true'", "'false'", 
                     "<INVALID>", "<INVALID>", "'field'", "'scalar'", "'address'", 
                     "'boolean'", "'signature'" ]

    symbolicNames = [ "<INVALID>", "DOT", "SLASH", "LB", "RB", "SC", "CC", 
                      "CL", "DS", "AS", "INTO", "TO", "PUBLIC", "PRIVATE", 
                      "CONSTANT", "FUTURE", "RECORD", "GROUP", "GEN", "SELF", 
                      "SIGNER", "CALLER", "BLOCK", "HEIGHT", "W", "X", "Y", 
                      "CONTAINS", "GET", "OR_USE", "SET", "REMOVE", "RAND", 
                      "CHACHA", "POSITION", "AWAIT", "TERNARY", "SIGN", 
                      "VERIFY", "SIGN_VERIFY", "CALL", "ASYNC", "ABS", "DOUBLE", 
                      "INV", "NEG", "NOT", "SQUARE", "SQRT", "ADD", "SUB", 
                      "MUL", "DIV", "REM", "POW", "SHL", "SHR", "MOD", "AND", 
                      "OR", "XOR", "NAND", "NOR", "GT", "GTE", "LT", "LTE", 
                      "IS", "EQ", "NEQ", "ASSERT", "COMMIT", "HASH", "HASH_MANY", 
                      "BHP256", "BHP512", "BHP768", "BHP1024", "PED64", 
                      "PED128", "PSD2", "PSD4", "PSD8", "KECCAK256", "KECCAK384", 
                      "KECCAK512", "SHA3_256", "SHA3_384", "SHA3_512", "CAST", 
                      "LOSSY", "BRANCH", "PROGRAM", "IMPORT", "MAPPING", 
                      "KEY", "VALUE", "STRUCT", "CLOSURE", "INPUT", "OUTPUT", 
                      "FUNCTION", "FINALIZE", "TRUE", "FALSE", "UNSIGNED_TYPE", 
                      "SIGNED_TYPE", "FIELD", "SCALAR", "ADDRESS", "BOOLEAN", 
                      "SIGNATURE", "ADDRESS_LITERAL", "SIGNATURE_LITERAL", 
                      "DIGITS", "REGISTER", "IDENTIFIER", "WS", "COMMENT", 
                      "LINE_COMMENT" ]

    RULE_start = 0
    RULE_program = 1
    RULE_ximport = 2
    RULE_mapping = 3
    RULE_mapping_key = 4
    RULE_mapping_value = 5
    RULE_struct = 6
    RULE_record = 7
    RULE_closure = 8
    RULE_closure_input = 9
    RULE_closure_output = 10
    RULE_function = 11
    RULE_function_input = 12
    RULE_function_output = 13
    RULE_finalize = 14
    RULE_finalize_input = 15
    RULE_command = 16
    RULE_contains = 17
    RULE_get = 18
    RULE_get_or_use = 19
    RULE_set = 20
    RULE_remove = 21
    RULE_random = 22
    RULE_position = 23
    RULE_branch = 24
    RULE_xawait = 25
    RULE_instruction = 26
    RULE_unary = 27
    RULE_binary = 28
    RULE_ternary = 29
    RULE_is = 30
    RULE_assert = 31
    RULE_commit = 32
    RULE_hash1 = 33
    RULE_hash2 = 34
    RULE_hash = 35
    RULE_sign_verify = 36
    RULE_cast = 37
    RULE_call = 38
    RULE_xasync = 39
    RULE_literal = 40
    RULE_signed_literal = 41
    RULE_unsigned_literal = 42
    RULE_integer_literal = 43
    RULE_field_literal = 44
    RULE_group_literal = 45
    RULE_scalar_literal = 46
    RULE_arithmetic_literal = 47
    RULE_address_literal = 48
    RULE_signature_literal = 49
    RULE_boolean_literal = 50
    RULE_unsigned_type = 51
    RULE_signed_type = 52
    RULE_integer_type = 53
    RULE_field_type = 54
    RULE_group_type = 55
    RULE_scalar_type = 56
    RULE_arithmetic_type = 57
    RULE_address_type = 58
    RULE_boolean_type = 59
    RULE_signature_type = 60
    RULE_literal_type = 61
    RULE_array_type = 62
    RULE_plaintext_type = 63
    RULE_value_type = 64
    RULE_mapping_type = 65
    RULE_finalize_type = 66
    RULE_entry_type = 67
    RULE_register_type = 68
    RULE_modifier = 69
    RULE_program_id = 70
    RULE_program_name = 71
    RULE_program_domain = 72
    RULE_register = 73
    RULE_register_access = 74
    RULE_register_accessor = 75
    RULE_access_by_field = 76
    RULE_access_by_index = 77
    RULE_operand = 78
    RULE_operand_preset = 79
    RULE_tuple = 80
    RULE_entry = 81
    RULE_locator = 82
    RULE_cast_destination = 83
    RULE_destination_group = 84
    RULE_unary_op = 85
    RULE_binary_op = 86
    RULE_is_op = 87
    RULE_assert_op = 88
    RULE_commit_op = 89
    RULE_hash1_op = 90
    RULE_hash2_op = 91
    RULE_cast_op = 92
    RULE_branch_op = 93
    RULE_random_op = 94
    RULE_get_or_use_op = 95
    RULE_sign_verify_op = 96
    RULE_label = 97
    RULE_identifier = 98

    ruleNames =  [ "start", "program", "ximport", "mapping", "mapping_key", 
                   "mapping_value", "struct", "record", "closure", "closure_input", 
                   "closure_output", "function", "function_input", "function_output", 
                   "finalize", "finalize_input", "command", "contains", 
                   "get", "get_or_use", "set", "remove", "random", "position", 
                   "branch", "xawait", "instruction", "unary", "binary", 
                   "ternary", "is", "assert", "commit", "hash1", "hash2", 
                   "hash", "sign_verify", "cast", "call", "xasync", "literal", 
                   "signed_literal", "unsigned_literal", "integer_literal", 
                   "field_literal", "group_literal", "scalar_literal", "arithmetic_literal", 
                   "address_literal", "signature_literal", "boolean_literal", 
                   "unsigned_type", "signed_type", "integer_type", "field_type", 
                   "group_type", "scalar_type", "arithmetic_type", "address_type", 
                   "boolean_type", "signature_type", "literal_type", "array_type", 
                   "plaintext_type", "value_type", "mapping_type", "finalize_type", 
                   "entry_type", "register_type", "modifier", "program_id", 
                   "program_name", "program_domain", "register", "register_access", 
                   "register_accessor", "access_by_field", "access_by_index", 
                   "operand", "operand_preset", "tuple", "entry", "locator", 
                   "cast_destination", "destination_group", "unary_op", 
                   "binary_op", "is_op", "assert_op", "commit_op", "hash1_op", 
                   "hash2_op", "cast_op", "branch_op", "random_op", "get_or_use_op", 
                   "sign_verify_op", "label", "identifier" ]

    EOF = Token.EOF
    DOT=1
    SLASH=2
    LB=3
    RB=4
    SC=5
    CC=6
    CL=7
    DS=8
    AS=9
    INTO=10
    TO=11
    PUBLIC=12
    PRIVATE=13
    CONSTANT=14
    FUTURE=15
    RECORD=16
    GROUP=17
    GEN=18
    SELF=19
    SIGNER=20
    CALLER=21
    BLOCK=22
    HEIGHT=23
    W=24
    X=25
    Y=26
    CONTAINS=27
    GET=28
    OR_USE=29
    SET=30
    REMOVE=31
    RAND=32
    CHACHA=33
    POSITION=34
    AWAIT=35
    TERNARY=36
    SIGN=37
    VERIFY=38
    SIGN_VERIFY=39
    CALL=40
    ASYNC=41
    ABS=42
    DOUBLE=43
    INV=44
    NEG=45
    NOT=46
    SQUARE=47
    SQRT=48
    ADD=49
    SUB=50
    MUL=51
    DIV=52
    REM=53
    POW=54
    SHL=55
    SHR=56
    MOD=57
    AND=58
    OR=59
    XOR=60
    NAND=61
    NOR=62
    GT=63
    GTE=64
    LT=65
    LTE=66
    IS=67
    EQ=68
    NEQ=69
    ASSERT=70
    COMMIT=71
    HASH=72
    HASH_MANY=73
    BHP256=74
    BHP512=75
    BHP768=76
    BHP1024=77
    PED64=78
    PED128=79
    PSD2=80
    PSD4=81
    PSD8=82
    KECCAK256=83
    KECCAK384=84
    KECCAK512=85
    SHA3_256=86
    SHA3_384=87
    SHA3_512=88
    CAST=89
    LOSSY=90
    BRANCH=91
    PROGRAM=92
    IMPORT=93
    MAPPING=94
    KEY=95
    VALUE=96
    STRUCT=97
    CLOSURE=98
    INPUT=99
    OUTPUT=100
    FUNCTION=101
    FINALIZE=102
    TRUE=103
    FALSE=104
    UNSIGNED_TYPE=105
    SIGNED_TYPE=106
    FIELD=107
    SCALAR=108
    ADDRESS=109
    BOOLEAN=110
    SIGNATURE=111
    ADDRESS_LITERAL=112
    SIGNATURE_LITERAL=113
    DIGITS=114
    REGISTER=115
    IDENTIFIER=116
    WS=117
    COMMENT=118
    LINE_COMMENT=119

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program(self):
            return self.getTypedRuleContext(AleoParser.ProgramContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_start

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStart" ):
                listener.enterStart(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStart" ):
                listener.exitStart(self)




    def start(self):

        localctx = AleoParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.program()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PROGRAM(self):
            return self.getToken(AleoParser.PROGRAM, 0)

        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def ximport(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.XimportContext)
            else:
                return self.getTypedRuleContext(AleoParser.XimportContext,i)


        def mapping(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.MappingContext)
            else:
                return self.getTypedRuleContext(AleoParser.MappingContext,i)


        def struct(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.StructContext)
            else:
                return self.getTypedRuleContext(AleoParser.StructContext,i)


        def record(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.RecordContext)
            else:
                return self.getTypedRuleContext(AleoParser.RecordContext,i)


        def closure(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.ClosureContext)
            else:
                return self.getTypedRuleContext(AleoParser.ClosureContext,i)


        def function(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.FunctionContext)
            else:
                return self.getTypedRuleContext(AleoParser.FunctionContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)




    def program(self):

        localctx = AleoParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==93:
                self.state = 200
                self.ximport()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(AleoParser.PROGRAM)
            self.state = 207
            self.program_id()
            self.state = 208
            self.match(AleoParser.SC)
            self.state = 214 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 214
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [94]:
                    self.state = 209
                    self.mapping()
                    pass
                elif token in [97]:
                    self.state = 210
                    self.struct()
                    pass
                elif token in [16]:
                    self.state = 211
                    self.record()
                    pass
                elif token in [98]:
                    self.state = 212
                    self.closure()
                    pass
                elif token in [101]:
                    self.state = 213
                    self.function()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 216 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==16 or ((((_la - 94)) & ~0x3f) == 0 and ((1 << (_la - 94)) & 153) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XimportContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(AleoParser.IMPORT, 0)

        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_ximport

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXimport" ):
                listener.enterXimport(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXimport" ):
                listener.exitXimport(self)




    def ximport(self):

        localctx = AleoParser.XimportContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_ximport)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(AleoParser.IMPORT)
            self.state = 219
            self.program_id()
            self.state = 220
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MappingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAPPING(self):
            return self.getToken(AleoParser.MAPPING, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def CL(self):
            return self.getToken(AleoParser.CL, 0)

        def mapping_key(self):
            return self.getTypedRuleContext(AleoParser.Mapping_keyContext,0)


        def mapping_value(self):
            return self.getTypedRuleContext(AleoParser.Mapping_valueContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_mapping

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping" ):
                listener.enterMapping(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping" ):
                listener.exitMapping(self)




    def mapping(self):

        localctx = AleoParser.MappingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_mapping)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(AleoParser.MAPPING)
            self.state = 223
            self.identifier()
            self.state = 224
            self.match(AleoParser.CL)
            self.state = 225
            self.mapping_key()
            self.state = 226
            self.mapping_value()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_keyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY(self):
            return self.getToken(AleoParser.KEY, 0)

        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def mapping_type(self):
            return self.getTypedRuleContext(AleoParser.Mapping_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_mapping_key

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_key" ):
                listener.enterMapping_key(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_key" ):
                listener.exitMapping_key(self)




    def mapping_key(self):

        localctx = AleoParser.Mapping_keyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_mapping_key)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(AleoParser.KEY)
            self.state = 229
            self.match(AleoParser.AS)
            self.state = 230
            self.mapping_type()
            self.state = 231
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VALUE(self):
            return self.getToken(AleoParser.VALUE, 0)

        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def mapping_type(self):
            return self.getTypedRuleContext(AleoParser.Mapping_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_mapping_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_value" ):
                listener.enterMapping_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_value" ):
                listener.exitMapping_value(self)




    def mapping_value(self):

        localctx = AleoParser.Mapping_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_mapping_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(AleoParser.VALUE)
            self.state = 234
            self.match(AleoParser.AS)
            self.state = 235
            self.mapping_type()
            self.state = 236
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StructContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRUCT(self):
            return self.getToken(AleoParser.STRUCT, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def CL(self):
            return self.getToken(AleoParser.CL, 0)

        def tuple_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.TupleContext)
            else:
                return self.getTypedRuleContext(AleoParser.TupleContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_struct

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStruct" ):
                listener.enterStruct(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStruct" ):
                listener.exitStruct(self)




    def struct(self):

        localctx = AleoParser.StructContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_struct)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(AleoParser.STRUCT)
            self.state = 239
            self.identifier()
            self.state = 240
            self.match(AleoParser.CL)
            self.state = 242 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 241
                    self.tuple_()

                else:
                    raise NoViableAltException(self)
                self.state = 244 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RECORD(self):
            return self.getToken(AleoParser.RECORD, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def CL(self):
            return self.getToken(AleoParser.CL, 0)

        def entry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.EntryContext)
            else:
                return self.getTypedRuleContext(AleoParser.EntryContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_record

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecord" ):
                listener.enterRecord(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecord" ):
                listener.exitRecord(self)




    def record(self):

        localctx = AleoParser.RecordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_record)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(AleoParser.RECORD)
            self.state = 247
            self.identifier()
            self.state = 248
            self.match(AleoParser.CL)
            self.state = 252
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 249
                    self.entry() 
                self.state = 254
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClosureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLOSURE(self):
            return self.getToken(AleoParser.CLOSURE, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def CL(self):
            return self.getToken(AleoParser.CL, 0)

        def closure_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Closure_inputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Closure_inputContext,i)


        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.InstructionContext)
            else:
                return self.getTypedRuleContext(AleoParser.InstructionContext,i)


        def closure_output(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Closure_outputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Closure_outputContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_closure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure" ):
                listener.enterClosure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure" ):
                listener.exitClosure(self)




    def closure(self):

        localctx = AleoParser.ClosureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_closure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(AleoParser.CLOSURE)
            self.state = 256
            self.identifier()
            self.state = 257
            self.match(AleoParser.CL)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==99:
                self.state = 258
                self.closure_input()
                self.state = 263
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 264
                self.instruction()
                self.state = 267 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 9007461247746043) != 0)):
                    break

            self.state = 272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==100:
                self.state = 269
                self.closure_output()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(AleoParser.INPUT, 0)

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def register_type(self):
            return self.getTypedRuleContext(AleoParser.Register_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_closure_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_input" ):
                listener.enterClosure_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_input" ):
                listener.exitClosure_input(self)




    def closure_input(self):

        localctx = AleoParser.Closure_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_closure_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(AleoParser.INPUT)
            self.state = 276
            self.register()
            self.state = 277
            self.match(AleoParser.AS)
            self.state = 278
            self.register_type()
            self.state = 279
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Closure_outputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(AleoParser.OUTPUT, 0)

        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def register_type(self):
            return self.getTypedRuleContext(AleoParser.Register_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_closure_output

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClosure_output" ):
                listener.enterClosure_output(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClosure_output" ):
                listener.exitClosure_output(self)




    def closure_output(self):

        localctx = AleoParser.Closure_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_closure_output)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 281
            self.match(AleoParser.OUTPUT)
            self.state = 282
            self.operand()
            self.state = 283
            self.match(AleoParser.AS)
            self.state = 284
            self.register_type()
            self.state = 285
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(AleoParser.FUNCTION, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def CL(self):
            return self.getToken(AleoParser.CL, 0)

        def function_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Function_inputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Function_inputContext,i)


        def instruction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.InstructionContext)
            else:
                return self.getTypedRuleContext(AleoParser.InstructionContext,i)


        def function_output(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Function_outputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Function_outputContext,i)


        def finalize(self):
            return self.getTypedRuleContext(AleoParser.FinalizeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction" ):
                listener.enterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction" ):
                listener.exitFunction(self)




    def function(self):

        localctx = AleoParser.FunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(AleoParser.FUNCTION)
            self.state = 288
            self.identifier()
            self.state = 289
            self.match(AleoParser.CL)
            self.state = 293
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==99:
                self.state = 290
                self.function_input()
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 299
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & 9007461247746043) != 0):
                self.state = 296
                self.instruction()
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==100:
                self.state = 302
                self.function_output()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==102:
                self.state = 308
                self.finalize()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(AleoParser.INPUT, 0)

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def value_type(self):
            return self.getTypedRuleContext(AleoParser.Value_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_function_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_input" ):
                listener.enterFunction_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_input" ):
                listener.exitFunction_input(self)




    def function_input(self):

        localctx = AleoParser.Function_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_function_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 311
            self.match(AleoParser.INPUT)
            self.state = 312
            self.register()
            self.state = 313
            self.match(AleoParser.AS)
            self.state = 314
            self.value_type()
            self.state = 315
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_outputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OUTPUT(self):
            return self.getToken(AleoParser.OUTPUT, 0)

        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def value_type(self):
            return self.getTypedRuleContext(AleoParser.Value_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_function_output

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_output" ):
                listener.enterFunction_output(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_output" ):
                listener.exitFunction_output(self)




    def function_output(self):

        localctx = AleoParser.Function_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_function_output)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(AleoParser.OUTPUT)
            self.state = 318
            self.operand()
            self.state = 319
            self.match(AleoParser.AS)
            self.state = 320
            self.value_type()
            self.state = 321
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinalizeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALIZE(self):
            return self.getToken(AleoParser.FINALIZE, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def CL(self):
            return self.getToken(AleoParser.CL, 0)

        def finalize_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Finalize_inputContext)
            else:
                return self.getTypedRuleContext(AleoParser.Finalize_inputContext,i)


        def command(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.CommandContext)
            else:
                return self.getTypedRuleContext(AleoParser.CommandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_finalize

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalize" ):
                listener.enterFinalize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalize" ):
                listener.exitFinalize(self)




    def finalize(self):

        localctx = AleoParser.FinalizeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_finalize)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 323
            self.match(AleoParser.FINALIZE)
            self.state = 324
            self.identifier()
            self.state = 325
            self.match(AleoParser.CL)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==99:
                self.state = 326
                self.finalize_input()
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -284138930176) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 167773135) != 0):
                self.state = 332
                self.command()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finalize_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INPUT(self):
            return self.getToken(AleoParser.INPUT, 0)

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def finalize_type(self):
            return self.getTypedRuleContext(AleoParser.Finalize_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_finalize_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalize_input" ):
                listener.enterFinalize_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalize_input" ):
                listener.exitFinalize_input(self)




    def finalize_input(self):

        localctx = AleoParser.Finalize_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_finalize_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(AleoParser.INPUT)
            self.state = 339
            self.register()
            self.state = 340
            self.match(AleoParser.AS)
            self.state = 341
            self.finalize_type()
            self.state = 342
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def contains(self):
            return self.getTypedRuleContext(AleoParser.ContainsContext,0)


        def get(self):
            return self.getTypedRuleContext(AleoParser.GetContext,0)


        def get_or_use(self):
            return self.getTypedRuleContext(AleoParser.Get_or_useContext,0)


        def set_(self):
            return self.getTypedRuleContext(AleoParser.SetContext,0)


        def remove(self):
            return self.getTypedRuleContext(AleoParser.RemoveContext,0)


        def random(self):
            return self.getTypedRuleContext(AleoParser.RandomContext,0)


        def position(self):
            return self.getTypedRuleContext(AleoParser.PositionContext,0)


        def branch(self):
            return self.getTypedRuleContext(AleoParser.BranchContext,0)


        def xawait(self):
            return self.getTypedRuleContext(AleoParser.XawaitContext,0)


        def instruction(self):
            return self.getTypedRuleContext(AleoParser.InstructionContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_command

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommand" ):
                listener.enterCommand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommand" ):
                listener.exitCommand(self)




    def command(self):

        localctx = AleoParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_command)
        try:
            self.state = 354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 344
                self.contains()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 345
                self.get()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 346
                self.get_or_use()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 347
                self.set_()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 348
                self.remove()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 349
                self.random()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 350
                self.position()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 351
                self.branch()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 352
                self.xawait()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 353
                self.instruction()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ContainsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTAINS(self):
            return self.getToken(AleoParser.CONTAINS, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def LB(self):
            return self.getToken(AleoParser.LB, 0)

        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def RB(self):
            return self.getToken(AleoParser.RB, 0)

        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_contains

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContains" ):
                listener.enterContains(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContains" ):
                listener.exitContains(self)




    def contains(self):

        localctx = AleoParser.ContainsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_contains)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(AleoParser.CONTAINS)
            self.state = 357
            self.identifier()
            self.state = 358
            self.match(AleoParser.LB)
            self.state = 359
            self.operand()
            self.state = 360
            self.match(AleoParser.RB)
            self.state = 361
            self.match(AleoParser.INTO)
            self.state = 362
            self.register_access()
            self.state = 363
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(AleoParser.GET, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def LB(self):
            return self.getToken(AleoParser.LB, 0)

        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def RB(self):
            return self.getToken(AleoParser.RB, 0)

        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_get

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet" ):
                listener.enterGet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet" ):
                listener.exitGet(self)




    def get(self):

        localctx = AleoParser.GetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_get)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.match(AleoParser.GET)
            self.state = 366
            self.identifier()
            self.state = 367
            self.match(AleoParser.LB)
            self.state = 368
            self.operand()
            self.state = 369
            self.match(AleoParser.RB)
            self.state = 370
            self.match(AleoParser.INTO)
            self.state = 371
            self.register_access()
            self.state = 372
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_or_useContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def get_or_use_op(self):
            return self.getTypedRuleContext(AleoParser.Get_or_use_opContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def LB(self):
            return self.getToken(AleoParser.LB, 0)

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def RB(self):
            return self.getToken(AleoParser.RB, 0)

        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_get_or_use

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_or_use" ):
                listener.enterGet_or_use(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_or_use" ):
                listener.exitGet_or_use(self)




    def get_or_use(self):

        localctx = AleoParser.Get_or_useContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_get_or_use)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.get_or_use_op()
            self.state = 375
            self.identifier()
            self.state = 376
            self.match(AleoParser.LB)
            self.state = 377
            self.operand()
            self.state = 378
            self.match(AleoParser.RB)
            self.state = 379
            self.operand()
            self.state = 380
            self.match(AleoParser.INTO)
            self.state = 381
            self.register_access()
            self.state = 382
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(AleoParser.SET, 0)

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def LB(self):
            return self.getToken(AleoParser.LB, 0)

        def RB(self):
            return self.getToken(AleoParser.RB, 0)

        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_set

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSet" ):
                listener.enterSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSet" ):
                listener.exitSet(self)




    def set_(self):

        localctx = AleoParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_set)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 384
            self.match(AleoParser.SET)
            self.state = 385
            self.operand()
            self.state = 386
            self.match(AleoParser.INTO)
            self.state = 387
            self.identifier()
            self.state = 388
            self.match(AleoParser.LB)
            self.state = 389
            self.operand()
            self.state = 390
            self.match(AleoParser.RB)
            self.state = 391
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RemoveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REMOVE(self):
            return self.getToken(AleoParser.REMOVE, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def LB(self):
            return self.getToken(AleoParser.LB, 0)

        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def RB(self):
            return self.getToken(AleoParser.RB, 0)

        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_remove

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRemove" ):
                listener.enterRemove(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRemove" ):
                listener.exitRemove(self)




    def remove(self):

        localctx = AleoParser.RemoveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_remove)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self.match(AleoParser.REMOVE)
            self.state = 394
            self.identifier()
            self.state = 395
            self.match(AleoParser.LB)
            self.state = 396
            self.operand()
            self.state = 397
            self.match(AleoParser.RB)
            self.state = 398
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RandomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def random_op(self):
            return self.getTypedRuleContext(AleoParser.Random_opContext,0)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(AleoParser.Boolean_typeContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_random

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandom" ):
                listener.enterRandom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandom" ):
                listener.exitRandom(self)




    def random(self):

        localctx = AleoParser.RandomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_random)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.random_op()
            self.state = 404
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 401
                    self.operand() 
                self.state = 406
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 407
            self.match(AleoParser.INTO)
            self.state = 408
            self.register_access()
            self.state = 409
            self.match(AleoParser.AS)
            self.state = 414
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 105, 106, 107, 108]:
                self.state = 410
                self.arithmetic_type()
                pass
            elif token in [109]:
                self.state = 411
                self.address_type()
                pass
            elif token in [111]:
                self.state = 412
                self.signature_type()
                pass
            elif token in [110]:
                self.state = 413
                self.boolean_type()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 416
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PositionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POSITION(self):
            return self.getToken(AleoParser.POSITION, 0)

        def label(self):
            return self.getTypedRuleContext(AleoParser.LabelContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_position

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPosition" ):
                listener.enterPosition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPosition" ):
                listener.exitPosition(self)




    def position(self):

        localctx = AleoParser.PositionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_position)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.match(AleoParser.POSITION)
            self.state = 419
            self.label()
            self.state = 420
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BranchContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def branch_op(self):
            return self.getTypedRuleContext(AleoParser.Branch_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def TO(self):
            return self.getToken(AleoParser.TO, 0)

        def label(self):
            return self.getTypedRuleContext(AleoParser.LabelContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_branch

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranch" ):
                listener.enterBranch(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranch" ):
                listener.exitBranch(self)




    def branch(self):

        localctx = AleoParser.BranchContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_branch)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self.branch_op()
            self.state = 423
            self.operand()
            self.state = 424
            self.operand()
            self.state = 425
            self.match(AleoParser.TO)
            self.state = 426
            self.label()
            self.state = 427
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XawaitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AWAIT(self):
            return self.getToken(AleoParser.AWAIT, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_xawait

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXawait" ):
                listener.enterXawait(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXawait" ):
                listener.exitXawait(self)




    def xawait(self):

        localctx = AleoParser.XawaitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_xawait)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.match(AleoParser.AWAIT)
            self.state = 430
            self.register_access()
            self.state = 431
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstructionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary(self):
            return self.getTypedRuleContext(AleoParser.UnaryContext,0)


        def binary(self):
            return self.getTypedRuleContext(AleoParser.BinaryContext,0)


        def ternary(self):
            return self.getTypedRuleContext(AleoParser.TernaryContext,0)


        def is_(self):
            return self.getTypedRuleContext(AleoParser.IsContext,0)


        def assert_(self):
            return self.getTypedRuleContext(AleoParser.AssertContext,0)


        def commit(self):
            return self.getTypedRuleContext(AleoParser.CommitContext,0)


        def hash_(self):
            return self.getTypedRuleContext(AleoParser.HashContext,0)


        def sign_verify(self):
            return self.getTypedRuleContext(AleoParser.Sign_verifyContext,0)


        def cast(self):
            return self.getTypedRuleContext(AleoParser.CastContext,0)


        def call(self):
            return self.getTypedRuleContext(AleoParser.CallContext,0)


        def xasync(self):
            return self.getTypedRuleContext(AleoParser.XasyncContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_instruction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstruction" ):
                listener.enterInstruction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstruction" ):
                listener.exitInstruction(self)




    def instruction(self):

        localctx = AleoParser.InstructionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_instruction)
        try:
            self.state = 444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 43, 44, 45, 46, 47, 48]:
                self.enterOuterAlt(localctx, 1)
                self.state = 433
                self.unary()
                pass
            elif token in [49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]:
                self.enterOuterAlt(localctx, 2)
                self.state = 434
                self.binary()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 3)
                self.state = 435
                self.ternary()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 4)
                self.state = 436
                self.is_()
                pass
            elif token in [70]:
                self.enterOuterAlt(localctx, 5)
                self.state = 437
                self.assert_()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 6)
                self.state = 438
                self.commit()
                pass
            elif token in [72, 73]:
                self.enterOuterAlt(localctx, 7)
                self.state = 439
                self.hash_()
                pass
            elif token in [37, 39]:
                self.enterOuterAlt(localctx, 8)
                self.state = 440
                self.sign_verify()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 9)
                self.state = 441
                self.cast()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 10)
                self.state = 442
                self.call()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 11)
                self.state = 443
                self.xasync()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unary_op(self):
            return self.getTypedRuleContext(AleoParser.Unary_opContext,0)


        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_unary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary" ):
                listener.enterUnary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary" ):
                listener.exitUnary(self)




    def unary(self):

        localctx = AleoParser.UnaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_unary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.unary_op()
            self.state = 447
            self.operand()
            self.state = 448
            self.match(AleoParser.INTO)
            self.state = 449
            self.register_access()
            self.state = 450
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def binary_op(self):
            return self.getTypedRuleContext(AleoParser.Binary_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_binary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary" ):
                listener.enterBinary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary" ):
                listener.exitBinary(self)




    def binary(self):

        localctx = AleoParser.BinaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_binary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 452
            self.binary_op()
            self.state = 453
            self.operand()
            self.state = 454
            self.operand()
            self.state = 455
            self.match(AleoParser.INTO)
            self.state = 456
            self.register_access()
            self.state = 457
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TernaryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TERNARY(self):
            return self.getToken(AleoParser.TERNARY, 0)

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_ternary

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTernary" ):
                listener.enterTernary(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTernary" ):
                listener.exitTernary(self)




    def ternary(self):

        localctx = AleoParser.TernaryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_ternary)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 459
            self.match(AleoParser.TERNARY)
            self.state = 460
            self.operand()
            self.state = 461
            self.operand()
            self.state = 462
            self.operand()
            self.state = 463
            self.match(AleoParser.INTO)
            self.state = 464
            self.register_access()
            self.state = 465
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def is_op(self):
            return self.getTypedRuleContext(AleoParser.Is_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_is

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs" ):
                listener.enterIs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs" ):
                listener.exitIs(self)




    def is_(self):

        localctx = AleoParser.IsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_is)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.is_op()
            self.state = 468
            self.operand()
            self.state = 469
            self.operand()
            self.state = 470
            self.match(AleoParser.INTO)
            self.state = 471
            self.register_access()
            self.state = 472
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assert_op(self):
            return self.getTypedRuleContext(AleoParser.Assert_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_assert

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert" ):
                listener.enterAssert(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert" ):
                listener.exitAssert(self)




    def assert_(self):

        localctx = AleoParser.AssertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_assert)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.assert_op()
            self.state = 475
            self.operand()
            self.state = 476
            self.operand()
            self.state = 477
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def commit_op(self):
            return self.getTypedRuleContext(AleoParser.Commit_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def field_type(self):
            return self.getTypedRuleContext(AleoParser.Field_typeContext,0)


        def group_type(self):
            return self.getTypedRuleContext(AleoParser.Group_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_commit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit" ):
                listener.enterCommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit" ):
                listener.exitCommit(self)




    def commit(self):

        localctx = AleoParser.CommitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_commit)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.commit_op()
            self.state = 480
            self.operand()
            self.state = 481
            self.operand()
            self.state = 482
            self.match(AleoParser.INTO)
            self.state = 483
            self.register_access()
            self.state = 484
            self.match(AleoParser.AS)
            self.state = 488
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                self.state = 485
                self.address_type()
                pass
            elif token in [107]:
                self.state = 486
                self.field_type()
                pass
            elif token in [17]:
                self.state = 487
                self.group_type()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 490
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash1Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash1_op(self):
            return self.getTypedRuleContext(AleoParser.Hash1_opContext,0)


        def operand(self):
            return self.getTypedRuleContext(AleoParser.OperandContext,0)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(AleoParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_hash1

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash1" ):
                listener.enterHash1(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash1" ):
                listener.exitHash1(self)




    def hash1(self):

        localctx = AleoParser.Hash1Context(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_hash1)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self.hash1_op()
            self.state = 493
            self.operand()
            self.state = 494
            self.match(AleoParser.INTO)
            self.state = 495
            self.register_access()
            self.state = 496
            self.match(AleoParser.AS)
            self.state = 502
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.state = 497
                self.arithmetic_type()
                pass

            elif la_ == 2:
                self.state = 498
                self.address_type()
                pass

            elif la_ == 3:
                self.state = 499
                self.signature_type()
                pass

            elif la_ == 4:
                self.state = 500
                self.array_type()
                pass

            elif la_ == 5:
                self.state = 501
                self.identifier()
                pass


            self.state = 504
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash2_op(self):
            return self.getTypedRuleContext(AleoParser.Hash2_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(AleoParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_hash2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash2" ):
                listener.enterHash2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash2" ):
                listener.exitHash2(self)




    def hash2(self):

        localctx = AleoParser.Hash2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_hash2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 506
            self.hash2_op()
            self.state = 507
            self.operand()
            self.state = 508
            self.operand()
            self.state = 509
            self.match(AleoParser.INTO)
            self.state = 510
            self.register_access()
            self.state = 511
            self.match(AleoParser.AS)
            self.state = 517
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 512
                self.arithmetic_type()
                pass

            elif la_ == 2:
                self.state = 513
                self.address_type()
                pass

            elif la_ == 3:
                self.state = 514
                self.signature_type()
                pass

            elif la_ == 4:
                self.state = 515
                self.array_type()
                pass

            elif la_ == 5:
                self.state = 516
                self.identifier()
                pass


            self.state = 519
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HashContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hash1(self):
            return self.getTypedRuleContext(AleoParser.Hash1Context,0)


        def hash2(self):
            return self.getTypedRuleContext(AleoParser.Hash2Context,0)


        def getRuleIndex(self):
            return AleoParser.RULE_hash

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash" ):
                listener.enterHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash" ):
                listener.exitHash(self)




    def hash_(self):

        localctx = AleoParser.HashContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_hash)
        try:
            self.state = 523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [72]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.hash1()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 2)
                self.state = 522
                self.hash2()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sign_verifyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sign_verify_op(self):
            return self.getTypedRuleContext(AleoParser.Sign_verify_opContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_sign_verify

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign_verify" ):
                listener.enterSign_verify(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign_verify" ):
                listener.exitSign_verify(self)




    def sign_verify(self):

        localctx = AleoParser.Sign_verifyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sign_verify)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.sign_verify_op()
            self.state = 526
            self.operand()
            self.state = 527
            self.operand()
            self.state = 528
            self.operand()
            self.state = 529
            self.match(AleoParser.INTO)
            self.state = 530
            self.register_access()
            self.state = 531
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cast_op(self):
            return self.getTypedRuleContext(AleoParser.Cast_opContext,0)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def cast_destination(self):
            return self.getTypedRuleContext(AleoParser.Cast_destinationContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_cast

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast" ):
                listener.enterCast(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast" ):
                listener.exitCast(self)




    def cast(self):

        localctx = AleoParser.CastContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_cast)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 533
            self.cast_op()
            self.state = 535 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 534
                    self.operand()

                else:
                    raise NoViableAltException(self)
                self.state = 537 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

            self.state = 539
            self.match(AleoParser.INTO)
            self.state = 540
            self.register_access()
            self.state = 541
            self.match(AleoParser.AS)
            self.state = 542
            self.cast_destination()
            self.state = 543
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(AleoParser.CALL, 0)

        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Register_accessContext)
            else:
                return self.getTypedRuleContext(AleoParser.Register_accessContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCall" ):
                listener.enterCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCall" ):
                listener.exitCall(self)




    def call(self):

        localctx = AleoParser.CallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_call)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.match(AleoParser.CALL)
            self.state = 548
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 546
                self.locator()
                pass

            elif la_ == 2:
                self.state = 547
                self.identifier()
                pass


            self.state = 553
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 550
                    self.operand() 
                self.state = 555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self.state = 562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 556
                self.match(AleoParser.INTO)
                self.state = 558 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 557
                    self.register_access()
                    self.state = 560 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==115):
                        break



            self.state = 564
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XasyncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASYNC(self):
            return self.getToken(AleoParser.ASYNC, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def operand(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.OperandContext)
            else:
                return self.getTypedRuleContext(AleoParser.OperandContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_xasync

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXasync" ):
                listener.enterXasync(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXasync" ):
                listener.exitXasync(self)




    def xasync(self):

        localctx = AleoParser.XasyncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_xasync)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 566
            self.match(AleoParser.ASYNC)
            self.state = 567
            self.identifier()
            self.state = 571
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 568
                    self.operand() 
                self.state = 573
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

            self.state = 574
            self.match(AleoParser.INTO)
            self.state = 575
            self.register_access()
            self.state = 576
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_literal(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_literalContext,0)


        def address_literal(self):
            return self.getTypedRuleContext(AleoParser.Address_literalContext,0)


        def signature_literal(self):
            return self.getTypedRuleContext(AleoParser.Signature_literalContext,0)


        def boolean_literal(self):
            return self.getTypedRuleContext(AleoParser.Boolean_literalContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)




    def literal(self):

        localctx = AleoParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_literal)
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [8, 114]:
                self.enterOuterAlt(localctx, 1)
                self.state = 578
                self.arithmetic_literal()
                pass
            elif token in [112]:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.address_literal()
                pass
            elif token in [113]:
                self.enterOuterAlt(localctx, 3)
                self.state = 580
                self.signature_literal()
                pass
            elif token in [103, 104]:
                self.enterOuterAlt(localctx, 4)
                self.state = 581
                self.boolean_literal()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(AleoParser.DIGITS, 0)

        def signed_type(self):
            return self.getTypedRuleContext(AleoParser.Signed_typeContext,0)


        def DS(self):
            return self.getToken(AleoParser.DS, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_signed_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_literal" ):
                listener.enterSigned_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_literal" ):
                listener.exitSigned_literal(self)




    def signed_literal(self):

        localctx = AleoParser.Signed_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_signed_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 585
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 584
                self.match(AleoParser.DS)


            self.state = 587
            self.match(AleoParser.DIGITS)
            self.state = 588
            self.signed_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(AleoParser.DIGITS, 0)

        def unsigned_type(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_typeContext,0)


        def DS(self):
            return self.getToken(AleoParser.DS, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_unsigned_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_literal" ):
                listener.enterUnsigned_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_literal" ):
                listener.exitUnsigned_literal(self)




    def unsigned_literal(self):

        localctx = AleoParser.Unsigned_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_unsigned_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 590
                self.match(AleoParser.DS)


            self.state = 593
            self.match(AleoParser.DIGITS)
            self.state = 594
            self.unsigned_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_literal(self):
            return self.getTypedRuleContext(AleoParser.Signed_literalContext,0)


        def unsigned_literal(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_literalContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_integer_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_literal" ):
                listener.enterInteger_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_literal" ):
                listener.exitInteger_literal(self)




    def integer_literal(self):

        localctx = AleoParser.Integer_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_integer_literal)
        try:
            self.state = 598
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 596
                self.signed_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.unsigned_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(AleoParser.DIGITS, 0)

        def field_type(self):
            return self.getTypedRuleContext(AleoParser.Field_typeContext,0)


        def DS(self):
            return self.getToken(AleoParser.DS, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_field_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_literal" ):
                listener.enterField_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_literal" ):
                listener.exitField_literal(self)




    def field_literal(self):

        localctx = AleoParser.Field_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_field_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 600
                self.match(AleoParser.DS)


            self.state = 603
            self.match(AleoParser.DIGITS)
            self.state = 604
            self.field_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(AleoParser.DIGITS, 0)

        def group_type(self):
            return self.getTypedRuleContext(AleoParser.Group_typeContext,0)


        def DS(self):
            return self.getToken(AleoParser.DS, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_group_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_literal" ):
                listener.enterGroup_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_literal" ):
                listener.exitGroup_literal(self)




    def group_literal(self):

        localctx = AleoParser.Group_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_group_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 606
                self.match(AleoParser.DS)


            self.state = 609
            self.match(AleoParser.DIGITS)
            self.state = 610
            self.group_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DIGITS(self):
            return self.getToken(AleoParser.DIGITS, 0)

        def scalar_type(self):
            return self.getTypedRuleContext(AleoParser.Scalar_typeContext,0)


        def DS(self):
            return self.getToken(AleoParser.DS, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_scalar_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_literal" ):
                listener.enterScalar_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_literal" ):
                listener.exitScalar_literal(self)




    def scalar_literal(self):

        localctx = AleoParser.Scalar_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_scalar_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==8:
                self.state = 612
                self.match(AleoParser.DS)


            self.state = 615
            self.match(AleoParser.DIGITS)
            self.state = 616
            self.scalar_type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_literal(self):
            return self.getTypedRuleContext(AleoParser.Integer_literalContext,0)


        def field_literal(self):
            return self.getTypedRuleContext(AleoParser.Field_literalContext,0)


        def group_literal(self):
            return self.getTypedRuleContext(AleoParser.Group_literalContext,0)


        def scalar_literal(self):
            return self.getTypedRuleContext(AleoParser.Scalar_literalContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_arithmetic_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_literal" ):
                listener.enterArithmetic_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_literal" ):
                listener.exitArithmetic_literal(self)




    def arithmetic_literal(self):

        localctx = AleoParser.Arithmetic_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_arithmetic_literal)
        try:
            self.state = 622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.integer_literal()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.field_literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 620
                self.group_literal()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 621
                self.scalar_literal()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Address_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESS_LITERAL(self):
            return self.getToken(AleoParser.ADDRESS_LITERAL, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_address_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddress_literal" ):
                listener.enterAddress_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddress_literal" ):
                listener.exitAddress_literal(self)




    def address_literal(self):

        localctx = AleoParser.Address_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_address_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(AleoParser.ADDRESS_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signature_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNATURE_LITERAL(self):
            return self.getToken(AleoParser.SIGNATURE_LITERAL, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_signature_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature_literal" ):
                listener.enterSignature_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature_literal" ):
                listener.exitSignature_literal(self)




    def signature_literal(self):

        localctx = AleoParser.Signature_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_signature_literal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 626
            self.match(AleoParser.SIGNATURE_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_literalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(AleoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(AleoParser.FALSE, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_boolean_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_literal" ):
                listener.enterBoolean_literal(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_literal" ):
                listener.exitBoolean_literal(self)




    def boolean_literal(self):

        localctx = AleoParser.Boolean_literalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_boolean_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            _la = self._input.LA(1)
            if not(_la==103 or _la==104):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unsigned_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNSIGNED_TYPE(self):
            return self.getToken(AleoParser.UNSIGNED_TYPE, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_unsigned_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnsigned_type" ):
                listener.enterUnsigned_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnsigned_type" ):
                listener.exitUnsigned_type(self)




    def unsigned_type(self):

        localctx = AleoParser.Unsigned_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_unsigned_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(AleoParser.UNSIGNED_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNED_TYPE(self):
            return self.getToken(AleoParser.SIGNED_TYPE, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_signed_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_type" ):
                listener.enterSigned_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_type" ):
                listener.exitSigned_type(self)




    def signed_type(self):

        localctx = AleoParser.Signed_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_signed_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.match(AleoParser.SIGNED_TYPE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Integer_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unsigned_type(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_typeContext,0)


        def signed_type(self):
            return self.getTypedRuleContext(AleoParser.Signed_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_integer_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger_type" ):
                listener.enterInteger_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger_type" ):
                listener.exitInteger_type(self)




    def integer_type(self):

        localctx = AleoParser.Integer_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_integer_type)
        try:
            self.state = 636
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105]:
                self.enterOuterAlt(localctx, 1)
                self.state = 634
                self.unsigned_type()
                pass
            elif token in [106]:
                self.enterOuterAlt(localctx, 2)
                self.state = 635
                self.signed_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Field_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELD(self):
            return self.getToken(AleoParser.FIELD, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_field_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterField_type" ):
                listener.enterField_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitField_type" ):
                listener.exitField_type(self)




    def field_type(self):

        localctx = AleoParser.Field_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_field_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(AleoParser.FIELD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(AleoParser.GROUP, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_group_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_type" ):
                listener.enterGroup_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_type" ):
                listener.exitGroup_type(self)




    def group_type(self):

        localctx = AleoParser.Group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 640
            self.match(AleoParser.GROUP)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Scalar_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCALAR(self):
            return self.getToken(AleoParser.SCALAR, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_scalar_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalar_type" ):
                listener.enterScalar_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalar_type" ):
                listener.exitScalar_type(self)




    def scalar_type(self):

        localctx = AleoParser.Scalar_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_scalar_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 642
            self.match(AleoParser.SCALAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Arithmetic_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer_type(self):
            return self.getTypedRuleContext(AleoParser.Integer_typeContext,0)


        def field_type(self):
            return self.getTypedRuleContext(AleoParser.Field_typeContext,0)


        def group_type(self):
            return self.getTypedRuleContext(AleoParser.Group_typeContext,0)


        def scalar_type(self):
            return self.getTypedRuleContext(AleoParser.Scalar_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_arithmetic_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArithmetic_type" ):
                listener.enterArithmetic_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArithmetic_type" ):
                listener.exitArithmetic_type(self)




    def arithmetic_type(self):

        localctx = AleoParser.Arithmetic_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_arithmetic_type)
        try:
            self.state = 648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [105, 106]:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.integer_type()
                pass
            elif token in [107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.field_type()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 3)
                self.state = 646
                self.group_type()
                pass
            elif token in [108]:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.scalar_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Address_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADDRESS(self):
            return self.getToken(AleoParser.ADDRESS, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_address_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddress_type" ):
                listener.enterAddress_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddress_type" ):
                listener.exitAddress_type(self)




    def address_type(self):

        localctx = AleoParser.Address_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_address_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 650
            self.match(AleoParser.ADDRESS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Boolean_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOLEAN(self):
            return self.getToken(AleoParser.BOOLEAN, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_boolean_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolean_type" ):
                listener.enterBoolean_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolean_type" ):
                listener.exitBoolean_type(self)




    def boolean_type(self):

        localctx = AleoParser.Boolean_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_boolean_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(AleoParser.BOOLEAN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signature_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNATURE(self):
            return self.getToken(AleoParser.SIGNATURE, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_signature_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignature_type" ):
                listener.enterSignature_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignature_type" ):
                listener.exitSignature_type(self)




    def signature_type(self):

        localctx = AleoParser.Signature_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_signature_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(AleoParser.SIGNATURE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def arithmetic_type(self):
            return self.getTypedRuleContext(AleoParser.Arithmetic_typeContext,0)


        def address_type(self):
            return self.getTypedRuleContext(AleoParser.Address_typeContext,0)


        def signature_type(self):
            return self.getTypedRuleContext(AleoParser.Signature_typeContext,0)


        def boolean_type(self):
            return self.getTypedRuleContext(AleoParser.Boolean_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_literal_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_type" ):
                listener.enterLiteral_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_type" ):
                listener.exitLiteral_type(self)




    def literal_type(self):

        localctx = AleoParser.Literal_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_literal_type)
        try:
            self.state = 660
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17, 105, 106, 107, 108]:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self.arithmetic_type()
                pass
            elif token in [109]:
                self.enterOuterAlt(localctx, 2)
                self.state = 657
                self.address_type()
                pass
            elif token in [111]:
                self.enterOuterAlt(localctx, 3)
                self.state = 658
                self.signature_type()
                pass
            elif token in [110]:
                self.enterOuterAlt(localctx, 4)
                self.state = 659
                self.boolean_type()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Array_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LB(self):
            return self.getToken(AleoParser.LB, 0)

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def unsigned_literal(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_literalContext,0)


        def RB(self):
            return self.getToken(AleoParser.RB, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_array_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArray_type" ):
                listener.enterArray_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArray_type" ):
                listener.exitArray_type(self)




    def array_type(self):

        localctx = AleoParser.Array_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_array_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 662
            self.match(AleoParser.LB)
            self.state = 663
            self.plaintext_type()
            self.state = 664
            self.match(AleoParser.SC)
            self.state = 665
            self.unsigned_literal()
            self.state = 666
            self.match(AleoParser.RB)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plaintext_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_type(self):
            return self.getTypedRuleContext(AleoParser.Literal_typeContext,0)


        def array_type(self):
            return self.getTypedRuleContext(AleoParser.Array_typeContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_plaintext_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlaintext_type" ):
                listener.enterPlaintext_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlaintext_type" ):
                listener.exitPlaintext_type(self)




    def plaintext_type(self):

        localctx = AleoParser.Plaintext_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_plaintext_type)
        try:
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.literal_type()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.array_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 670
                self.identifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Value_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def modifier(self):
            return self.getTypedRuleContext(AleoParser.ModifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_value_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValue_type" ):
                listener.enterValue_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValue_type" ):
                listener.exitValue_type(self)




    def value_type(self):

        localctx = AleoParser.Value_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_value_type)
        try:
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 673
                self.plaintext_type()
                self.state = 674
                self.modifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.identifier()
                self.state = 677
                self.modifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 679
                self.locator()
                self.state = 680
                self.modifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Mapping_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def modifier(self):
            return self.getTypedRuleContext(AleoParser.ModifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_mapping_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMapping_type" ):
                listener.enterMapping_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMapping_type" ):
                listener.exitMapping_type(self)




    def mapping_type(self):

        localctx = AleoParser.Mapping_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_mapping_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.plaintext_type()
            self.state = 685
            self.modifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finalize_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def modifier(self):
            return self.getTypedRuleContext(AleoParser.ModifierContext,0)


        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_finalize_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinalize_type" ):
                listener.enterFinalize_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinalize_type" ):
                listener.exitFinalize_type(self)




    def finalize_type(self):

        localctx = AleoParser.Finalize_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_finalize_type)
        try:
            self.state = 693
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.plaintext_type()
                self.state = 688
                self.modifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 690
                self.locator()
                self.state = 691
                self.modifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Entry_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def modifier(self):
            return self.getTypedRuleContext(AleoParser.ModifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_entry_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntry_type" ):
                listener.enterEntry_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntry_type" ):
                listener.exitEntry_type(self)




    def entry_type(self):

        localctx = AleoParser.Entry_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_entry_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.plaintext_type()
            self.state = 696
            self.modifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Register_typeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def modifier(self):
            return self.getTypedRuleContext(AleoParser.ModifierContext,0)


        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_register_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister_type" ):
                listener.enterRegister_type(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister_type" ):
                listener.exitRegister_type(self)




    def register_type(self):

        localctx = AleoParser.Register_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_register_type)
        try:
            self.state = 705
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                self.locator()
                self.state = 699
                self.modifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 701
                self.identifier()
                self.state = 702
                self.modifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 704
                self.plaintext_type()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def CONSTANT(self):
            return self.getToken(AleoParser.CONSTANT, 0)

        def PRIVATE(self):
            return self.getToken(AleoParser.PRIVATE, 0)

        def PUBLIC(self):
            return self.getToken(AleoParser.PUBLIC, 0)

        def RECORD(self):
            return self.getToken(AleoParser.RECORD, 0)

        def FUTURE(self):
            return self.getToken(AleoParser.FUTURE, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)




    def modifier(self):

        localctx = AleoParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_modifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(AleoParser.DOT)
            self.state = 708
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 126976) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_idContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_name(self):
            return self.getTypedRuleContext(AleoParser.Program_nameContext,0)


        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def program_domain(self):
            return self.getTypedRuleContext(AleoParser.Program_domainContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_program_id

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_id" ):
                listener.enterProgram_id(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_id" ):
                listener.exitProgram_id(self)




    def program_id(self):

        localctx = AleoParser.Program_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_program_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.program_name()
            self.state = 711
            self.match(AleoParser.DOT)
            self.state = 712
            self.program_domain()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_program_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_name" ):
                listener.enterProgram_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_name" ):
                listener.exitProgram_name(self)




    def program_name(self):

        localctx = AleoParser.Program_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_program_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Program_domainContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_program_domain

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram_domain" ):
                listener.enterProgram_domain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram_domain" ):
                listener.exitProgram_domain(self)




    def program_domain(self):

        localctx = AleoParser.Program_domainContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_program_domain)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RegisterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REGISTER(self):
            return self.getToken(AleoParser.REGISTER, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_register

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister" ):
                listener.enterRegister(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister" ):
                listener.exitRegister(self)




    def register(self):

        localctx = AleoParser.RegisterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_register)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 718
            self.match(AleoParser.REGISTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Register_accessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def register(self):
            return self.getTypedRuleContext(AleoParser.RegisterContext,0)


        def register_accessor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AleoParser.Register_accessorContext)
            else:
                return self.getTypedRuleContext(AleoParser.Register_accessorContext,i)


        def getRuleIndex(self):
            return AleoParser.RULE_register_access

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister_access" ):
                listener.enterRegister_access(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister_access" ):
                listener.exitRegister_access(self)




    def register_access(self):

        localctx = AleoParser.Register_accessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_register_access)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self.register()
            self.state = 724
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==3:
                self.state = 721
                self.register_accessor()
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Register_accessorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def access_by_field(self):
            return self.getTypedRuleContext(AleoParser.Access_by_fieldContext,0)


        def access_by_index(self):
            return self.getTypedRuleContext(AleoParser.Access_by_indexContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_register_accessor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegister_accessor" ):
                listener.enterRegister_accessor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegister_accessor" ):
                listener.exitRegister_accessor(self)




    def register_accessor(self):

        localctx = AleoParser.Register_accessorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_register_accessor)
        try:
            self.state = 729
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1]:
                self.enterOuterAlt(localctx, 1)
                self.state = 727
                self.access_by_field()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 728
                self.access_by_index()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_by_fieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_access_by_field

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_by_field" ):
                listener.enterAccess_by_field(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_by_field" ):
                listener.exitAccess_by_field(self)




    def access_by_field(self):

        localctx = AleoParser.Access_by_fieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_access_by_field)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 731
            self.match(AleoParser.DOT)
            self.state = 732
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Access_by_indexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LB(self):
            return self.getToken(AleoParser.LB, 0)

        def unsigned_literal(self):
            return self.getTypedRuleContext(AleoParser.Unsigned_literalContext,0)


        def RB(self):
            return self.getToken(AleoParser.RB, 0)

        def DIGITS(self):
            return self.getToken(AleoParser.DIGITS, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_access_by_index

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccess_by_index" ):
                listener.enterAccess_by_index(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccess_by_index" ):
                listener.exitAccess_by_index(self)




    def access_by_index(self):

        localctx = AleoParser.Access_by_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_access_by_index)
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.match(AleoParser.LB)
                self.state = 735
                self.unsigned_literal()
                self.state = 736
                self.match(AleoParser.RB)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.match(AleoParser.LB)
                self.state = 739
                self.match(AleoParser.DIGITS)
                self.state = 740
                self.match(AleoParser.RB)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def operand_preset(self):
            return self.getTypedRuleContext(AleoParser.Operand_presetContext,0)


        def literal(self):
            return self.getTypedRuleContext(AleoParser.LiteralContext,0)


        def register_access(self):
            return self.getTypedRuleContext(AleoParser.Register_accessContext,0)


        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_operand

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperand" ):
                listener.enterOperand(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperand" ):
                listener.exitOperand(self)




    def operand(self):

        localctx = AleoParser.OperandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_operand)
        try:
            self.state = 747
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.operand_preset()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.literal()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 745
                self.register_access()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 746
                self.program_id()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Operand_presetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(AleoParser.GROUP, 0)

        def CC(self):
            return self.getToken(AleoParser.CC, 0)

        def GEN(self):
            return self.getToken(AleoParser.GEN, 0)

        def SELF(self):
            return self.getToken(AleoParser.SELF, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def SIGNER(self):
            return self.getToken(AleoParser.SIGNER, 0)

        def CALLER(self):
            return self.getToken(AleoParser.CALLER, 0)

        def BLOCK(self):
            return self.getToken(AleoParser.BLOCK, 0)

        def HEIGHT(self):
            return self.getToken(AleoParser.HEIGHT, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_operand_preset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperand_preset" ):
                listener.enterOperand_preset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperand_preset" ):
                listener.exitOperand_preset(self)




    def operand_preset(self):

        localctx = AleoParser.Operand_presetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_operand_preset)
        self._la = 0 # Token type
        try:
            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 749
                self.match(AleoParser.GROUP)
                self.state = 750
                self.match(AleoParser.CC)
                self.state = 751
                self.match(AleoParser.GEN)
                pass
            elif token in [19]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.match(AleoParser.SELF)
                self.state = 753
                self.match(AleoParser.DOT)
                self.state = 754
                _la = self._input.LA(1)
                if not(_la==20 or _la==21):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [22]:
                self.enterOuterAlt(localctx, 3)
                self.state = 755
                self.match(AleoParser.BLOCK)
                self.state = 756
                self.match(AleoParser.DOT)
                self.state = 757
                self.match(AleoParser.HEIGHT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TupleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def plaintext_type(self):
            return self.getTypedRuleContext(AleoParser.Plaintext_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_tuple

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTuple" ):
                listener.enterTuple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTuple" ):
                listener.exitTuple(self)




    def tuple_(self):

        localctx = AleoParser.TupleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_tuple)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.identifier()
            self.state = 761
            self.match(AleoParser.AS)
            self.state = 762
            self.plaintext_type()
            self.state = 763
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EntryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def entry_type(self):
            return self.getTypedRuleContext(AleoParser.Entry_typeContext,0)


        def SC(self):
            return self.getToken(AleoParser.SC, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_entry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEntry" ):
                listener.enterEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEntry" ):
                listener.exitEntry(self)




    def entry(self):

        localctx = AleoParser.EntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_entry)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.identifier()
            self.state = 766
            self.match(AleoParser.AS)
            self.state = 767
            self.entry_type()
            self.state = 768
            self.match(AleoParser.SC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def program_id(self):
            return self.getTypedRuleContext(AleoParser.Program_idContext,0)


        def SLASH(self):
            return self.getToken(AleoParser.SLASH, 0)

        def identifier(self):
            return self.getTypedRuleContext(AleoParser.IdentifierContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_locator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocator" ):
                listener.enterLocator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocator" ):
                listener.exitLocator(self)




    def locator(self):

        localctx = AleoParser.LocatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_locator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.program_id()
            self.state = 771
            self.match(AleoParser.SLASH)
            self.state = 772
            self.identifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_destinationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def destination_group(self):
            return self.getTypedRuleContext(AleoParser.Destination_groupContext,0)


        def register_type(self):
            return self.getTypedRuleContext(AleoParser.Register_typeContext,0)


        def locator(self):
            return self.getTypedRuleContext(AleoParser.LocatorContext,0)


        def getRuleIndex(self):
            return AleoParser.RULE_cast_destination

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_destination" ):
                listener.enterCast_destination(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_destination" ):
                listener.exitCast_destination(self)




    def cast_destination(self):

        localctx = AleoParser.Cast_destinationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_cast_destination)
        try:
            self.state = 777
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.destination_group()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.register_type()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 776
                self.locator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Destination_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(AleoParser.GROUP, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def X(self):
            return self.getToken(AleoParser.X, 0)

        def Y(self):
            return self.getToken(AleoParser.Y, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_destination_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDestination_group" ):
                listener.enterDestination_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDestination_group" ):
                listener.exitDestination_group(self)




    def destination_group(self):

        localctx = AleoParser.Destination_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_destination_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(AleoParser.GROUP)
            self.state = 780
            self.match(AleoParser.DOT)
            self.state = 781
            _la = self._input.LA(1)
            if not(_la==25 or _la==26):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(AleoParser.ABS, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def W(self):
            return self.getToken(AleoParser.W, 0)

        def DOUBLE(self):
            return self.getToken(AleoParser.DOUBLE, 0)

        def INV(self):
            return self.getToken(AleoParser.INV, 0)

        def NEG(self):
            return self.getToken(AleoParser.NEG, 0)

        def NOT(self):
            return self.getToken(AleoParser.NOT, 0)

        def SQUARE(self):
            return self.getToken(AleoParser.SQUARE, 0)

        def SQRT(self):
            return self.getToken(AleoParser.SQRT, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_unary_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_op" ):
                listener.enterUnary_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_op" ):
                listener.exitUnary_op(self)




    def unary_op(self):

        localctx = AleoParser.Unary_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_unary_op)
        self._la = 0 # Token type
        try:
            self.state = 794
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.match(AleoParser.ABS)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 784
                    self.match(AleoParser.DOT)
                    self.state = 785
                    self.match(AleoParser.W)


                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 2)
                self.state = 788
                self.match(AleoParser.DOUBLE)
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.match(AleoParser.INV)
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 790
                self.match(AleoParser.NEG)
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 791
                self.match(AleoParser.NOT)
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 6)
                self.state = 792
                self.match(AleoParser.SQUARE)
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 7)
                self.state = 793
                self.match(AleoParser.SQRT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Binary_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(AleoParser.ADD, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def W(self):
            return self.getToken(AleoParser.W, 0)

        def SUB(self):
            return self.getToken(AleoParser.SUB, 0)

        def MUL(self):
            return self.getToken(AleoParser.MUL, 0)

        def DIV(self):
            return self.getToken(AleoParser.DIV, 0)

        def REM(self):
            return self.getToken(AleoParser.REM, 0)

        def POW(self):
            return self.getToken(AleoParser.POW, 0)

        def SHL(self):
            return self.getToken(AleoParser.SHL, 0)

        def SHR(self):
            return self.getToken(AleoParser.SHR, 0)

        def MOD(self):
            return self.getToken(AleoParser.MOD, 0)

        def AND(self):
            return self.getToken(AleoParser.AND, 0)

        def OR(self):
            return self.getToken(AleoParser.OR, 0)

        def XOR(self):
            return self.getToken(AleoParser.XOR, 0)

        def NAND(self):
            return self.getToken(AleoParser.NAND, 0)

        def NOR(self):
            return self.getToken(AleoParser.NOR, 0)

        def GT(self):
            return self.getToken(AleoParser.GT, 0)

        def GTE(self):
            return self.getToken(AleoParser.GTE, 0)

        def LT(self):
            return self.getToken(AleoParser.LT, 0)

        def LTE(self):
            return self.getToken(AleoParser.LTE, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_binary_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinary_op" ):
                listener.enterBinary_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinary_op" ):
                listener.exitBinary_op(self)




    def binary_op(self):

        localctx = AleoParser.Binary_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_binary_op)
        self._la = 0 # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [49]:
                self.enterOuterAlt(localctx, 1)
                self.state = 796
                self.match(AleoParser.ADD)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 797
                    self.match(AleoParser.DOT)
                    self.state = 798
                    self.match(AleoParser.W)


                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 2)
                self.state = 801
                self.match(AleoParser.SUB)
                self.state = 804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 802
                    self.match(AleoParser.DOT)
                    self.state = 803
                    self.match(AleoParser.W)


                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 806
                self.match(AleoParser.MUL)
                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 807
                    self.match(AleoParser.DOT)
                    self.state = 808
                    self.match(AleoParser.W)


                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 4)
                self.state = 811
                self.match(AleoParser.DIV)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 812
                    self.match(AleoParser.DOT)
                    self.state = 813
                    self.match(AleoParser.W)


                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 816
                self.match(AleoParser.REM)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 817
                    self.match(AleoParser.DOT)
                    self.state = 818
                    self.match(AleoParser.W)


                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 6)
                self.state = 821
                self.match(AleoParser.POW)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 822
                    self.match(AleoParser.DOT)
                    self.state = 823
                    self.match(AleoParser.W)


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 7)
                self.state = 826
                self.match(AleoParser.SHL)
                self.state = 829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 827
                    self.match(AleoParser.DOT)
                    self.state = 828
                    self.match(AleoParser.W)


                pass
            elif token in [56]:
                self.enterOuterAlt(localctx, 8)
                self.state = 831
                self.match(AleoParser.SHR)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1:
                    self.state = 832
                    self.match(AleoParser.DOT)
                    self.state = 833
                    self.match(AleoParser.W)


                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 9)
                self.state = 836
                self.match(AleoParser.MOD)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 10)
                self.state = 837
                self.match(AleoParser.AND)
                pass
            elif token in [59]:
                self.enterOuterAlt(localctx, 11)
                self.state = 838
                self.match(AleoParser.OR)
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 12)
                self.state = 839
                self.match(AleoParser.XOR)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 13)
                self.state = 840
                self.match(AleoParser.NAND)
                pass
            elif token in [62]:
                self.enterOuterAlt(localctx, 14)
                self.state = 841
                self.match(AleoParser.NOR)
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 15)
                self.state = 842
                self.match(AleoParser.GT)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 16)
                self.state = 843
                self.match(AleoParser.GTE)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 17)
                self.state = 844
                self.match(AleoParser.LT)
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 18)
                self.state = 845
                self.match(AleoParser.LTE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Is_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(AleoParser.IS, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def EQ(self):
            return self.getToken(AleoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(AleoParser.NEQ, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_is_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIs_op" ):
                listener.enterIs_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIs_op" ):
                listener.exitIs_op(self)




    def is_op(self):

        localctx = AleoParser.Is_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_is_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(AleoParser.IS)
            self.state = 849
            self.match(AleoParser.DOT)
            self.state = 850
            _la = self._input.LA(1)
            if not(_la==68 or _la==69):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assert_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(AleoParser.ASSERT, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def EQ(self):
            return self.getToken(AleoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(AleoParser.NEQ, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_assert_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_op" ):
                listener.enterAssert_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_op" ):
                listener.exitAssert_op(self)




    def assert_op(self):

        localctx = AleoParser.Assert_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_assert_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.match(AleoParser.ASSERT)
            self.state = 853
            self.match(AleoParser.DOT)
            self.state = 854
            _la = self._input.LA(1)
            if not(_la==68 or _la==69):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(AleoParser.COMMIT, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def BHP256(self):
            return self.getToken(AleoParser.BHP256, 0)

        def BHP512(self):
            return self.getToken(AleoParser.BHP512, 0)

        def BHP768(self):
            return self.getToken(AleoParser.BHP768, 0)

        def BHP1024(self):
            return self.getToken(AleoParser.BHP1024, 0)

        def PED64(self):
            return self.getToken(AleoParser.PED64, 0)

        def PED128(self):
            return self.getToken(AleoParser.PED128, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_commit_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_op" ):
                listener.enterCommit_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_op" ):
                listener.exitCommit_op(self)




    def commit_op(self):

        localctx = AleoParser.Commit_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_commit_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(AleoParser.COMMIT)
            self.state = 857
            self.match(AleoParser.DOT)
            self.state = 858
            _la = self._input.LA(1)
            if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 63) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash1_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH(self):
            return self.getToken(AleoParser.HASH, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def BHP256(self):
            return self.getToken(AleoParser.BHP256, 0)

        def BHP512(self):
            return self.getToken(AleoParser.BHP512, 0)

        def BHP768(self):
            return self.getToken(AleoParser.BHP768, 0)

        def BHP1024(self):
            return self.getToken(AleoParser.BHP1024, 0)

        def PED64(self):
            return self.getToken(AleoParser.PED64, 0)

        def PED128(self):
            return self.getToken(AleoParser.PED128, 0)

        def PSD2(self):
            return self.getToken(AleoParser.PSD2, 0)

        def PSD4(self):
            return self.getToken(AleoParser.PSD4, 0)

        def PSD8(self):
            return self.getToken(AleoParser.PSD8, 0)

        def KECCAK256(self):
            return self.getToken(AleoParser.KECCAK256, 0)

        def KECCAK384(self):
            return self.getToken(AleoParser.KECCAK384, 0)

        def KECCAK512(self):
            return self.getToken(AleoParser.KECCAK512, 0)

        def SHA3_256(self):
            return self.getToken(AleoParser.SHA3_256, 0)

        def SHA3_384(self):
            return self.getToken(AleoParser.SHA3_384, 0)

        def SHA3_512(self):
            return self.getToken(AleoParser.SHA3_512, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_hash1_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash1_op" ):
                listener.enterHash1_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash1_op" ):
                listener.exitHash1_op(self)




    def hash1_op(self):

        localctx = AleoParser.Hash1_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hash1_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(AleoParser.HASH)
            self.state = 861
            self.match(AleoParser.DOT)
            self.state = 862
            _la = self._input.LA(1)
            if not(((((_la - 74)) & ~0x3f) == 0 and ((1 << (_la - 74)) & 32767) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hash2_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HASH_MANY(self):
            return self.getToken(AleoParser.HASH_MANY, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def PSD2(self):
            return self.getToken(AleoParser.PSD2, 0)

        def PSD4(self):
            return self.getToken(AleoParser.PSD4, 0)

        def PSD8(self):
            return self.getToken(AleoParser.PSD8, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_hash2_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHash2_op" ):
                listener.enterHash2_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHash2_op" ):
                listener.exitHash2_op(self)




    def hash2_op(self):

        localctx = AleoParser.Hash2_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_hash2_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 864
            self.match(AleoParser.HASH_MANY)
            self.state = 865
            self.match(AleoParser.DOT)
            self.state = 866
            _la = self._input.LA(1)
            if not(((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 7) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cast_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CAST(self):
            return self.getToken(AleoParser.CAST, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def LOSSY(self):
            return self.getToken(AleoParser.LOSSY, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_cast_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCast_op" ):
                listener.enterCast_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCast_op" ):
                listener.exitCast_op(self)




    def cast_op(self):

        localctx = AleoParser.Cast_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_cast_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(AleoParser.CAST)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1:
                self.state = 869
                self.match(AleoParser.DOT)
                self.state = 870
                self.match(AleoParser.LOSSY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Branch_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BRANCH(self):
            return self.getToken(AleoParser.BRANCH, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def EQ(self):
            return self.getToken(AleoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(AleoParser.NEQ, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_branch_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBranch_op" ):
                listener.enterBranch_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBranch_op" ):
                listener.exitBranch_op(self)




    def branch_op(self):

        localctx = AleoParser.Branch_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_branch_op)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(AleoParser.BRANCH)
            self.state = 874
            self.match(AleoParser.DOT)
            self.state = 875
            _la = self._input.LA(1)
            if not(_la==68 or _la==69):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Random_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAND(self):
            return self.getToken(AleoParser.RAND, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def CHACHA(self):
            return self.getToken(AleoParser.CHACHA, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_random_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRandom_op" ):
                listener.enterRandom_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRandom_op" ):
                listener.exitRandom_op(self)




    def random_op(self):

        localctx = AleoParser.Random_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_random_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(AleoParser.RAND)
            self.state = 878
            self.match(AleoParser.DOT)
            self.state = 879
            self.match(AleoParser.CHACHA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Get_or_use_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(AleoParser.GET, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def OR_USE(self):
            return self.getToken(AleoParser.OR_USE, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_get_or_use_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGet_or_use_op" ):
                listener.enterGet_or_use_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGet_or_use_op" ):
                listener.exitGet_or_use_op(self)




    def get_or_use_op(self):

        localctx = AleoParser.Get_or_use_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_get_or_use_op)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(AleoParser.GET)
            self.state = 882
            self.match(AleoParser.DOT)
            self.state = 883
            self.match(AleoParser.OR_USE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sign_verify_opContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGN(self):
            return self.getToken(AleoParser.SIGN, 0)

        def DOT(self):
            return self.getToken(AleoParser.DOT, 0)

        def VERIFY(self):
            return self.getToken(AleoParser.VERIFY, 0)

        def SIGN_VERIFY(self):
            return self.getToken(AleoParser.SIGN_VERIFY, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_sign_verify_op

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSign_verify_op" ):
                listener.enterSign_verify_op(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSign_verify_op" ):
                listener.exitSign_verify_op(self)




    def sign_verify_op(self):

        localctx = AleoParser.Sign_verify_opContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_sign_verify_op)
        try:
            self.state = 889
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [37]:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.match(AleoParser.SIGN)
                self.state = 886
                self.match(AleoParser.DOT)
                self.state = 887
                self.match(AleoParser.VERIFY)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 888
                self.match(AleoParser.SIGN_VERIFY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(AleoParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_label

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabel" ):
                listener.enterLabel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabel" ):
                listener.exitLabel(self)




    def label(self):

        localctx = AleoParser.LabelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_label)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(AleoParser.IDENTIFIER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(AleoParser.IDENTIFIER, 0)

        def AS(self):
            return self.getToken(AleoParser.AS, 0)

        def INTO(self):
            return self.getToken(AleoParser.INTO, 0)

        def TO(self):
            return self.getToken(AleoParser.TO, 0)

        def PUBLIC(self):
            return self.getToken(AleoParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(AleoParser.PRIVATE, 0)

        def CONSTANT(self):
            return self.getToken(AleoParser.CONSTANT, 0)

        def FUTURE(self):
            return self.getToken(AleoParser.FUTURE, 0)

        def RECORD(self):
            return self.getToken(AleoParser.RECORD, 0)

        def GROUP(self):
            return self.getToken(AleoParser.GROUP, 0)

        def GEN(self):
            return self.getToken(AleoParser.GEN, 0)

        def SELF(self):
            return self.getToken(AleoParser.SELF, 0)

        def SIGNER(self):
            return self.getToken(AleoParser.SIGNER, 0)

        def CALLER(self):
            return self.getToken(AleoParser.CALLER, 0)

        def BLOCK(self):
            return self.getToken(AleoParser.BLOCK, 0)

        def HEIGHT(self):
            return self.getToken(AleoParser.HEIGHT, 0)

        def W(self):
            return self.getToken(AleoParser.W, 0)

        def X(self):
            return self.getToken(AleoParser.X, 0)

        def Y(self):
            return self.getToken(AleoParser.Y, 0)

        def CONTAINS(self):
            return self.getToken(AleoParser.CONTAINS, 0)

        def GET(self):
            return self.getToken(AleoParser.GET, 0)

        def OR_USE(self):
            return self.getToken(AleoParser.OR_USE, 0)

        def SET(self):
            return self.getToken(AleoParser.SET, 0)

        def REMOVE(self):
            return self.getToken(AleoParser.REMOVE, 0)

        def RAND(self):
            return self.getToken(AleoParser.RAND, 0)

        def CHACHA(self):
            return self.getToken(AleoParser.CHACHA, 0)

        def POSITION(self):
            return self.getToken(AleoParser.POSITION, 0)

        def AWAIT(self):
            return self.getToken(AleoParser.AWAIT, 0)

        def TERNARY(self):
            return self.getToken(AleoParser.TERNARY, 0)

        def SIGN(self):
            return self.getToken(AleoParser.SIGN, 0)

        def VERIFY(self):
            return self.getToken(AleoParser.VERIFY, 0)

        def SIGN_VERIFY(self):
            return self.getToken(AleoParser.SIGN_VERIFY, 0)

        def CALL(self):
            return self.getToken(AleoParser.CALL, 0)

        def ASYNC(self):
            return self.getToken(AleoParser.ASYNC, 0)

        def ABS(self):
            return self.getToken(AleoParser.ABS, 0)

        def DOUBLE(self):
            return self.getToken(AleoParser.DOUBLE, 0)

        def INV(self):
            return self.getToken(AleoParser.INV, 0)

        def NEG(self):
            return self.getToken(AleoParser.NEG, 0)

        def NOT(self):
            return self.getToken(AleoParser.NOT, 0)

        def SQUARE(self):
            return self.getToken(AleoParser.SQUARE, 0)

        def SQRT(self):
            return self.getToken(AleoParser.SQRT, 0)

        def ADD(self):
            return self.getToken(AleoParser.ADD, 0)

        def SUB(self):
            return self.getToken(AleoParser.SUB, 0)

        def MUL(self):
            return self.getToken(AleoParser.MUL, 0)

        def DIV(self):
            return self.getToken(AleoParser.DIV, 0)

        def REM(self):
            return self.getToken(AleoParser.REM, 0)

        def POW(self):
            return self.getToken(AleoParser.POW, 0)

        def SHL(self):
            return self.getToken(AleoParser.SHL, 0)

        def SHR(self):
            return self.getToken(AleoParser.SHR, 0)

        def MOD(self):
            return self.getToken(AleoParser.MOD, 0)

        def AND(self):
            return self.getToken(AleoParser.AND, 0)

        def OR(self):
            return self.getToken(AleoParser.OR, 0)

        def XOR(self):
            return self.getToken(AleoParser.XOR, 0)

        def NAND(self):
            return self.getToken(AleoParser.NAND, 0)

        def NOR(self):
            return self.getToken(AleoParser.NOR, 0)

        def GT(self):
            return self.getToken(AleoParser.GT, 0)

        def GTE(self):
            return self.getToken(AleoParser.GTE, 0)

        def LT(self):
            return self.getToken(AleoParser.LT, 0)

        def LTE(self):
            return self.getToken(AleoParser.LTE, 0)

        def IS(self):
            return self.getToken(AleoParser.IS, 0)

        def EQ(self):
            return self.getToken(AleoParser.EQ, 0)

        def NEQ(self):
            return self.getToken(AleoParser.NEQ, 0)

        def ASSERT(self):
            return self.getToken(AleoParser.ASSERT, 0)

        def COMMIT(self):
            return self.getToken(AleoParser.COMMIT, 0)

        def HASH(self):
            return self.getToken(AleoParser.HASH, 0)

        def HASH_MANY(self):
            return self.getToken(AleoParser.HASH_MANY, 0)

        def BHP256(self):
            return self.getToken(AleoParser.BHP256, 0)

        def BHP512(self):
            return self.getToken(AleoParser.BHP512, 0)

        def BHP768(self):
            return self.getToken(AleoParser.BHP768, 0)

        def BHP1024(self):
            return self.getToken(AleoParser.BHP1024, 0)

        def PED64(self):
            return self.getToken(AleoParser.PED64, 0)

        def PED128(self):
            return self.getToken(AleoParser.PED128, 0)

        def PSD2(self):
            return self.getToken(AleoParser.PSD2, 0)

        def PSD4(self):
            return self.getToken(AleoParser.PSD4, 0)

        def PSD8(self):
            return self.getToken(AleoParser.PSD8, 0)

        def KECCAK256(self):
            return self.getToken(AleoParser.KECCAK256, 0)

        def KECCAK384(self):
            return self.getToken(AleoParser.KECCAK384, 0)

        def KECCAK512(self):
            return self.getToken(AleoParser.KECCAK512, 0)

        def SHA3_256(self):
            return self.getToken(AleoParser.SHA3_256, 0)

        def SHA3_384(self):
            return self.getToken(AleoParser.SHA3_384, 0)

        def SHA3_512(self):
            return self.getToken(AleoParser.SHA3_512, 0)

        def CAST(self):
            return self.getToken(AleoParser.CAST, 0)

        def LOSSY(self):
            return self.getToken(AleoParser.LOSSY, 0)

        def BRANCH(self):
            return self.getToken(AleoParser.BRANCH, 0)

        def PROGRAM(self):
            return self.getToken(AleoParser.PROGRAM, 0)

        def IMPORT(self):
            return self.getToken(AleoParser.IMPORT, 0)

        def MAPPING(self):
            return self.getToken(AleoParser.MAPPING, 0)

        def KEY(self):
            return self.getToken(AleoParser.KEY, 0)

        def VALUE(self):
            return self.getToken(AleoParser.VALUE, 0)

        def STRUCT(self):
            return self.getToken(AleoParser.STRUCT, 0)

        def CLOSURE(self):
            return self.getToken(AleoParser.CLOSURE, 0)

        def INPUT(self):
            return self.getToken(AleoParser.INPUT, 0)

        def OUTPUT(self):
            return self.getToken(AleoParser.OUTPUT, 0)

        def FUNCTION(self):
            return self.getToken(AleoParser.FUNCTION, 0)

        def FINALIZE(self):
            return self.getToken(AleoParser.FINALIZE, 0)

        def TRUE(self):
            return self.getToken(AleoParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(AleoParser.FALSE, 0)

        def UNSIGNED_TYPE(self):
            return self.getToken(AleoParser.UNSIGNED_TYPE, 0)

        def SIGNED_TYPE(self):
            return self.getToken(AleoParser.SIGNED_TYPE, 0)

        def FIELD(self):
            return self.getToken(AleoParser.FIELD, 0)

        def SCALAR(self):
            return self.getToken(AleoParser.SCALAR, 0)

        def ADDRESS(self):
            return self.getToken(AleoParser.ADDRESS, 0)

        def BOOLEAN(self):
            return self.getToken(AleoParser.BOOLEAN, 0)

        def SIGNATURE(self):
            return self.getToken(AleoParser.SIGNATURE, 0)

        def ADDRESS_LITERAL(self):
            return self.getToken(AleoParser.ADDRESS_LITERAL, 0)

        def SIGNATURE_LITERAL(self):
            return self.getToken(AleoParser.SIGNATURE_LITERAL, 0)

        def REGISTER(self):
            return self.getToken(AleoParser.REGISTER, 0)

        def getRuleIndex(self):
            return AleoParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)




    def identifier(self):

        localctx = AleoParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & -512) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 7881299347898367) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





